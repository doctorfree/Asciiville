#!/bin/bash
#
# build - compile and optionally install Asciiville components
#

build_btop() {
  # Repo: https://github.com/doctorfree/Asciiville
  #
  # Fork of Repo: https://github.com/aristocratos/btop
  #
  # Build Dependencies:
  # On Ubuntu 20.04
  #   sudo apt update -y
  #   sudo apt upgrade -y
  #   sudo apt install coreutils git make tar zstd
  #   sudo apt install -y build-essential
  #   sudo apt install -y gcc-10 g++-10 cpp-10
  #   sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 \
  #                            --slave /usr/bin/g++ g++ /usr/bin/g++-10 \
  #                            --slave /usr/bin/gcov gcov /usr/bin/gcov-10
  #

  [ -f bin/btop ] || make STATIC=true STRIP=true
  chmod +x bin/btop

  [ "${INSTALL}" ] && sudo PREFIX=${PREFIX} make install
}

build_cbftp() {
  #
  # Repo: https://github.com/doctorfree/Asciiville
  #
  # Fork of Repo: https://github.com/cbftp/cbftp-2022
  #
  # Linux build dependencies: make g++ libssl-dev libncursesw5-dev
  # On Ubuntu 20.04
  #   sudo apt update -y
  #   sudo apt upgrade -y
  #   sudo apt install make g++ libssl-dev libncursesw5-dev
  #
  [ -f bin/cbftp ] || {
    [ -f /etc/arch-release ] && {
      NCW="src/ui/ncurseswrap.h"
      cp ${NCW} /tmp/nc_save$$
      cat ${NCW} | sed -e "s%ncursesw/curses.h%ncurses.h%" > /tmp/nc$$
      cp /tmp/nc$$ ${NCW}
      rm -f /tmp/nc$$
    }
    make
    [ -f /tmp/nc_save$$ ] && cp /tmp/nc_save$$ ${NCW}
  }
  chmod +x bin/*

  [ "${INSTALL}" ] && {
    [ -d ${PREFIX}/usr ] || sudo mkdir -p ${PREFIX}/usr
    [ -d ${PREFIX}/usr/bin ] || sudo mkdir -p ${PREFIX}/usr/bin
    sudo cp bin/* ${PREFIX}/usr/bin
  }
}

build_endo() {
  #
  # Repo: https://github.com/doctorfree/Asciiville
  #
  # Fork of Repo: https://github.com/mame/winner
  #
  [ -f endoh1 ] && [ -f endoh1_color ] || make everything
  chmod +x endoh1 endoh1_color

  [ "${INSTALL}" ] && {
    [ -d ${PREFIX}/usr ] || sudo mkdir -p ${PREFIX}/usr
    [ -d ${PREFIX}/usr/bin ] || sudo mkdir -p ${PREFIX}/usr/bin
    sudo cp endoh1 endoh1_color ${PREFIX}/usr/bin
  }
}

build_jp2a() {
  #
  # Repo: https://github.com/doctorfree/Asciiville
  #
  # Fork of Repo: https://github.com/cslarsen/jp2a
  #
  [ -f src/jp2a ] || {
    prefix="--prefix=/usr"
    [ "${PREFIX}" ] && prefix="--prefix=${PREFIX}"
    autoreconf -vi
    ./configure ${prefix} --enable-curl --enable-termlib
    make -j
  }

  chmod +x src/jp2a

  [ "${INSTALL}" ] && sudo PREFIX=${PREFIX} make install
}

build_nethack() {
  #
  # Repo: https://github.com/doctorfree/Asciiville
  #
  # Fork of Repo: https://github.com/NetHack/NetHack
  # with bug fixes and enhancements from UnNetHack at
  # https://github.com/UnNetHack/UnNetHack
  #
  # Initial build for NetHack
  # [ -f src/nethack ] || {
  #   sys/unix/setup.sh sys/unix/hints/linux-asciiville
  #   make fetch-lua
  #   make
  #   cd doc
  #   make
  #   cd ..
  # }
  # chmod +x src/nethack
  #
  # Revised build with UnNetHack changes
  [ -f src/nethack ] || {
    cd sys/autoconf
    ./bootstrap.sh
    cd ../..
    chmod 755 configure
    ./configure --prefix=/usr/games \
                --with-owner=games \
                --with-group=games \
                --enable-wizmode=doctorwhen
    make
  }
  [ "${INSTALL}" ] && sudo PREFIX=${PREFIX} make install
}

build_ninvaders() {
  [ -f cmake_build/ninvaders ] || {
    cmake -B cmake_build
    cmake --build cmake_build -j2
  }
}

build_tetris() {
  [ -f tetris ] || {
    ./configure.sh --prefix=/usr/games --enable-xlib=no --enable-curses=yes
    make
    make gameserver
  }
  [ "${INSTALL}" ] && sudo make install
}

usage() {
    printf "\nUsage: ./build [-i] [-p prefix] [-u] project [project2 ...]"
    printf "\nWhere:"
    printf "\n\t-i indicates install"
    printf "\n\t-p prefix specifies installation prefix (default /usr)"
    printf "\n\t-u displays this usage message and exits\n"
    printf "\nNo arguments: build btop, configure with prefix=/usr, build\n"
    printf "\n'project' can be one or more of 'btop', 'cbftp',"
    printf "\n'jp2a', 'nethack', 'ninvaders', and 'tetris'\n"
    exit 1
}

PROJ=btop
INSTALL=
PREFIX=/usr
while getopts "ip:u" flag; do
    case $flag in
        i)
            INSTALL=1
            ;;
        p)
            PREFIX="$OPTARG"
            ;;
        u)
            usage
            ;;
    esac
done
shift $(( OPTIND - 1 ))

for project in $*
do
  case "${project}" in
    btop)
      PROJ=btop
      [ -d ${PROJ} ] && {
        cd ${PROJ}
        build_btop
        cd ..
      }
      ;;
    cbftp)
      PROJ=cbftp
      [ -d ${PROJ} ] && {
        cd ${PROJ}
        build_cbftp
        cd ..
      }
      ;;
    endo)
      PROJ=endoh1
      [ -d ${PROJ} ] && {
        cd ${PROJ}
        build_endo
        cd ..
      }
      ;;
    jp2a)
      PROJ=jp2a
      [ -d ${PROJ} ] && {
        cd ${PROJ}
        build_jp2a
        cd ..
      }
      ;;
    nethack)
      PROJ=games/nethack
      [ -d ${PROJ} ] && {
        cd ${PROJ}
        build_nethack
        cd ../..
      }
      ;;
    ninvaders)
      PROJ=games/ninvaders
      [ -d ${PROJ} ] && {
        cd ${PROJ}
        build_ninvaders
        cd ../..
      }
      ;;
    tetris|vitetris)
      PROJ=games/tetris
      [ -d ${PROJ} ] && {
        cd ${PROJ}
        build_tetris
        cd ../..
      }
      ;;
    *)
      echo "Unsupported project build: ${project}"
      continue
      ;;
  esac
  [ -d ${PROJ} ] || {
    echo "$PROJ does not exist or is not a directory."
    echo "Run: git clone https://github.com/doctorfree/Asciiville"
  }
done
