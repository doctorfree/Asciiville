#!/bin/bash
#
# build - compile and optionally install Asciiville components
#

build_nethack() {
  #
  # Repo: https://github.com/doctorfree/Asciiville
  #
  # Fork of Repo: https://github.com/NetHack/NetHack
  # with bug fixes and enhancements from UnNetHack at
  # https://github.com/UnNetHack/UnNetHack
  #
  # Initial build for NetHack
  # [ -f src/nethack ] || {
  #   sys/unix/setup.sh sys/unix/hints/linux-asciiville
  #   make fetch-lua
  #   make
  #   cd doc
  #   make
  #   cd ..
  # }
  # chmod +x src/nethack
  #
  # Revised build with UnNetHack changes
  [ -f src/nethack ] || {
    cd sys/autoconf
    ./bootstrap.sh
    cd ../..
    chmod 755 configure
    ./configure --prefix=${PREFIX}/games \
                --with-owner=games \
                --with-group=games \
                --enable-wizmode=doctorwhen
    make
  }
  [ "${INSTALL}" ] && sudo PREFIX=${PREFIX} make install
}

build_tetris() {
  [ -f tetris ] || {
    ./configure.sh --prefix=${PREFIX}/games --enable-xlib=no --enable-curses=yes
    make
    make gameserver
  }
  [ "${INSTALL}" ] && sudo make install
}

usage() {
    printf "\nUsage: ./build [-i] [-p prefix] [-u] project [project2 ...]"
    printf "\nWhere:"
    printf "\n\t-i indicates install"
    printf "\n\t-p prefix specifies installation prefix (default ${PREFIX})"
    printf "\n\t-u displays this usage message and exits\n"
    printf "\nNo arguments: build nethack, configure with prefix=${PREFIX}, build\n"
    exit 1
}

PROJ=nethack
INSTALL=
platform=`uname -s`
if [ "${platform}" == "Darwin" ]
then
  PREFIX=/usr/local
else
  PREFIX=/usr
fi
while getopts "ip:u" flag; do
    case $flag in
        i)
            INSTALL=1
            ;;
        p)
            PREFIX="$OPTARG"
            ;;
        u)
            usage
            ;;
    esac
done
shift $(( OPTIND - 1 ))

for project in $*
do
  case "${project}" in
    nethack)
      PROJ=games/nethack
      [ -d ${PROJ} ] && {
        cd ${PROJ}
        build_nethack
        cd ../..
      }
      ;;
    tetris|vitetris)
      PROJ=games/tetris
      [ -d ${PROJ} ] && {
        cd ${PROJ}
        build_tetris
        cd ../..
      }
      ;;
    *)
      echo "Unsupported project build: ${project}"
      continue
      ;;
  esac
  [ -d ${PROJ} ] || {
    echo "$PROJ does not exist or is not a directory."
    echo "Run: git clone https://github.com/doctorfree/Asciiville"
  }
done
