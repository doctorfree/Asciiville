#!/bin/bash
#
# asciiville - front-end for a variety of terminal and/or `tmux` sessions.
#
#     The `asciiville` command can be used to invoke:
#
#     * The lightweight character based system monitor, `btop`
#     * The lightweight character based web browser, `lynx` or `w3m`
#     * The lightweight character based mail client, `neomutt`
#     * The lightweight character based file manager, `ranger`
#     * One or more terminal emulators running a specified command
#     * A tmux session
#     * A network upload/download speed test
#     * A web search
#     * Character based ASCII art
#     * Character based world map
#     * Command line character based Twitter client
#     * Display system info
#     * MusicPlayerPlus or RoonCommandLine menus
#     * Any character based client the user wishes to run
#     * One of several asciimatics animations optionally accompanied by audio
#
# Written by Ronald Joe Record <ronaldrecord@gmail.com>
# April, 2022
#

BOLD=$(tput bold)
NORMAL=$(tput sgr0)
PLEASE="Please enter your"
COMMAND=btop
FIG_FONTS="/usr/share/figlet-fonts"
HOME_FIG_FONTS="${HOME}/src/Asciiville/share/figlet-fonts"
FIG_TEXT="Asciiville"
USE_FONT="Standard"
WEB_HOME="https://github.com/doctorfree/Asciiville#readme"
LOLCAT_NORM="lolcat"
LOLCAT_ANIM="lolcat --animate --speed=60.0"
LOLCAT="${LOLCAT_ANIM}"
MTITLE="Asciiville"
ARTDIR=/usr/share/asciiville/art
MUSEDIR=/usr/share/asciiville/music
SONG="${MUSEDIR}/Chronos.mp3"
ALTSONG="${MUSEDIR}/Epic_Dramatic-Yuriy_Bespalov.wav"
art_font_size=4
txt_font_size=20
# fifo name
fifo_name="/tmp/asciiville_fifo_$$"

# Some configuration can be maintained here
CONFIG="${HOME}/.config/asciiville/config"
[ -f ${CONFIG} ] && . ${CONFIG}

if [ `echo $PATH | grep -c /usr/local/bin` -ne "1" ]
then
  export PATH="$PATH:/usr/local/bin"
fi
if [ `echo $PATH | grep -c /usr/games` -ne "1" ]
then
  export PATH="$PATH:/usr/games"
fi

usage() {
  printf "\nUsage: asciiville [-a] [-A] [-b] [-c command] [-C] [-d] [-f] [-F] [-g]"
  printf "\n\t[-i] [-I] [-jJ] [-k] [-l] [-L level] [-m] [-M] [-N] [-n num] [-p]"
  printf "\n\t[-P script] [-r] [-R] [-s song] [-S] [-t] [-T] [-U] [-v] [-V show]"
  printf "\n\t[-w] [-W] [-x] [-X] [-y] [-Y] [-z] [-Z] [-u] [file1 [file2 ...]]\n"
  printf "\nTerminal/Command options:"
  printf "\n\t-c 'command' indicates use 'command'"
  printf "\n\t\tIf 'command' is keyword 'maps' then display a map using mapscii"
  printf "\n\t\tIf 'command' is keyword 'moon' then display the phase of the Moon"
  printf "\n\t\tIf 'command' is keyword 'news' then display RSS news feeds"
  printf "\n\t\tIf 'command' is keyword 'search' then a web search is performed"
  printf "\n\t\tIf 'command' is keyword 'speed' then a speed test is performed"
  printf "\n\t\tIf 'command' is keyword 'translate' then the translation tool is run"
  printf "\n\t\tIf 'command' is keyword 'twitter' then a Twitter client is run"
  printf "\n\t\tIf 'command' is keyword 'weather' then display a weather report"
  printf "\n\t\tOtherwise, 'command' will be executed in a terminal window"
  printf "\n\t-d indicates use disk usage analyzer as default command"
  printf "\n\t-f indicates use cbftp/ncftp as the default command"
  printf "\n\t-F indicates fullscreen display"
  printf "\n\t-g indicates use gnome terminal emulator"
  printf "\n\t-i indicates start asciiville in interactive mode"
  printf "\n\t-I indicates display system info"
  printf "\n\t-l indicates use lynx web browser as the default command"
  printf "\n\t-L 'level' use lolcat coloring, 'level' can be '1' or '2' (animate)"
  printf "\n\t-r indicates use retro terminal emulator"
  printf "\n\t-t indicates use tilix terminal emulator"
  printf "\n\t-U indicates set command to Ninvaders"
  printf "\n\t-w indicates use w3m web browser as the default command"
  printf "\n\t-W indicates use cmatrix as the default command"
  printf "\n\t-x indicates use xfce4 terminal emulator"
  printf "\n\t-X indicates run commands in current terminal window"
  printf "\n\t-y indicates use ranger file manager as the default command"
  printf "\n\t-Y indicates use NetHack dungeon game as the default command"
  printf "\n\t-z indicates use neomutt email client as the default command"
  printf "\nSlideshow/ASCIImatics animation options:"
  printf "\n\t-A indicates use Asciiville scenes in ASCIImatics display"
  printf "\n\t-a indicates play audio during ASCIImatics display"
  printf "\n\t-b indicates use backup audio during ASCIImatics display"
  printf "\n\t-C indicates cycle slideshow endlessly (Ctrl-c to exit show)"
  printf "\n\t-j indicates use Julia Set scenes in ASCIImatics display"
  printf "\n\t-J indicates Julia Set with several runs using different parameters"
  printf "\n\t-m indicates use MusicPlayerPlus scenes in ASCIImatics display"
  printf "\n\t-M indicates use MusicPlayerPlus MPD client as default command"
  printf "\n\t-n num specifies the number of times to cycle ASCIImatics scenes"
  printf "\n\t-N indicates use alternate comments in Plasma ASCIImatics scenes"
  printf "\n\t-p indicates use Plasma scenes in ASCIImatics display"
  printf "\n\t-P script specifies the ASCIImatics script to run"
  printf "\n\t-s song specifies a song to accompany an ASCIImatics animation"
  printf "\n\t\t'song' can be the full pathname to an audio file or a"
  printf "\n\t\trelative pathname to an audio file in the MPD music library"
  printf "\n\t\tor ~/Music/"
  printf "\n\t-S indicates display ASCIImatics splash animation"
  printf "\n\t-V 'show' displays an ascii art slide show"
  printf "\n\t\t'show' can be Art, Doctorwhen, Dragonflies, Fractals,"
  printf "\n\t\t\tLyap, Mixed, Owls, Space, or Waterfalls"
  printf "\n\t-Z indicates do not play audio during slideshow/animation\n"
  printf "\nGeneral options:"
  printf "\n\t-k indicates kill Asciiville tmux sessions and ASCIImatics scripts"
  printf "\n\t-R indicates record tmux session with asciinema"
  printf "\n\t-T indicates use a tmux session for either ASCIImatics or command"
  printf "\n\t-v displays the Asciiville version and exits"
  printf "\n\t-u displays this usage message and exits\n"
  printf "\nRemaining arguments are filenames of ascii art to display\n"
  printf "\nInvoked without any arguments, 'asciiville' will display a menu\n"
  printf "\nType 'man asciiville' for detailed usage info on Asciiville"
  printf "\nType 'man asciisplash' for detailed usage info on Asciisplash"
  printf "\nType 'man btop' for detailed usage info on the Btop system monitor"
  printf "\nType 'man lynx' for detailed usage info on the Lynx web browser"
  printf "\nType 'man neomutt' for detailed usage info on the NeoMutt email client"
  printf "\nType 'man cbftp' for detailed usage info on the Cbftp FTP client"
  printf "\nType 'man ranger' for detailed usage info on the Ranger file manager\n"
  exit 1
}

kill_tmux_sessions() {
  SESSIONS="asciiville asciisplash"
  for session in ${SESSIONS}
  do
    ps -ef | grep tmux | grep ${session} > /dev/null && {
      tmux kill-session -t ${session}
    }
  done
  ASCIIS="asciiart asciijulia asciimpplus asciiplasma"
  for ascii in ${ASCIIS}
  do
    ps -ef | grep -v grep | grep ${ascii} > /dev/null && {
      ps -ef | grep -v grep | grep ${ascii} | while IFS= read -r line
      do
        pid=`echo "$line" | awk ' { print $2 } '`
        kill ${pid}
      done 
    }
  done
}

# colorize man pages
man () {
  LESS_TERMCAP_mb=$'\e[1;32m' \
  LESS_TERMCAP_md=$'\e[1;32m' \
  LESS_TERMCAP_me=$'\e[0m' \
  LESS_TERMCAP_se=$'\e[0m' \
  LESS_TERMCAP_so=$'\e[01;33m' \
  LESS_TERMCAP_ue=$'\e[0m' \
  LESS_TERMCAP_us=$'\e[1;4;31m' \
  command man "$@"
}

not_in_path() {
  echo "Option \'$2\' indicates use $1 as the default command."
  echo "However, $1 is not installed or not in your path."
  echo "You may be able to install $1 using apt or dnf as follows:"
  printf "\n\n\tsudo apt install $1\nor"
  printf "\n\tsudo dnf install $1\n\n"
}

generate_art() {
  image_dir=
  select_input_dir
  [ "${image_dir}" ] && {
    ascii_dir=
    select_output_dir
    [ "${ascii_dir}" ] && {
      save_config
      echo "Selected image input directory = ${image_dir}"
      echo "Selected ascii art output directory = ${ascii_dir}"
      while true
      do
        read -p "Generate ASCII Art with these selections? (y/n) " answer
        case ${answer} in
          [Yy]* )
            show_ascii_art -I "${image_dir}" -O "${ascii_dir}"
            while true
            do
              read -p "View slideshow of generated ascii art? (y/n) " viewslides
              case ${viewslides} in
                [Yy]* )
                  showname=`basename "${ascii_dir}"`
                  showdir=`dirname "${ascii_dir}"`
                  play_slide_show "${showname}" "${showdir}"
                  break
                  ;;
                [Nn]* )
                  printf "\nSkipping ascii art slideshow.\n"
                  break
                  ;;
                * ) echo "Please answer 'y' to view slideshow, or 'n' to skip."
                  ;;
              esac
            done
            break
            ;;
          [Nn]* )
            printf "\nSkipping ascii art generation.\n"
            break
            ;;
          * ) echo "Please answer 'y' to select directory, or 'n' to skip."
            ;;
        esac
      done
    }
  }
}

save_config() {
  [ -f ${CONFIG} ] && {
    echo "ARTDIR=${ARTDIR}" > ${CONFIG}
    echo "MUSEDIR=${MUSEDIR}" >> ${CONFIG}
    echo "SONG=${SONG}" >> ${CONFIG}
    echo "ALTSONG=${ALTSONG}" >> ${CONFIG}
    echo "" >> ${CONFIG}
    echo "AUDIO=${AUDIO}" >> ${CONFIG}
    echo "BROWSER=${BROWSER}" >> ${CONFIG}
    echo "COMMAND=${COMMAND}" >> ${CONFIG}
    echo "FULLSCREEN=${FULLSCREEN}" >> ${CONFIG}
    echo "LOLCAT=\"${LOLCAT}\"" >> ${CONFIG}
    echo "MTITLE=\"${MTITLE}\"" >> ${CONFIG}
    echo "CURRENT=${CURRENT}" >> ${CONFIG}
    echo "GNOME=${GNOME}" >> ${CONFIG}
    echo "RETRO=${RETRO}" >> ${CONFIG}
    echo "TILIX=${TILIX}" >> ${CONFIG}
    echo "XFCE4=${XFCE4}" >> ${CONFIG}
    echo "" >> ${CONFIG}
    echo "use_lolcat=${use_lolcat}" >> ${CONFIG}
    echo "use_lol=${use_lol}" >> ${CONFIG}
    echo "journal=\"${journal}\"" >> ${CONFIG}
    echo "style=\"${style}\"" >> ${CONFIG}
    echo "art_font_size=${art_font_size}" >> ${CONFIG}
    echo "txt_font_size=${txt_font_size}" >> ${CONFIG}
  }
}

set_user_conf() {
  exitcode=$?
  save_config
  rm -f ${fifo_name}

  exit ${exitcode}
}

select_alt_term() {
  if [ "${have_gnome}" ]
  then
    GNOME=1
  else
    if [ "${have_tilix}" ]
    then
      TILIX=1
    else
      if [ "${have_xfce4}" ]
      then
        XFCE4=1
      else
        if [ "${have_retro}" ]
        then
          RETRO=1
        else
          echo "Cannot find a terminal emulator I like. Using current window."
          CURRENT=1
        fi
      fi
    fi
  fi
}

make_it_so() {
  # Set the command to use
  # Based on command line switches (-S, -T) or menu selections
  AVCOMM="${COMMAND}"
  if [ "${DO_SPLASH}" ]
  then
    if [ "${TMUX_SPLASH}" ]
    then
      AVCOMM="${ASCSPLASH_TMUX}"
    else
      AVCOMM="${ASCSPLASH}"
    fi
    MTITLE="ASCIImatics Animation"
  else
    [ "${TMUX_ASC}" ] && AVCOMM="${COMMAND_TMUX}"
  fi

  # Begin terminal command startup section
  if [ "${CURRENT}" ]
  then
    [ "${FULLSCREEN}" ] && add_fullscreen
    ${AVCOMM}
    [ "${FULLSCREEN}" ] && {
      remove_fullscreen
    }
  else
    if [ "${RETRO}" ]
    then
      if [ "${FULLSCREEN}" ]
      then
        cool-retro-term --fullscreen -e ${AVCOMM} > /dev/null 2>&1 &
      else
        cool-retro-term -e ${AVCOMM} > /dev/null 2>&1 &
      fi
    else
      if [ "${FULLSCREEN}" ]
      then
        if [ "${TILIX}" ]
        then
          tilix --title="${MTITLE}" \
                --full-screen \
                --window-style=borderless \
                --profile=Asciiville \
                --command="${AVCOMM}" 2> /dev/null &
        else
          if [ "${XFCE4}" ]
          then
            xfce4-terminal --title "${MTITLE}" \
                --icon=audio-player \
                --hide-menubar \
                --hide-toolbar \
                --hide-scrollbar \
                --fullscreen \
                --command="${AVCOMM}" &
          else
            gnome-terminal -t "${MTITLE}" \
                --hide-menubar \
                --full-screen \
                --profile=Asciiville \
                -- ${AVCOMM} &
          fi
        fi
      else
        if [ "${TILIX}" ]
        then
          tilix --title="${MTITLE}" \
                --window-style=borderless \
                --geometry=90x28+150+25 \
                --profile=Asciiville \
                --command="${AVCOMM}" 2> /dev/null &
        else
          if [ "${XFCE4}" ]
          then
            xfce4-terminal --title "${MTITLE}" \
              --icon=audio-player \
              --hide-menubar \
              --hide-toolbar \
              --hide-scrollbar \
              --geometry 90x28+150+25 \
              --command="${AVCOMM}" &
          else
            gnome-terminal -t "${MTITLE}" \
                --hide-menubar \
                --geometry 90x28+150+25 \
                --profile=Asciiville \
                -- ${AVCOMM} &
          fi
        fi
      fi
    fi
  fi
  # End terminal command startup section
}

select_font() {
  # Array with font names
  fonts=("Bolger" "Lean" "sblood" "Slant" "Shadow" "Speed" "Varsity" "Small" "Small Script" "Small Shadow" "Small Slant")
  smallfonts=("Small" "Small Script" "Small Shadow" "Small Slant")

  # Seed random generator
  RANDOM=$$$(date +%s)

  if [ "$2" == "small" ]
  then
    USE_FONT=${smallfonts[ $RANDOM % ${#smallfonts[@]} ]}
  else
    USE_FONT=${fonts[ $RANDOM % ${#fonts[@]} ]}
  fi
  [ "${USE_FONT}" == "Lean" ] && {
    [ "${FULLSCREEN}" ] || {
      while [ "${USE_FONT}" == "Lean" ]
      do
        USE_FONT=${fonts[ $RANDOM % ${#fonts[@]} ]}
      done
    }
  }
  [ -r "${FIG_FONTS}/${USE_FONT}.flf" ] || USE_FONT="Standard"

  goBig=
  for font in "${smallfonts[@]}"
  do
    [[ "${USE_FONT}" == "$font" ]] && {
      goBig=1
      break
    }
  done

  case "$1" in
    AsciiAppTerm)
      FIG_TEXT="App & Terminal"
      ;;
    AsciiArt)
      if [ "${goBig}" ]
      then
        FIG_TEXT="Asciiville Art"
      else
        FIG_TEXT="Ascii Art"
      fi
      ;;
    Asciimatics)
      if [ "${goBig}" ]
      then
        FIG_TEXT="Asciimatics"
      else
        FIG_TEXT="Animation"
      fi
      ;;
    Asciiville)
      if [ "${goBig}" ]
      then
        FIG_TEXT="Asciiville"
      else
        FIG_TEXT="Asciiville"
      fi
      ;;
    Help)
      if [ "${goBig}" ]
      then
        FIG_TEXT="Asciiville Help"
      else
        FIG_TEXT="Help"
      fi
      ;;
    Journal)
      if [ "${goBig}" ]
      then
        FIG_TEXT="Journal"
      else
        FIG_TEXT="Journal"
      fi
      ;;
    MusicPlayer)
      if [ "${goBig}" ]
      then
        FIG_TEXT="MusicPlayerPlus"
      else
        FIG_TEXT="Music"
      fi
      ;;
    Roon)
      if [ "${goBig}" ]
      then
        FIG_TEXT="RoonCommandLine"
      else
        FIG_TEXT="Roon"
      fi
      ;;
    *)
      if [ "${goBig}" ]
      then
        FIG_TEXT="Asciiville"
      else
        FIG_TEXT="Asciiville"
      fi
      ;;
  esac
}

add_fullscreen() {
  [ "${have_wmctrl}" ] && {
    [ "${have_xprop}" ] && {
      # The things a man must do
      win_id=`wmctrl -lp | grep $(xprop -root | grep _NET_ACTIVE_WINDOW | head -1 | awk '{print $5}' | sed 's/,//' | sed 's/^0x/0x0/') | awk ' { print $1 } '`
      [ "${win_id}" ] && xprop -id ${win_id} | grep _NET_WM_STATE | grep FULLSCREEN > /dev/null && isfull=1
    }
    [ "${isfull}" ] || {
      wmctrl -r ':ACTIVE:' -b add,fullscreen
      # [ "${isfull}" ] || wmctrl -r ':ACTIVE:' -b add,maximized_vert,maximized_horz,fullscreen
      sleep 0.2
    }
  }
}

remove_fullscreen() {
  [ "${have_wmctrl}" ] && {
    [ "${isfull}" ] || {
      wmctrl -r ':ACTIVE:' -b remove,fullscreen
      # wmctrl -r ':ACTIVE:' -b remove,maximized_vert,maximized_horz,fullscreen
      clear
      sleep 0.2
    }
  }
}

wait_for_done() {
  # if fifo not found, create
  [ -p "${fifo_name}" ] || mkfifo "${fifo_name}"

  while true
  do
    # read line from fifo_name
    [ -p "${fifo_name}" ] || break
    # read -r -u 3 status<${fifo_name}
    read -r status<${fifo_name}
    # if status is done, break from loop
    if [ "${status}" = 'done' ]
    then
      break
    fi
  done

  rm -f ${fifo_name}
}

show_art_file() {
  art="$1"
  if [ "$2" ]
  then
    art_dir="-A $2"
  else
    art_dir=
  fi
  showargs="${art_dir} -v -C ${cycarg} ${lolarg} ${audarg}"
  save_config
  clear
  if [ "${CURRENT}" ]
  then
    add_fullscreen
    num_exp='^[0-9]+$'
    termname=unknown
    myppid=`ps -e | grep ${PPID} | awk ' { print $1 } '`
    myppid=`echo ${myppid} | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'`
    if [[ ${myppid} =~ ${num_exp} ]]
    then
      parent=`ps -o ppid= -p ${myppid}`
      parent=`echo ${parent} | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'`
      if [[ ${parent} =~ ${num_exp} ]]
      then
        termname=`ps -e | grep ${parent} | awk ' { print $4 } '`
      fi
    fi

    case ${termname} in
      gnome-terminal*)
        show_ascii_art -e gnome ${showargs} -a "${art}"
        ;;
      tilix*)
        show_ascii_art -e tilix ${showargs} -a "${art}"
        ;;
      xfce4-terminal*)
        xfce4-terminal --tab \
             --title "${art} Slideshow" \
             --color-bg=Black \
             --hide-menubar \
             --hide-borders \
             --hide-toolbar \
             --hide-scrollbar \
             --command="show_ascii_art -e xfce4 -K ${fifo_name} ${showargs} -a '${art}'" &
        wait_for_done
        ;;
      *)
        show_ascii_art ${showargs} -a "${art}"
        ;;
    esac
    remove_fullscreen
  else
    if [ "${RETRO}" ]
    then
      cool-retro-term --fullscreen \
                      -e show_ascii_art ${showargs} -a "${art}" > /dev/null 2>&1
    else
      if [ "${XFCE4}" ]
      then
        add_fullscreen
        xfce4-terminal --fullscreen \
             --color-bg=Black \
             --hide-menubar \
             --hide-borders \
             --hide-toolbar \
             --hide-scrollbar \
             --command="show_ascii_art -e xfce4 -K ${fifo_name} ${showargs} -a '${art}'" &
        wait_for_done
        clear
        sleep 2
        remove_fullscreen
      else
        if [ "${TILIX}" ]
        then
          tilix --full-screen \
                --window-style=borderless \
                --profile=Asciiville \
                --command="show_ascii_art -e tilix ${showargs} -a '${art}'"
        else
          gnome-terminal --window --full-screen \
                         --profile=Asciiville \
                         -- show_ascii_art -e gnome ${showargs} -a "${art}"
        fi
      fi
    fi
  fi
}

play_slide_show() {
  showname="$1"
  if [ "$2" ]
  then
    art_dir="-A $2"
  else
    art_dir=
  fi
  showargs="${art_dir} -C ${cycarg} ${lolarg} ${audarg}"
  save_config
  clear
  if [ "${CURRENT}" ]
  then
    add_fullscreen
    num_exp='^[0-9]+$'
    termname=unknown
    myppid=`ps -e | grep ${PPID} | awk ' { print $1 } '`
    myppid=`echo ${myppid} | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'`
    if [[ ${myppid} =~ ${num_exp} ]]
    then
      parent=`ps -o ppid= -p ${myppid}`
      parent=`echo ${parent} | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'`
      if [[ ${parent} =~ ${num_exp} ]]
      then
        termname=`ps -e | grep ${parent} | awk ' { print $4 } '`
      fi
    fi

    case ${termname} in
      gnome-terminal*)
        show_ascii_art -e gnome ${showargs} -s "${showname}"
        ;;
      tilix*)
        show_ascii_art -e tilix ${showargs} -s "${showname}"
        ;;
      xfce4-terminal*)
        xfce4-terminal --tab \
             --title "${showname} Slideshow" \
             --color-bg=Black \
             --hide-menubar \
             --hide-borders \
             --hide-toolbar \
             --hide-scrollbar \
             --command="show_ascii_art -e xfce4 -K ${fifo_name} ${showargs} -s '${showname}'" &
        wait_for_done
        ;;
      *)
        show_ascii_art ${showargs} -s "${showname}"
        ;;
    esac
    remove_fullscreen
  else
    if [ "${RETRO}" ]
    then
      cool-retro-term --fullscreen \
                      -e show_ascii_art ${showargs} -s "${showname}" > /dev/null 2>&1
    else
      if [ "${XFCE4}" ]
      then
        add_fullscreen
        xfce4-terminal --fullscreen \
             --color-bg=Black \
             --hide-menubar \
             --hide-borders \
             --hide-toolbar \
             --hide-scrollbar \
             --command="show_ascii_art -e xfce4 -K ${fifo_name} ${showargs} -s '${showname}'" &
        wait_for_done
        clear
        sleep 2
        remove_fullscreen
      else
        if [ "${TILIX}" ]
        then
          tilix --full-screen \
                --window-style=borderless \
                --profile=Asciiville \
                --command="show_ascii_art -e tilix ${showargs} -s '${showname}'"
        else
          gnome-terminal --window --full-screen \
                         --profile=Asciiville \
                         -- show_ascii_art -e gnome ${showargs} -s "${showname}"
        fi
      fi
    fi
  fi
}

show_figlet() {
  if [ "${use_lolcat}" ]
  then
    if [ "${USE_FONT}" == "Lean" ]
    then
      figlet -c -d ${FIG_FONTS} -f "${USE_FONT}" -k -t ${FIG_TEXT} | tr ' _/' ' ()' | ${LOLCAT}
    else
      figlet -c -d ${FIG_FONTS} -f "${USE_FONT}" -k -t ${FIG_TEXT} | ${LOLCAT}
    fi
  else
    if [ "${USE_FONT}" == "Lean" ]
    then
      figlet -c -d ${FIG_FONTS} -f "${USE_FONT}" -k -t ${FIG_TEXT} | tr ' _/' ' ()'
    else
      figlet -c -d ${FIG_FONTS} -f "${USE_FONT}" -k -t ${FIG_TEXT}
    fi
  fi
}

show_help_menu() {
  MTITLE="Asciiville Help"
  while true
  do
    [ "${use_figlet}" ] && {
      select_font Help small
      show_figlet
    }
    PS3="${BOLD}${PLEASE} choice (numeric or text): ${NORMAL}"
    options=()
    if [ "${have_w3m}" ]
    then
      options+=("Asciiville README")
    else
      [ "${have_lynx}" ] && options+=("Asciiville README")
    fi
    options+=("Asciiville Man Page")
    options+=("Asciiville Animation Man Page")
    options+=("ASCIInema Man Page")
    options+=("Julia Set Animation Man Page")
    options+=("MusicPlayer Animation Man Page")
    options+=("ASCII Splash Man Page")
    options+=("ASCII Splash Tmux Man Page")
    [ "${have_btop}" ] && options+=("Btop System Monitor Man Page")
    [ "${have_cbftp}" ] && options+=("Cbftp FTP Client Man Page")
    [ "${have_ddgr}" ] && options+=("Ddgr Web Search Man Page")
    [ "${have_diagon}" ] && options+=("Diagon Ascii Diagrams Man Page")
    [ "${have_gdu}" ] && options+=("Gdu Disk Usage Man Page")
    [ "${have_jrnl}" ] && options+=("Journal Command Help")
    [ "${have_lynx}" ] && options+=("Lynx Web Browser Man Page")
    [ "${have_mpcplus}" ] && options+=("Mpcplus Music Player Man Page")
    [ "${have_mutt}" ] && options+=("Mutt Mail Client Man Page")
    [ "${have_mutt}" ] && options+=("Mutt Full Manual")
    [ "${have_neomutt}" ] && options+=("NeoMutt Mail Client Man Page")
    [ "${have_neomutt}" ] && options+=("NeoMutt Full Manual")
    [ "${have_nethack}" ] && options+=("NetHack Game Man Page")
    [ "${have_nethack}" ] && options+=("NetHack Guide Book")
    [ "${have_newsboat}" ] && options+=("Newsboat RSS Feed Man Page")
    [ "${have_ranger}" ] && options+=("Ranger File Manager Man Page")
    [ "${have_ranger}" ] && options+=("Rifle File Opener Man Page")
    options+=("Show ASCII Art Man Page")
    options+=("Show Phase of Moon Man Page")
    options+=("Show Weather Report Man Page")
    options+=("Tmux Multiplexer Man Page")
    [ "${have_w3m}" ] && options+=("W3m Web Browser Man Page")
    [ "${have_retro}" ] && options+=("Retro Terminal Man Page")
    [ "${have_gnome}" ] && options+=("Gnome Terminal Man Page")
    [ "${have_tilix}" ] && options+=("Tilix Terminal Man Page")
    [ "${have_xfce4}" ] && options+=("Xfce4 Terminal Man Page")
    options+=("Done / Back" "Quit")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
        "Done"*,*|*,"Done"*|"done"*,*|*,"done"*|"Back"*,*|*,"Back"*|"back"*,*|*,"back"*)
          break 2
          ;;
        "Asciiville README",*|*,"Asciiville README")
          if [ "${have_w3m}" ]
          then
            w3m /usr/share/doc/asciiville/README.html
          else
            [ "${have_lynx}" ] && {
              lynx /usr/share/doc/asciiville/README.html
            }
          fi
          break
          ;;
        "Asciiville Man"*,*|*,"Asciiville Man"*)
          man asciiville
          break
          ;;
        "Asciiville Animation"*,*|*,"Asciiville Animation"*)
          man asciiart
          break
          ;;
        "Julia"*,*|*,"Julia"*)
          man asciijulia
          break
          ;;
        "MusicPlayer"*,*|*,"MusicPlayer"*)
          man asciimpplus
          break
          ;;
        "ASCIInema"*,*|*,"ASCIInema"*)
          man asciinema
          break
          ;;
        "ASCII Splash Tmux"*,*|*,"ASCII Splash Tmux"*)
          man asciisplash-tmux
          break
          ;;
        "ASCII Splash"*,*|*,"ASCII Splash"*)
          man asciisplash
          break
          ;;
        "Btop"*,*|*,"Btop"*)
          man btop
          break
          ;;
        "Cbftp"*,*|*,"Cbftp"*)
          man cbftp
          break
          ;;
        "Ddgr"*,*|*,"Ddgr"*)
          man ddgr
          break
          ;;
        "Diagon"*,*|*,"Diagon"*)
          man diagon
          break
          ;;
        "Gdu"*,*|*,"Gdu"*)
          man gdu
          break
          ;;
        "Journal"*,*|*,"Journal"*)
          jrnl --help | less
          break
          ;;
        "Lynx"*,*|*,"Lynx"*)
          man lynx
          break
          ;;
        "Mpcplus"*,*|*,"Mpcplus"*)
          man mpcplus
          break
          ;;
        "Mutt Mail"*,*|*,"Mutt Mail"*)
          man mutt
          break
          ;;
        "NeoMutt Mail"*,*|*,"NeoMutt Mail"*)
          man neomutt
          break
          ;;
        "Mutt Full"*,*|*,"Mutt Full"*)
          if [ "${have_w3m}" ]
          then
            w3m /usr/share/doc/mutt/html/index.html
          else
            [ "${have_lynx}" ] && {
              lynx /usr/share/doc/mutt/html/index.html
            }
          fi
          break
          ;;
        "NeoMutt Full"*,*|*,"NeoMutt Full"*)
          if [ "${have_w3m}" ]
          then
            w3m /usr/share/doc/neomutt/html/index.html
          else
            [ "${have_lynx}" ] && {
              lynx /usr/share/doc/neomutt/html/index.html
            }
          fi
          break
          ;;
        "NetHack Game"*,*|*,"NetHack Game"*)
          man nethack
          break
          ;;
        "NetHack Guide"*,*|*,"NetHack Guide"*)
          less /usr/games/share/doc/nethack/Guidebook.txt
          break
          ;;
        "News"*,*|*,"News"*)
          man newsboat
          break
          ;;
        "Ranger"*,*|*,"Ranger"*)
          man ranger
          break
          ;;
        "Rifle"*,*|*,"Rifle"*)
          man rifle
          break
          ;;
        "Show ASCII"*,*|*,"Show ASCII"*)
          man show_ascii_art
          break
          ;;
        "Show Phase"*,*|*,"Show Phase"*)
          man show_moon
          break
          ;;
        "Show Weather"*,*|*,"Show Weather"*)
          man show_weather
          break
          ;;
        "Tmux"*,*|*,"Tmux"*)
          man tmux
          break
          ;;
        "W3m"*,*|*,"W3m"*)
          man w3m
          break
          ;;
        "Retro"*,*|*,"Retro"*)
          man cool-retro-term
          break
          ;;
        "Gnome"*,*|*,"Gnome"*)
          man gnome-terminal
          break
          ;;
        "Tilix"*,*|*,"Tilix"*)
          man tilix
          break
          ;;
        "Xfce4"*,*|*,"Xfce4"*)
          man xfce4-terminal
          break
          ;;
        "Quit",*|*,"Quit"|"quit",*|*,"quit")
          remove_fullscreen
          printf "\nExiting Asciiville\n"
          exit 0
          ;;
        *,*|*,*)
          printf "\nCould not match '${REPLY}' with a menu entry."
          printf "\nPlease try again with an exact match.\n"
          [ "${use_figlet}" ] && {
            select_font Asciimatics
            show_figlet
          }
          ;;
      esac
      REPLY=
    done
  done
  clear
  printf "\n"
}


show_select_menu() {
  animation_menu=
  art_menu=
  journal_menu=
  main_menu=
  while true
  do
    [ "${COMMAND}" ] || COMMAND=btop
    use_btop="NO"
    use_cmatrix="NO"
    use_ftp="NO"
    use_gdu="NO"
    use_lynx="NO"
    use_mpp="NO"
    use_mutt="NO"
    use_nethack="NO"
    use_ninvaders="NO"
    use_newsboat="NO"
    use_ranger="NO"
    use_tetris="NO"
    use_w3m="NO"
    case "${COMMAND}" in
      btop)
        use_btop="YES"
        ;;
      cbftp|ncftp)
        use_ftp="YES"
        ;;
      cmatrix*)
        use_cmatrix="YES"
        ;;
      gdu*)
        use_gdu="YES"
        ;;
      lynx*)
        use_lynx="YES"
        ;;
      mpcplus)
        use_mpp="YES"
        ;;
      mutt|neomutt)
        use_mutt="YES"
        ;;
      nethack)
        use_nethack="YES"
        ;;
      newsboat)
        use_newsboat="YES"
        ;;
      ninvaders)
        use_ninvaders="YES"
        ;;
      ranger)
        use_ranger="YES"
        ;;
      tetris)
        use_tetris="YES"
        ;;
      w3m*)
        use_w3m="YES"
        ;;
    esac
    if [ "${GNOME}" ]
    then
      use_gnome="YES"
    else
      use_gnome="NO"
    fi
    if [ "${XFCE4}" ]
    then
      use_xfce4="YES"
    else
      use_xfce4="NO"
    fi
    if [ "${TILIX}" ]
    then
      use_tilix="YES"
    else
      use_tilix="NO"
    fi
    if [ "${RETRO}" ]
    then
      use_retro="YES"
    else
      use_retro="NO"
    fi
    if [ "${CURRENT}" ]
    then
      use_current="YES"
    else
      use_current="NO"
    fi
    show_comm=`echo ${COMMAND} | awk ' { print $1 } '`
    set_show_term
    [ "${use_figlet}" ] && {
      select_font AsciiAppTerm
      show_figlet
    }
    PS3="${BOLD}${PLEASE} choice (numeric or text, 'h' for help): ${NORMAL}"
    options=()
    [ "${have_btop}" ] && options+=("Btop System Monitor    [${use_btop}]")
    [ "${have_gdu}" ] && options+=("Disk Usage Analyzer    [${use_gdu}]")
    [ "${have_lynx}" ] && options+=("Lynx Web Browser       [${use_lynx}]")
    [ "${have_w3m}" ] && options+=("W3M Web Browser        [${use_w3m}]")
    [ "${have_cmatrix}" ] && options+=("Matrix Screen          [${use_cmatrix}]")
    [ "${have_mpcplus}" ] && options+=("Music Player Plus      [${use_mpp}]")
    if [ "${have_cbftp}" ]
    then
      options+=("Cbftp FTP Client       [${use_ftp}]")
    else
      [ "${have_ncftp}" ] && options+=("Ncftp FTP Client       [${use_ftp}]")
    fi
    if [ "${have_neomutt}" ]
    then
      options+=("NeoMutt Mail Client    [${use_mutt}]")
    else
      [ "${have_mutt}" ] && options+=("Mutt Mail Client       [${use_mutt}]")
    fi
    [ "${have_nethack}" ] && options+=("NetHack Dungeon Game   [${use_nethack}]")
    [ "${have_ninvaders}" ] && options+=("Ninvaders Video Game   [${use_ninvaders}]")
    [ "${have_tetris}" ] && options+=("Tetris Video Game      [${use_tetris}]")
    [ "${have_newsboat}" ] && options+=("Newsboat RSS Feeds     [${use_newsboat}]")
    [ "${have_ranger}" ] && options+=("Ranger File Manager    [${use_ranger}]")
    [ "${have_xfce4}" ] && options+=("XFCE4 Terminal         [${use_xfce4}]")
    [ "${have_gnome}" ] && options+=("Gnome Terminal         [${use_gnome}]")
    [ "${have_retro}" ] && options+=("Retro Terminal         [${use_retro}]")
    [ "${have_tilix}" ] && options+=("Tilix Terminal         [${use_tilix}]")
    options+=("Current Terminal       [${use_current}]")
    options+=("Run ${show_comm} in ${show_term}")
    [ "${have_jrnl}" ] && options+=("Journal Menu")
    [ "${have_showascii}" ] && options+=("Slideshow Menu")
    [ "${have_splash}" ] && options+=("Animations Menu")
    options+=("Done / Main Menu" "Quit")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
          "h",*|*,"h"|"H",*|*,"H"|"help",*|*,"help"|"Help",*|*,"Help")
              clear
              printf "\n"
              show_help_menu
              break
              ;;
          "Done"*,*|*,"Done"*|"Back",*|*,"Back"|"back",*|*,"back"|"Main"*,*|*,"Main"*|"main",*|*,"main")
              main_menu=1
              break 2
              ;;
          "Animations"*,*|*,"Animations"*)
              animation_menu=1
              break 2
              ;;
          "Journal"*,*|*,"Journal"*)
              journal_menu=1
              break 2
              ;;
          "Slideshow"*,*|*,"Slideshow"*)
              art_menu=1
              break 2
              ;;
          "Btop"*,*|*,"Btop"*)
              COMMAND=btop
              MTITLE="Btop++ System Monitor"
              break
              ;;
          "Disk"*,*|*,"Disk"*)
              COMMAND="gdu ${HOME}"
              MTITLE="Disk Usage Analyzer"
              break
              ;;
          "Lynx"*,*|*,"Lynx"*)
              COMMAND="lynx ${WEB_HOME}"
              MTITLE="Lynx Web Browser"
              export BROWSER=lynx
              break
              ;;
          "W3M"*,*|*,"W3M"*)
              COMMAND="w3m -v ${WEB_HOME}"
              MTITLE="W3M Web Browser"
              export BROWSER=w3m
              break
              ;;
          "Matrix"*,*|*,"Matrix"*)
              COMMAND="cmatrix -u 8"
              MTITLE="Matrix Screen"
              break
              ;;
          "Music"*,*|*,"Music"*)
              COMMAND=mpcplus
              MTITLE="Music Player Plus MPD Client"
              break
              ;;
          "Cbftp"*,*|*,"Cbftp"*)
              COMMAND=cbftp
              MTITLE="Cbftp FTP Client"
              break
              ;;
          "Ncftp"*,*|*,"Ncftp"*)
              COMMAND=ncftp
              MTITLE="Ncftp FTP Client"
              break
              ;;
          "Mutt"*,*|*,"Mutt"*)
              COMMAND=mutt
              MTITLE="Mutt Mail Client"
              break
              ;;
          "NeoMutt"*,*|*,"NeoMutt"*)
              COMMAND=neomutt
              MTITLE="NeoMutt Mail Client"
              break
              ;;
          "NetHack"*,*|*,"NetHack"*)
              COMMAND=nethack
              MTITLE="NetHack Dungeon Game"
              break
              ;;
          "News"*,*|*,"News"*)
              COMMAND=newsboat
              MTITLE="Newsboat RSS Feeds"
              break
              ;;
          "Ninvaders"*,*|*,"Ninvaders"*)
              COMMAND=ninvaders
              MTITLE="Ninvaders Video Game"
              break
              ;;
          "Ranger"*,*|*,"Ranger"*)
              COMMAND=ranger
              MTITLE="Ranger File Manager"
              break
              ;;
          "Tetris"*,*|*,"Tetris"*)
              COMMAND=tetris
              MTITLE="Tetris Video Game"
              break
              ;;
          "XFCE4"*,*|*,"XFCE4"*)
              XFCE4=1
              TILIX=
              GNOME=
              RETRO=
              CURRENT=
              break
              ;;
          "Gnome"*,*|*,"Gnome"*)
              GNOME=1
              XFCE4=
              TILIX=
              RETRO=
              CURRENT=
              break
              ;;
          "Retro"*,*|*,"Retro"*)
              RETRO=1
              GNOME=
              XFCE4=
              TILIX=
              CURRENT=
              break
              ;;
          "Tilix"*,*|*,"Tilix"*)
              TILIX=1
              RETRO=
              GNOME=
              XFCE4=
              CURRENT=
              break
              ;;
          "Current"*,*|*,"Current"*)
              CURRENT=1
              TILIX=
              RETRO=
              GNOME=
              XFCE4=
              break
              ;;
          "Run ${show_comm} in ${show_term}",*|*,"Run ${show_comm} in ${show_term}")
              make_it_so
              break
              ;;
          "Quit",*|*,"Quit"|"quit",*|*,"quit")
              remove_fullscreen
              printf "\nExiting Asciiville\n"
              exit 0
              ;;
          *,*|*,*)
              printf "\nCould not match '${REPLY}' with a menu entry."
              printf "\nPlease try again with an exact match.\n"
              [ "${use_figlet}" ] && {
                select_font AsciiAppTerm
                show_figlet
              }
              ;;
      esac
      REPLY=
    done
  done
  [ "${art_menu}" ] && {
    clear
    printf "\n\n\n"
    show_art_menu
  }
  [ "${journal_menu}" ] && {
    clear
    printf "\n\n\n"
    show_journal_menu
  }
  [ "${animation_menu}" ] && {
    clear
    printf "\n\n\n"
    show_animation_menu
  }
  [ "${main_menu}" ] && {
    clear
    printf "\n"
    init_vars
    show_main_menu
  }
}

show_art_menu() {
  animation_menu=
  journal_menu=
  main_menu=
  while true
  do
    if [ "${AUDIO}" ]
    then
      audiostat="YES"
      audarg="-P -S ${SONG}"
    else
      audiostat="NO"
      audarg=
    fi
    if [ "${cycle}" ]
    then
      cyclestat="YES"
    else
      cyclestat="NO"
    fi
    if [ "${RECORD}" ]
    then
      recordstat="YES"
    else
      recordstat="NO"
    fi
    if [ "${GNOME}" ]
    then
      use_gnome="YES"
    else
      use_gnome="NO"
    fi
    if [ "${XFCE4}" ]
    then
      use_xfce4="YES"
    else
      use_xfce4="NO"
    fi
    if [ "${TILIX}" ]
    then
      use_tilix="YES"
    else
      use_tilix="NO"
    fi
    if [ "${RETRO}" ]
    then
      use_retro="YES"
    else
      use_retro="NO"
    fi
    if [ "${CURRENT}" ]
    then
      use_current="YES"
    else
      use_current="NO"
    fi
    if [ "${TMUX}" ]
    then
      usetmux="YES"
    else
      usetmux="NO"
    fi
    if [ "${use_lolcat}" ]
    then
      lolarg="-l ${use_lolcat}"
    else
      lolarg=
    fi
    [ "${use_figlet}" ] && {
      select_font AsciiArt
      show_figlet
    }
    PS3="${BOLD}${PLEASE} choice (numeric or text, 'h' for help): ${NORMAL}"
    options=()
    for ascii_art_dir in ${ARTDIR}/*
    do
      [ "${ascii_art_dir}" == "${ARTDIR}/*" ] && continue
      [ -d "${ascii_art_dir}" ] || continue
      [ "${ascii_art_dir}" == "${ARTDIR}/pics" ] && continue
      ascii_dir_name=`basename "${ascii_art_dir}"`
      [ "${ascii_dir_name}" == "Art" ] && ascii_dir_name="Fine"
      [ "${ascii_dir_name}" == "Dragonflies" ] && ascii_dir_name="Dragonfly"
      options+=("${ascii_dir_name} Art Slideshow")
    done
    options+=("Select ASCII Art")
    options+=("Generate ASCII Art")
    options+=("Cycle Slideshow       [${cyclestat}]")
    [ "${have_lolcat}" ] && options+=("Use Lolcat Coloring   [${use_lol}]")
    options+=("Use Audio             [${audiostat}]")
    [ "${audiostat}" == "YES" ] && options+=("Select Song [${songname}]")
    [ "${have_xfce4}" ] && options+=("XFCE4 Terminal        [${use_xfce4}]")
    [ "${have_gnome}" ] && options+=("Gnome Terminal        [${use_gnome}]")
    [ "${have_retro}" ] && options+=("Retro Terminal        [${use_retro}]")
    [ "${have_tilix}" ] && options+=("Tilix Terminal        [${use_tilix}]")
    options+=("Current Terminal      [${use_current}]")
    options+=("Use Tmux              [${usetmux}]")
    [ "${have_asciinema}" ] && options+=("Record Tmux Session   [${recordstat}]")
    [ "${have_splash}" ] && options+=("Animations Menu")
    options+=("Main Menu" "Quit")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
          "h",*|*,"h"|"H",*|*,"H"|"help",*|*,"help"|"Help",*|*,"Help")
              clear
              printf "\n"
              show_help_menu
              break
              ;;
          "Animations"*,*|*,"Animations"*)
              animation_menu=1
              break 2
              ;;
          "Main"*,*|*,"Main"*|"Back",*|*,"Back"|"back",*|*,"back")
              main_menu=1
              break 2
              ;;
          "Doctorwhen"*,*|*,"Doctorwhen"*)
              play_slide_show Doctorwhen
              break
              ;;
          "Dragonfly"*,*|*,"Dragonfly"*)
              play_slide_show Dragonflies
              break
              ;;
          "Space"*,*|*,"Space"*)
              play_slide_show Space
              break
              ;;
          "Fine"*,*|*,"Fine"*)
              play_slide_show Art
              break
              ;;
          "Fractal"*,*|*,"Fractal"*)
              play_slide_show Fractals
              break
              ;;
          "Lyapunov"*,*|*,"Lyapunov"*)
              play_slide_show Lyap
              break
              ;;
          "Mixed"*,*|*,"Mixed"*)
              play_slide_show Mixed
              break
              ;;
          "Owls"*,*|*,"Owls"*)
              play_slide_show Owls
              break
              ;;
          "Waterfalls"*,*|*,"Waterfalls"*)
              play_slide_show Waterfalls
              break
              ;;
          *"Art Slideshow",*|*,*"Art Slideshow")
              gallery_name=`echo ${opt} | sed -e "s/ Art Slideshow//"`
              play_slide_show "${gallery_name}"
              break
              ;;
          "XFCE4"*,*|*,"XFCE4"*)
              XFCE4=1
              TILIX=
              GNOME=
              RETRO=
              CURRENT=
              break
              ;;
          "Gnome"*,*|*,"Gnome"*)
              GNOME=1
              XFCE4=
              TILIX=
              RETRO=
              CURRENT=
              break
              ;;
          "Retro"*,*|*,"Retro"*)
              RETRO=1
              GNOME=
              XFCE4=
              TILIX=
              CURRENT=
              break
              ;;
          "Tilix"*,*|*,"Tilix"*)
              TILIX=1
              RETRO=
              GNOME=
              XFCE4=
              CURRENT=
              break
              ;;
          "Current"*,*|*,"Current"*)
              CURRENT=1
              TILIX=
              RETRO=
              GNOME=
              XFCE4=
              break
              ;;
          "Use Audio"*,*|*,"Use Audio"*)
              if [ "${AUDIO}" ]
              then
                AUDIO=
              else
                AUDIO=1
              fi
              if [ "${AUDIO}" ]
              then
                if [ "${custom_song}" ]
                then
                  ASCSPLASH="${ASCSPLASH} -a -s ${SONG}"
                  ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -a -s ${SONG}"
                else
                  ASCSPLASH="${ASCSPLASH} -a"
                  ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -a"
                fi
                audarg="-P -S ${SONG}"
              else
                ASCSPLASH=`echo ${ASCSPLASH} | sed -e "s# -a##" -e "s# -s ${SONG}##"`
                ASCSPLASH_TMUX=`echo ${ASCSPLASH_TMUX} | sed -e "s# -a##" -e "s# -s ${SONG}##"`
                audarg=
              fi
              break
              ;;
          "Cycle"*,*|*,"Cycle"*)
              if [ "${cycle}" ]
              then
                cycle=
              else
                cycle=1
              fi
              break
              ;;
          "Use Lolcat"*,*|*,"Use Lolcat"*)
              if [ "${use_lolcat}" == "2" ]
              then
                use_lolcat=
                use_lol="NO"
                lolarg=
              else
                if [ "${use_lolcat}" ]
                then
                  use_lolcat=2
                  use_lol="YES+"
                  lolarg="-l 2"
                  LOLCAT="${LOLCAT_ANIM}"
                else
                  use_lolcat=1
                  use_lol="YES"
                  lolarg="-l 1"
                  LOLCAT="${LOLCAT_NORM}"
                fi
              fi
              break
              ;;
          "Record"*,*|*,"Record"*)
              if [ "${RECORD}" ]
              then
                RECORD=
              else
                RECORD=1
                TMUX=1
              fi
              if [ "${RECORD}" ]
              then
                ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -R"
              else
                ASCSPLASH_TMUX=`echo ${ASCSPLASH_TMUX} | sed -e "s/ -R//"`
              fi
              break
              ;;
          "Use Tmux"*,*|*,"Use Tmux"*)
              if [ "${TMUX}" ]
              then
                TMUX=
                RECORD=
              else
                TMUX=1
              fi
              break
              ;;
          "Select ASCII"*,*|*,"Select ASCII"*)
              select_ascii
              break
              ;;
          "Generate"*,*|*,"Generate"*)
              generate_art
              break
              ;;
          "Select Song"*,*|*,"Select Song"*)
              select_song
              break
              ;;
          "Quit",*|*,"Quit"|"quit",*|*,"quit")
              remove_fullscreen
              printf "\nExiting Asciiville\n"
              exit 0
              ;;
          *,*|*,*)
              printf "\nCould not match '${REPLY}' with a menu entry."
              printf "\nPlease try again with an exact match.\n"
              [ "${use_figlet}" ] && {
                select_font AsciiArt
                show_figlet
              }
              ;;
      esac
      REPLY=
    done
  done
  [ "${animation_menu}" ] && {
    clear
    printf "\n\n\n"
    show_animation_menu
  }
  [ "${journal_menu}" ] && {
    clear
    printf "\n\n\n"
    show_journal_menu
  }
  [ "${main_menu}" ] && {
    clear
    printf "\n"
    init_vars
    show_main_menu
  }
}

show_animation_menu() {
  art_menu=
  journal_menu=
  main_menu=
  MTITLE="ASCIImatics Animation"
  while true
  do
    DO_SPLASH=1
    if [ "${AUDIO}" ]
    then
      audiostat="YES"
      audarg="-P -S ${SONG}"
    else
      audiostat="NO"
      audarg=
    fi
    if [ "${GNOME}" ]
    then
      use_gnome="YES"
    else
      use_gnome="NO"
    fi
    if [ "${XFCE4}" ]
    then
      use_xfce4="YES"
    else
      use_xfce4="NO"
    fi
    if [ "${TILIX}" ]
    then
      use_tilix="YES"
    else
      use_tilix="NO"
    fi
    if [ "${RETRO}" ]
    then
      use_retro="YES"
    else
      use_retro="NO"
    fi
    if [ "${CURRENT}" ]
    then
      use_current="YES"
    else
      use_current="NO"
    fi
    if [ "${RECORD}" ]
    then
      recordstat="YES"
    else
      recordstat="NO"
    fi
    if [ "${TMUX}" ]
    then
      usetmux="YES"
    else
      usetmux="NO"
    fi
    if [ "${FULLSCREEN}" ]
    then
      fullstat="YES"
    else
      fullstat="NO"
    fi
    skip_it_so=
    [ "${use_figlet}" ] && {
      select_font Asciimatics
      show_figlet
    }
    PS3="${BOLD}${PLEASE} choice (numeric or text, 'h' for help): ${NORMAL}"
    options=()
    [ "${have_asciiart}" ] && options+=("Asciiville Animation")
    [ "${have_asciijulia}" ] && options+=("Julia Set Animation")
    [ "${have_asciimpplus}" ] && options+=("MPPlus Animation")
    [ "${have_asciiplasma}" ] && options+=("Plasma Animation")
    [ "${have_bb}" ] && options+=("AAlib BB Demo")
    [ "${have_xfce4}" ] && options+=("XFCE4 Terminal    [${use_xfce4}]")
    [ "${have_gnome}" ] && options+=("Gnome Terminal    [${use_gnome}]")
    [ "${have_retro}" ] && options+=("Retro Terminal    [${use_retro}]")
    [ "${have_tilix}" ] && options+=("Tilix Terminal    [${use_tilix}]")
    options+=("Current Terminal  [${use_current}]")
    options+=("Fullscreen Window [${fullstat}]")
    [ "${have_lolcat}" ] && options+=("Use Lolcat Coloring   [${use_lol}]")
    options+=("Use Tmux              [${usetmux}]")
    [ "${have_asciinema}" ] && options+=("Record Tmux Session   [${recordstat}]")
    options+=("Use Audio             [${audiostat}]")
    [ "${audiostat}" == "YES" ] && options+=("Select Song [${songname}]")
    [ "${have_jrnl}" ] && options+=("Journal Menu")
    [ "${have_mpplus}" ] && options+=("MusicPlayerPlus Menu")
    [ "${have_roon}" ] && options+=("RoonCommandLine Menu")
    [ "${have_showascii}" ] && options+=("Slideshow Menu")
    options+=("Main Menu" "Quit")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
          "h",*|*,"h"|"H",*|*,"H"|"help",*|*,"help"|"Help",*|*,"Help")
              clear
              printf "\n"
              show_help_menu
              skip_it_so=1
              break
              ;;
          "Main Menu",*|*,"Main Menu"|"Back",*|*,"Back"|"back",*|*,"back")
              main_menu=1
              break 2
              ;;
          "Asciiville"*,*|*,"Asciiville"*)
              ASCSPLASH="${ASCSPLASH} -i"
              ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l art"
              break
              ;;
          "Julia"*,*|*,"Julia"*)
              ASCSPLASH="${ASCSPLASH} -j"
              ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l julia"
              break
              ;;
          "MPPlus"*,*|*,"MPPlus"*)
              ASCSPLASH="${ASCSPLASH} -m"
              ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l mpplus"
              break
              ;;
          "Plasma"*,*|*,"Plasma"*)
              ASCSPLASH="${ASCSPLASH} -p"
              ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l plasma"
              break
              ;;
          "AAlib"*,*|*,"AAlib"*)
              SAVED_DISPLAY="${DISPLAY}"
              export DISPLAY=""
              if [ "${AUDIO}" ]
              then
                if [ "${custom_song}" ]
                then
                  bb-tmux -a -s "${SONG}"
                else
                  bb-tmux -a
                fi
              else
                bb-tmux
              fi
              skip_it_so=1
              export DISPLAY="${SAVED_DISPLAY}"
              break
              ;;
          "Journal"*,*|*,"Journal"*)
              journal_menu=1
              break 2
              ;;
          "Slideshow"*,*|*,"Slideshow"*)
              art_menu=1
              break 2
              ;;
          "XFCE4"*,*|*,"XFCE4"*)
              XFCE4=1
              TILIX=
              GNOME=
              RETRO=
              CURRENT=
              skip_it_so=1
              break
              ;;
          "Gnome"*,*|*,"Gnome"*)
              GNOME=1
              XFCE4=
              TILIX=
              RETRO=
              CURRENT=
              skip_it_so=1
              break
              ;;
          "Retro"*,*|*,"Retro"*)
              RETRO=1
              GNOME=
              XFCE4=
              TILIX=
              CURRENT=
              skip_it_so=1
              break
              ;;
          "Tilix"*,*|*,"Tilix"*)
              TILIX=1
              RETRO=
              GNOME=
              XFCE4=
              CURRENT=
              skip_it_so=1
              break
              ;;
          "Current"*,*|*,"Current"*)
              CURRENT=1
              TILIX=
              RETRO=
              GNOME=
              XFCE4=
              skip_it_so=1
              break
              ;;
          "Use Lolcat"*,*|*,"Use Lolcat"*)
              if [ "${use_lolcat}" == "2" ]
              then
                use_lolcat=
                use_lol="NO"
                lolarg=
              else
                if [ "${use_lolcat}" ]
                then
                  use_lolcat=2
                  use_lol="YES+"
                  lolarg="-l 2"
                  LOLCAT="${LOLCAT_ANIM}"
                else
                  use_lolcat=1
                  use_lol="YES"
                  lolarg="-l 1"
                  LOLCAT="${LOLCAT_NORM}"
                fi
              fi
              skip_it_so=1
              break
              ;;
          "Use Audio"*,*|*,"Use Audio"*)
              if [ "${AUDIO}" ]
              then
                AUDIO=
              else
                AUDIO=1
              fi
              if [ "${AUDIO}" ]
              then
                if [ "${custom_song}" ]
                then
                  ASCSPLASH="${ASCSPLASH} -a -s ${SONG}"
                  ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -a -s ${SONG}"
                else
                  ASCSPLASH="${ASCSPLASH} -a"
                  ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -a"
                fi
                audarg="-P -S ${SONG}"
              else
                ASCSPLASH=`echo ${ASCSPLASH} | sed -e "s# -a##" -e "s# -s ${SONG}##"`
                ASCSPLASH_TMUX=`echo ${ASCSPLASH_TMUX} | sed -e "s# -a##" -e "s# -s ${SONG}##"`
                audarg=
              fi
              skip_it_so=1
              break
              ;;
          "Record"*,*|*,"Record"*)
              if [ "${RECORD}" ]
              then
                RECORD=
              else
                RECORD=1
                TMUX=1
              fi
              if [ "${RECORD}" ]
              then
                ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -R"
              else
                ASCSPLASH_TMUX=`echo ${ASCSPLASH_TMUX} | sed -e "s/ -R//"`
              fi
              skip_it_so=1
              break
              ;;
          "Use Tmux"*,*|*,"Use Tmux"*)
              if [ "${TMUX}" ]
              then
                TMUX=
                RECORD=
              else
                TMUX=1
              fi
              skip_it_so=1
              break
              ;;
          "Fullscreen"*,*|*,"Fullscreen"*)
              if [ "${FULLSCREEN}" ]
              then
                FULLSCREEN=
              else
                FULLSCREEN=1
              fi
              if [ "${FULLSCREEN}" ]
              then
                add_fullscreen
              else
                remove_fullscreen
              fi
              skip_it_so=1
              break
              ;;
          "MusicPlayerPlus"*,*|*,"MusicPlayerPlus"*)
              [ "${use_figlet}" ] && {
                select_font MusicPlayer
                show_figlet
              }
              mpplus -i
              clear
              skip_it_so=1
              break
              ;;
          "RoonCommandLine"*,*|*,"RoonCommandLine"*)
              [ "${use_figlet}" ] && {
                select_font Roon
                show_figlet
              }
              roon
              clear
              skip_it_so=1
              break
              ;;
          "Select"*,*|*,"Select"*)
              select_song
              skip_it_so=1
              break
              ;;
          "Quit",*|*,"Quit"|"quit",*|*,"quit")
              remove_fullscreen
              printf "\nExiting Asciiville\n"
              exit 0
              ;;
          *,*|*,*)
              printf "\nCould not match '${REPLY}' with a menu entry."
              printf "\nPlease try again with an exact match.\n"
              [ "${use_figlet}" ] && {
                select_font Asciimatics
                show_figlet
              }
              ;;
      esac
      REPLY=
    done
    [ "${skip_it_so}" ] || {
      make_it_so
      init_vars
    }
  done
  [ "${art_menu}" ] && {
    clear
    printf "\n\n\n"
    show_art_menu
  }
  [ "${journal_menu}" ] && {
    clear
    printf "\n\n\n"
    show_journal_menu
  }
  [ "${main_menu}" ] && {
    clear
    printf "\n"
    init_vars
    show_main_menu
  }
}

show_journal_menu() {
  art_menu=
  animation_menu=
  main_menu=

  while true
  do
    [ "${use_figlet}" ] && {
      select_font Journal
      show_figlet
    }
    PS3="${BOLD}${PLEASE} choice (numeric or text, 'h' for help): ${NORMAL}"
    options=()
    options+=("New Journal Entry")
    options+=("All Journal Entries")
    options+=("Today's Journal Entries")
    options+=("Yesterday's Journal Entries")
    options+=("This Week's Journal Entries")
    options+=("This Month's Journal Entries")
    options+=("This Year's Journal Entries")
    options+=("Last 10 Journal Entries")
    [ ${numjrnls} -gt 1 ] && {
      options+=("Switch Journal        [${journal}]")
    }
    options+=("Switch Display Format [${style}]")
    encrypted=
    jloc=`jrnl --list | grep '*' | grep ${journal} | awk ' { print $4 } '`
    first=${jloc:0:1}
    uses_tilda=
    [ "${first}" == "~" ] && {
      uses_tilda=1
      jloc=`echo ${jloc} | sed -e "s/~//"`
    }
    if [ "${uses_tilda}" ]
    then
      file ${HOME}${jloc} | grep -i terminator > /dev/null && encrypted=1 
    else
      file ${jloc} | grep -i terminator > /dev/null && encrypted=1 
    fi
    if [ "${encrypted}" ]
    then
      options+=("Decrypt Journal")
    else
      options+=("Encrypt Journal")
    fi
    [ "${have_splash}" ] && options+=("Animations Menu")
    [ "${have_showascii}" ] && options+=("Ascii Art")
    options+=("Main Menu" "Quit")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
          "h",*|*,"h"|"H",*|*,"H"|"help",*|*,"help"|"Help",*|*,"Help")
              clear
              printf "\n"
              show_help_menu
              break
              ;;
          "New"*,*|*,"New"*)
              # To run jrnl in a terminal window:
              # tilix -t floating-jrnl -e jrnl --config-override editor ""
              jrnl ${journal}
              printf "\n\nThe new journal entry:\n\n"
              jrnl ${journal} ${formatarg} -n 1
              [ "${journal_pager}" == "${PAGER}" ] && {
                read -p "Press Enter to continue" answer
              }
              break
              ;;
          "Last"*,*|*,"Last"*)
              jrnl ${journal} ${formatarg} -n 10 | ${journal_pager} 2> /dev/null
              [ "${journal_pager}" == "${PAGER}" ] && {
                read -p "Press Enter to continue" answer
              }
              break
              ;;
          "Yesterday"*,*|*,"Yesterday"*)
              jrnl ${journal} ${formatarg} -on yesterday | ${journal_pager} 2> /dev/null
              [ "${journal_pager}" == "${PAGER}" ] && {
                read -p "Press Enter to continue" answer
              }
              break
              ;;
          "Today"*,*|*,"Today"*)
              jrnl ${journal} ${formatarg} -on today | ${journal_pager} 2> /dev/null
              [ "${journal_pager}" == "${PAGER}" ] && {
                read -p "Press Enter to continue" answer
              }
              break
              ;;
          "This Week"*,*|*,"This Week"*)
              day=`date +%A`
              jrnl ${journal} ${formatarg} -from "last ${day}" -to today | ${journal_pager} 2> /dev/null
              [ "${journal_pager}" == "${PAGER}" ] && {
                read -p "Press Enter to continue" answer
              }
              break
              ;;
          "This Month"*,*|*,"This Month"*)
              month=`date +%B`
              year=`date +%Y`
              jrnl ${journal} ${formatarg} -on "${month} ${year}" | ${journal_pager} 2> /dev/null
              [ "${journal_pager}" == "${PAGER}" ] && {
                read -p "Press Enter to continue" answer
              }
              break
              ;;
          "This Year"*,*|*,"This Year"*)
              year=`date +%Y`
              jrnl ${journal} ${formatarg} -on "${year}" | ${journal_pager} 2> /dev/null
              [ "${journal_pager}" == "${PAGER}" ] && {
                read -p "Press Enter to continue" answer
              }
              break
              ;;
          "Last Year"*,*|*,"Last Year"*)
              year=`date +%Y`
              year=$((year - 1))
              jrnl ${journal} ${formatarg} -on "${year}" | ${journal_pager} 2> /dev/null
              [ "${journal_pager}" == "${PAGER}" ] && {
                read -p "Press Enter to continue" answer
              }
              break
              ;;
          "All"*,*|*,"All"*)
              jrnl ${journal} ${formatarg} -to today | ${journal_pager} 2> /dev/null
              [ "${journal_pager}" == "${PAGER}" ] && {
                read -p "Press Enter to continue" answer
              }
              break
              ;;
          "Switch Journal"*,*|*,"Switch Journal"*)
              for (( j=0; j<${numjrnls}; j++ ));
              do
                [ "${journal}" == "${journals[$j]}" ] && {
                  k=$((j + 1))
                  if [ ${numjrnls} -gt $k ]
                  then
                    journal="${journals[$k]}"
                  else
                    journal="${journals[0]}"
                  fi
                  break
                }
              done
              break
              ;;
          "Switch Display"*,*|*,"Switch Display"*)
              if [ "${style}" == "pretty" ]
              then
                style="fancy"
                journal_pager=${PAGER}
              else
                if [ "${style}" == "fancy" ]
                then
                  style="markdown"
                  journal_pager="w3m -T text/markdown -o confirm_qq=false"
                else
                  style="pretty"
                  journal_pager=${PAGER}
                fi
              fi
              formatarg="--format ${style}"
              break
              ;;
          "Decrypt"*,*|*,"Decrypt"*)
              jrnl ${journal} --decrypt
              break
              ;;
          "Encrypt"*,*|*,"Encrypt"*)
              jrnl ${journal} --encrypt
              break
              ;;
          "Animation"*,*|*,"Animation"*)
              animation_menu=1
              break 2
              ;;
          "Ascii"*,*|*,"Ascii"*)
              art_menu=1
              break 2
              ;;
          "Main Menu",*|*,"Main Menu"|"Back",*|*,"Back"|"back",*|*,"back")
              main_menu=1
              break 2
              ;;
          "Quit",*|*,"Quit"|"quit",*|*,"quit")
              remove_fullscreen
              printf "\nExiting Asciiville\n"
              exit 0
              ;;
          *,*|*,*)
              printf "\nCould not match '${REPLY}' with a menu entry."
              printf "\nPlease try again with an exact match.\n"
              [ "${use_figlet}" ] && {
                select_font Journal
                show_figlet
              }
              ;;
      esac
      REPLY=
    done
  done
  [ "${animation_menu}" ] && {
    clear
    printf "\n\n\n"
    show_animation_menu
  }
  [ "${art_menu}" ] && {
    clear
    printf "\n\n\n"
    show_art_menu
  }
  [ "${main_menu}" ] && {
    clear
    printf "\n"
    init_vars
    show_main_menu
  }
}

show_main_menu() {
  art_menu=
  animation_menu=
  journal_menu=
  select_menu=
  while true
  do
    if [ "${AUDIO}" ]
    then
      audiostat="YES"
      audarg="-P -S ${SONG}"
    else
      audiostat="NO"
      audarg=
    fi
    if [ "${FULLSCREEN}" ]
    then
      fullstat="YES"
    else
      fullstat="NO"
    fi
    if [ "${RECORD}" ]
    then
      recordstat="YES"
    else
      recordstat="NO"
    fi
    if [ "${TMUX}" ]
    then
      usetmux="YES"
    else
      usetmux="NO"
    fi
    if [ "${BROWSER}" == "w3m" ]
    then
      default_browser="W3M"
    else
      if [ "${BROWSER}" == "lynx" ]
      then
        default_browser="Lynx"
      else
        if [ "${BROWSER}" ]
        then
          default_browser="${BROWSER}"
        else
          default_browser="None"
        fi
      fi
    fi
    [ "${COMMAND}" ] || COMMAND=btop
    show_comm=`echo ${COMMAND} | awk ' { print $1 } '`
    set_show_term
    skip_it_so=
    [ "${use_figlet}" ] && {
      select_font Asciiville
      show_figlet
    }
    PS3="${BOLD}${PLEASE} choice (numeric or text, 'h' for help): ${NORMAL}"
    options=()
    [ "${have_showascii}" ] && options+=("Ascii Art")
    [ "${have_splash}" ] && options+=("ASCIImatics Animations")
    options+=("Run ${show_comm} in ${show_term}")
    options+=("Select App and Terminal")
    [ "${have_bb}" ] && {
      [ "$DISPLAY" = "" ] || options+=("AAlib Demo (X11 mode)")
    }
    [ "${have_bb}" ] && options+=("AAlib Demo (Curses mode)")
    [ "${have_mapscii}" ] && options+=("Mapscii World Map")
    [ "${have_curl}" ] && options+=("Phase of the Moon")
    [ "${have_ddgr}" ] && options+=("Search the Web")
    [ "${have_speed}" ] && options+=("Speed Test")
    [ "${have_rainbow}" ] && options+=("Twitter Client")
    [ "${have_curl}" ] && options+=("Weather Report")
    options+=("Kill Tmux Sessions")
    [ "${have_lolcat}" ] && options+=("Use Lolcat Coloring        [${use_lol}]")
    options+=("Use Tmux                   [${usetmux}]")
    [ "${have_asciinema}" ] && options+=("Record Tmux Session        [${recordstat}]")
    options+=("Fullscreen Window          [${fullstat}]")
    options+=("Default Web Browser        [${default_browser}]")
    options+=("Use Audio                  [${audiostat}]")
    options+=("Generate ASCII Art")
    [ "${have_neo}" ] && options+=("Show System Info")
    [ "${have_got}" ] && options+=("Text Translation Tool")
    [ "${have_jrnl}" ] && options+=("Journal Menu")
    [ "${have_mpplus}" ] && options+=("MusicPlayerPlus Menu")
    [ "${have_roon}" ] && options+=("RoonCommandLine Menu")
    options+=("Quit")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
          "h",*|*,"h"|"H",*|*,"H"|"help",*|*,"help"|"Help",*|*,"Help")
              clear
              printf "\n"
              show_help_menu
              skip_it_so=1
              break
              ;;
          "Run ${show_comm} in ${show_term}",*|*,"Run ${show_comm} in ${show_term}")
              break
              ;;
          "Default"*,*|*,"Default"*)
              if [ "${default_browser}" == "W3M" ]
              then
                if [ "${have_lynx}" ]
                then
                  export BROWSER=lynx
                  default_browser="Lynx"
                else
                  if [ "${SAVED_BROWSER}" ]
                  then
                    export BROWSER="${SAVED_BROWSER}"
                    default_browser="${BROWSER}"
                  else
                    export BROWSER=
                    default_browser="None"
                  fi
                fi
              else
                if [ "${default_browser}" == "Lynx" ]
                then
                  if [ "${SAVED_BROWSER}" ]
                  then
                    export BROWSER="${SAVED_BROWSER}"
                    default_browser="${BROWSER}"
                  else
                    export BROWSER=
                    default_browser="None"
                  fi
                else
                  if [ "${default_browser}" == "None" ]
                  then
                    if [ "${have_w3m}" ]
                    then
                      export BROWSER=w3m
                      default_browser="W3M"
                    else
                      if [ "${have_lynx}" ]
                      then
                        export BROWSER=lynx
                        default_browser="Lynx"
                      else
                        if [ "${SAVED_BROWSER}" ]
                        then
                          export BROWSER="${SAVED_BROWSER}"
                          default_browser="${BROWSER}"
                        else
                          export BROWSER=
                          default_browser="None"
                        fi
                      fi
                    fi
                  else
                    if [ "${BROWSER}" ]
                    then
                      export BROWSER=
                      default_browser="None"
                    else
                      if [ "${have_w3m}" ]
                      then
                        export BROWSER=w3m
                        default_browser="W3M"
                      else
                        if [ "${have_lynx}" ]
                        then
                          export BROWSER=lynx
                          default_browser="Lynx"
                        else
                          if [ "${SAVED_BROWSER}" ]
                          then
                            export BROWSER="${SAVED_BROWSER}"
                            default_browser="${BROWSER}"
                          else
                            export BROWSER=
                            default_browser="None"
                          fi
                        fi
                      fi
                    fi
                  fi
                fi
              fi
              skip_it_so=1
              break
              ;;
          "Use Lolcat"*,*|*,"Use Lolcat"*)
              if [ "${use_lolcat}" == "2" ]
              then
                use_lolcat=
                use_lol="NO"
              else
                if [ "${use_lolcat}" ]
                then
                  use_lolcat=2
                  use_lol="YES+"
                  LOLCAT="${LOLCAT_ANIM}"
                else
                  use_lolcat=1
                  use_lol="YES"
                  LOLCAT="${LOLCAT_NORM}"
                fi
              fi
              skip_it_so=1
              break
              ;;
          "AAlib Demo (Curses mode)",*|*,"AAlib Demo (Curses mode)")
              SAVED_DISPLAY="${DISPLAY}"
              export DISPLAY=""
              if [ "${AUDIO}" ]
              then
                bb-tmux -a
              else
                bb-tmux
              fi
              skip_it_so=1
              export DISPLAY="${SAVED_DISPLAY}"
              break
              ;;
          "AAlib Demo (X11 mode)",*|*,"AAlib Demo (X11 mode)")
              if [ "${AUDIO}" ]
              then
                bb-tmux -a
              else
                bb-tmux
              fi
              skip_it_so=1
              break
              ;;
          "Phase"*,*|*,"Phase"*)
              curl wttr.in/Moon?AF 2> /dev/null
              read -p "Press Enter to continue" answer
              skip_it_so=1
              break
              ;;
          "Weather"*,*|*,"Weather"*)
              curl v2.wttr.in?AF 2> /dev/null
              read -p "Press Enter to continue" answer
              skip_it_so=1
              break
              ;;
          "Speed"*,*|*,"Speed"*)
              speedtest-cli
              read -p "Press Enter to continue" answer
              skip_it_so=1
              break
              ;;
          "Twitter"*,*|*,"Twitter"*)
              # For 24-bit color image support, run with the '-p24' option
              # rainbowstream -p24
              rainbowstream
              skip_it_so=1
              break
              ;;
          "Search"*,*|*,"Search"*)
              ddgr
              skip_it_so=1
              break
              ;;
          "Mapscii"*,*|*,"Mapscii"*)
              mapscii
              skip_it_so=1
              break
              ;;
          "MusicPlayerPlus"*,*|*,"MusicPlayerPlus"*)
              [ "${use_figlet}" ] && {
                select_font MusicPlayer
                show_figlet
              }
              mpplus -i
              clear
              skip_it_so=1
              break
              ;;
          "RoonCommandLine"*,*|*,"RoonCommandLine"*)
              [ "${use_figlet}" ] && {
                select_font Roon
                show_figlet
              }
              roon
              clear
              skip_it_so=1
              break
              ;;
          "Show System"*,*|*,"Show System"*)
              if [ "${use_lolcat}" ]
              then
                neofetch | ${LOLCAT}
              else
                neofetch
              fi
              read -p "Press Enter to continue" answer
              skip_it_so=1
              break
              ;;
          "ASCIImatics"*,*|*,"ASCIImatics"*)
              animation_menu=1
              break 2
              ;;
          "Ascii Art"*,*|*,"Ascii Art"*)
              art_menu=1
              break 2
              ;;
          "Journal"*,*|*,"Journal"*)
              journal_menu=1
              break 2
              ;;
          "Select App"*,*|*,"Select App"*)
              select_menu=1
              break 2
              ;;
          "Generate"*,*|*,"Generate"*)
              generate_art
              skip_it_so=1
              break
              ;;
          "Text"*,*|*,"Text"*)
              got
              skip_it_so=1
              break
              ;;
          "Kill"*,*|*,"Kill"*)
              kill_tmux_sessions
              skip_it_so=1
              break
              ;;
          "Use Tmux"*,*|*,"Use Tmux"*)
              if [ "${TMUX}" ]
              then
                TMUX=
                RECORD=
              else
                TMUX=1
              fi
              skip_it_so=1
              break
              ;;
          "Record"*,*|*,"Record"*)
              if [ "${RECORD}" ]
              then
                RECORD=
              else
                RECORD=1
                TMUX=1
              fi
              if [ "${RECORD}" ]
              then
                COMMAND_TMUX="${COMMAND_TMUX} -r"
              else
                COMMAND_TMUX=`echo ${COMMAND_TMUX} | sed -e "s/ -r//"`
              fi
              skip_it_so=1
              break
              ;;
          "Use Audio"*,*|*,"Use Audio"*)
              if [ "${AUDIO}" ]
              then
                AUDIO=
              else
                AUDIO=1
              fi
              if [ "${AUDIO}" ]
              then
                if [ "${custom_song}" ]
                then
                  ASCSPLASH="${ASCSPLASH} -a -s ${SONG}"
                  ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -a -s ${SONG}"
                else
                  ASCSPLASH="${ASCSPLASH} -a"
                  ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -a"
                fi
                audarg="-P -S ${SONG}"
              else
                ASCSPLASH=`echo ${ASCSPLASH} | sed -e "s# -a##" -e "s# -s ${SONG}##"`
                ASCSPLASH_TMUX=`echo ${ASCSPLASH_TMUX} | sed -e "s# -a##" -e "s# -s ${SONG}##"`
                audarg=
              fi
              skip_it_so=1
              break
              ;;
          "Fullscreen"*,*|*,"Fullscreen"*)
              if [ "${FULLSCREEN}" ]
              then
                FULLSCREEN=
              else
                FULLSCREEN=1
              fi
              if [ "${FULLSCREEN}" ]
              then
                add_fullscreen
              else
                remove_fullscreen
              fi
              skip_it_so=1
              break
              ;;
          "Quit",*|*,"Quit"|"quit",*|*,"quit")
              remove_fullscreen
              printf "\nExiting Asciiville\n"
              exit 0
              ;;
          *,*|*,*)
              printf "\nCould not match '${REPLY}' with a menu entry."
              printf "\nPlease try again with an exact match.\n"
              [ "${use_figlet}" ] && {
                select_font Asciiville
                show_figlet
              }
              ;;
      esac
      REPLY=
    done
    [ "${skip_it_so}" ] || {
      make_it_so
      init_vars
    }
  done
  [ "${art_menu}" ] && {
    clear
    printf "\n\n\n"
    show_art_menu
  }
  [ "${animation_menu}" ] && {
    clear
    printf "\n\n\n"
    show_animation_menu
  }
  [ "${journal_menu}" ] && {
    clear
    printf "\n\n\n"
    show_journal_menu
  }
  [ "${select_menu}" ] && {
    clear
    printf "\n\n\n"
    show_select_menu
  }
}

choose_folder() {
  TMP="$(mktemp)"
  ranger --choosedir="${TMP}" "${HOME}" 1>&2
  cat ${TMP}
  rm  -f ${TMP}
}

choose_ascii() {
  TMP="$(mktemp)"
  ranger --choosefile="${TMP}" "${ARTDIR}" 1>&2
  cat ${TMP}
  rm  -f ${TMP}
}

choose_song() {
  TMP="$(mktemp)"
  ranger --choosefile="${TMP}" "${HOME}/Music" 1>&2
  cat ${TMP}
  rm  -f ${TMP}
}

select_input_dir() {
  if [ "${have_ranger}" ]
  then
    echo ""
    echo "Choosing a directory in Ranger is done by visiting a directory"
    echo ""
    echo "Use the arrow keys to browse folders"
    echo "Press 'Enter' to enter a directory"
    echo "Create a new directory with ':mkdir <dirname>'"
    echo ""
    echo "While in the directory you wish to select, quit Ranger with 'q'"
    echo ""
    while true
    do
      read -p "Select image input directory now? (y/n) " answer
      case ${answer} in
        [Yy]* )
          image_dir="$(choose_folder)"
          echo ""
          echo "Selected image input directory = ${image_dir}"
          echo ""
          break
          ;;
        [Nn]* )
          printf "\nSkipping image input directory selection.\n"
          image_dir=
          break
          ;;
        * ) echo "Please answer 'y' to select directory, or 'n' to skip."
          ;;
      esac
    done
  else
    image_dir=$(dialog --stdout \
                          --title "Please select an image input folder" \
                          --fselect ${HOME}/Pictures/ 14 48)
  fi
}

select_output_dir() {
  if [ "${have_ranger}" ]
  then
    echo ""
    echo "Choosing a directory in Ranger is done by visiting a directory"
    echo ""
    echo "Use the arrow keys to browse folders"
    echo "Press 'Enter' to enter a directory"
    echo "Create a new directory with ':mkdir <dirname>'"
    echo ""
    echo "While in the directory you wish to select, quit Ranger with 'q'"
    echo ""
    while true
    do
      read -p "Select ascii art output directory now? (y/n) " answer
      case ${answer} in
        [Yy]* )
          ascii_dir="$(choose_folder)"
          echo ""
          echo "Selected ASCII Art output directory = ${ascii_dir}"
          echo ""
          break
          ;;
        [Nn]* )
          printf "\nSkipping ascii art output directory selection.\n"
          ascii_dir=
          break
          ;;
        * ) echo "Please answer 'y' to select directory, or 'n' to skip."
          ;;
      esac
    done
  else
    ascii_dir=$(dialog --stdout \
                          --title "Please select an ascii art output folder" \
                          --fselect ${HOME}/Pictures/ 14 48)
  fi
}

select_ascii() {
  if [ "${have_ranger}" ]
  then
    selectedAscii="$(choose_ascii)"
  else
    selectedAscii=$(dialog --stdout \
                          --title "Please select an ascii art file" \
                          --fselect ${ARTDIR}/ 14 48)
  fi
  show_art_file "${selectedAscii}"
}

select_song() {
  if [ "${have_ranger}" ]
  then
    selectedSong="$(choose_song)"
  else
    selectedSong=$(dialog --stdout \
                          --title "Please select a song" \
                          --fselect ${HOME}/Music/ 14 48)
  fi
  songfile=
  file "${selectedSong}" | grep -i audio > /dev/null || \
  file "${selectedSong}" | grep Ogg > /dev/null && songfile=1
  [ "${songfile}" ] && {
    SONG="${selectedSong}"
    songname=`basename "${SONG}"`
    songleng=`echo ${songname} | wc -c`
    [ ${songleng} -gt 16 ] && {
      trimleng=$((songleng - 16))
      songname="${songname::-${trimleng}}..."
    }
    custom_song=1
  }
}

set_show_term() {
  if [ "${GNOME}" ]
  then
    show_term="Gnome Terminal"
  else
    if [ "${XFCE4}" ]
    then
      show_term="XFCE4 Terminal"
    else
      if [ "${TILIX}" ]
      then
        show_term="Tilix Terminal"
      else
        if [ "${RETRO}" ]
        then
          show_term="Retro Terminal"
        else
          show_term="Current Terminal"
        fi
      fi
    fi
  fi
}

init_vars() {
  MTITLE="Asciiville"
  COMMAND_TMUX="btop-tmux"
  ASCSPLASH="asciisplash"
  ASCSPLASH_TMUX="asciisplash-tmux"

  INTERACTIVE=
  RECORD=
  DO_SPLASH=
  TMUX_ASC=
  TMUX_SPLASH=
}

have_gnome=`type -p gnome-terminal`
have_tilix=`type -p tilix`
# Check if initialization has been run
[ -f ${CONFIG} ] || {
  echo ""
  echo "Asciiville initialization needs to be run once."
  echo "Answer 'y' to initialize, 'n' to skip it for now,"
  echo "or 'i' to skip and ignore this in the future"
  echo ""
  echo "Note: console mode initialization needs to be done with the 'ascinit'"
  echo "      command. On a headless system or system without X11 windowing,"
  echo "      answer 'n' here, exit 'asciiville', and run 'ascinit -c'"
  echo ""
  while true
  do
    read -p "Initialize Asciiville (with terminal emulators) now [y/n/i] " answer
    case ${answer} in
      [Ii]* )
        printf "\nIgnoring initialization.\n"
        printf "\nInitialize Asciiville by executing the command 'ascinit'\n"
        read -p "Press Enter to continue" contans
        [ -d ${HOME}/.config ] || mkdir ${HOME}/.config
        [ -d ${HOME}/.config/asciiville ] || mkdir ${HOME}/.config/asciiville
        touch ${CONFIG}
        break
        ;;
      [Yy]* )
        ascinit -a -q
        break
        ;;
      [Nn]* )
        printf "\nSkipping initialization.\n"
        printf "\nInitialize Asciiville by executing the command 'ascinit'\n"
        read -p "Press Enter to continue" contans
        break
        ;;
      * ) echo "Please answer 'y' to initialize, 'n' to skip, or 'i' to ignore."
        ;;
    esac
  done
}

FULLSCREEN=
init_vars
# Without any arguments, bring up interactive dialog menu
[ $# -eq 0 ] && INTERACTIVE=1
have_btop=`type -p btop`
have_mutt=`type -p mutt`
have_neomutt=`type -p neomutt`
have_nethack=`type -p nethack`
have_newsboat=`type -p newsboat`
have_ninvaders=`type -p ninvaders`
have_ranger=`type -p ranger`
have_retro=`type -p cool-retro-term`
have_tetris=`type -p tetris`
have_asciiart=`type -p asciiart`
have_asciijulia=`type -p asciijulia`
have_asciiplasma=`type -p asciiplasma`
have_asciimpplus=`type -p asciimpplus`
have_asciinema=`type -p asciinema`
have_bb=`type -p bb-tmux`
have_cmatrix=`type -p cmatrix`
have_curl=`type -p curl`
have_ddgr=`type -p ddgr`
have_diagon=`type -p diagon`
have_figlet=`type -p figlet`
have_gdu=`type -p gdu`
have_got=`type -p got`
have_ncdu=`type -p ncdu`
have_mapscii=`type -p mapscii`
have_mpcplus=`type -p mpcplus`
have_mpplus=`type -p mpplus`
have_neo=`type -p neofetch`
have_cbftp=`type -p cbftp`
have_ncftp=`type -p ncftp`
have_lolcat=`type -p lolcat`
have_rainbow=`type -p rainbowstream`
have_roon=`type -p roon`
have_speed=`type -p speedtest-cli`
have_splash=`type -p asciisplash`
have_showascii=`type -p show_ascii_art`
have_xfce4=`type -p xfce4-terminal`
have_jrnl=`type -p jrnl`
have_lynx=`type -p lynx`
have_w3m=`type -p w3m`
have_wmctrl=`type -p wmctrl`
have_xprop=`type -p xprop`
isfull=
image_dir=
ascii_dir=
custom_song=
use_lolcat=
use_lol="NO"
if [ "${have_figlet}" ]
then
  use_figlet=1
  [ -d "${FIG_FONTS}" ] || {
    if [ -d "${HOME_FIG_FONTS}" ]
    then
      FIG_FONTS="${HOME_FIG_FONTS}"
    else
      use_figlet=
    fi
  }
else
  use_figlet=
fi

[ "${have_jrnl}" ] && {
  [ "${PAGER}" ] || PAGER=more
  journal_pager=${PAGER}
  declare -a journals=()
  numjrnls=`jrnl --list | grep '*' | wc -l`
  if [ ${numjrnls} -gt 1 ]
  then
    IFS=$'\n' read -r -d '' -a journals < <( jrnl --list | grep '*' | awk ' { print $2 } ' && printf '\0' )
  else
    journals=("default")
  fi
  numjrnls=${#journals[@]}
}


SAVED_BROWSER=
if [ "${BROWSER}" ]
then
  [ "${BROWSER}" == "w3m" ] || [ "${BROWSER}" == "lynx" ] || {
    # The user set a custom BROWSER env var
    SAVED_BROWSER="${BROWSER}"
  }
else
  # We prefer W3M over Lynx
  if [ "${have_w3m}" ]
  then
    [ "${BROWSER}" ] || BROWSER=w3m
  else
    [ "${have_lynx}" ] && {
      [ "${BROWSER}" ] || BROWSER=lynx
    }
  fi
fi
export BROWSER

cycle=
noaudio=
showart=
show_neofetch=
SLIDESHOW=
while getopts "Aabc:CdfFgiIjJklL:mMn:NpP:rRSs:tTUvV:wWxXyYzZu" flag; do
  case $flag in
    A)
      ASCSPLASH="${ASCSPLASH} -i"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l art"
      ;;
    a)
      AUDIO=1
      audarg="-P -S ${SONG}"
      ;;
    b)
      ASCSPLASH="${ASCSPLASH} -b"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -b"
      ;;
    C)
      cycle=1
      ;;
    c)
      COMMAND="${OPTARG}"
      case "${COMMAND}" in
      maps|Maps)
          [ "${have_mapscii}" ] && mapscii
          break
          ;;
      moon|Moon)
          [ "${have_curl}" ] && {
            curl wttr.in/Moon?AF 2> /dev/null
            read -p "Press Enter to continue" answer
          }
          break
          ;;
      news|News)
          MTITLE="Asciiville News"
          [ "${have_newsboat}" ] || {
            not_in_path newsboat -c
            if [ "${have_btop}" ]
            then
              echo "Continuing, using btop rather than ${COMMAND}."
              COMMAND=btop
              MTITLE="Btop++ System Monitor"
            else
              if [ "${have_lynx}" ]
              then
                echo "Continuing, using lynx rather than ${COMMAND}."
                COMMAND="lynx ${WEB_HOME}"
                MTITLE="Lynx Web Browser"
              else
                echo "Continuing, using asciiart rather than ${COMMAND}."
                COMMAND=asciiart
                MTITLE="Asciiville ASCIImatics"
              fi
            fi
          }
          break
          ;;
      search|Search)
          [ "${have_ddgr}" ] && ddgr
          break
          ;;
      speed|Speed)
          [ "${have_speed}" ] && speedtest-cli
          break
          ;;
      translate|Translate)
          [ "${have_got}" ] && got
          break
          ;;
      twitter|Twitter)
          [ "${have_rainbow}" ] && rainbowstream
          break
          ;;
      weather|Weather)
          break
          [ "${have_curl}" ] && {
            curl v2.wttr.in?AF 2> /dev/null
            read -p "Press Enter to continue" answer
          }
          ;;
      *)
          FIRST=`echo ${COMMAND} | awk ' { print $1 } '`
          MTITLE="Asciiville ${COMMAND}"
          type -p "${FIRST}" > /dev/null || {
            not_in_path ${FIRST} -c
            if [ "${have_btop}" ]
            then
              echo "Continuing, using btop rather than ${COMMAND}."
              COMMAND=btop
              MTITLE="Btop++ System Monitor"
            else
              if [ "${have_lynx}" ]
              then
                echo "Continuing, using lynx rather than ${COMMAND}."
                COMMAND="lynx ${WEB_HOME}"
                MTITLE="Lynx Web Browser"
              else
                echo "Continuing, using asciiart rather than ${COMMAND}."
                COMMAND=asciiart
                MTITLE="Asciiville ASCIImatics"
              fi
            fi
          }
          break
          ;;
      esac
      ;;
    d)
      COMMAND="gdu ${HOME}"
      MTITLE="Disk Usage Analyzer"
      [ "${have_gdu}" ] || {
        not_in_path gdu -d
        if [ "${have_ncdu}" ]
        then
          echo "Continuing, using ncdu rather than gdu."
          COMMAND="ncdu ${HOME}"
        else
          if [ "${have_btop}" ]
          then
            echo "Continuing, using btop rather than ${COMMAND}."
            COMMAND=btop
            MTITLE="Btop++ System Monitor"
          else
            if [ "${have_ranger}" ]
            then
              echo "Continuing, using ranger rather than ${COMMAND}."
              COMMAND=ranger
              MTITLE="Ranger File Manager"
            else
              echo "Continuing, using asciiart rather than ${COMMAND}."
              COMMAND=asciiart
              MTITLE="Asciiville ASCIImatics"
            fi
          fi
        fi
      }
      ;;
    f)
      COMMAND=cbftp
      MTITLE="Cbftp FTP Client"
      [ "${have_cbftp}" ] || {
        if [ "${have_ncftp}" ]
        then
          COMMAND=ncftp
          MTITLE="Ncftp FTP Client"
        else
          not_in_path cbftp -f
          if [ "${have_btop}" ]
          then
            echo "Continuing, using btop rather than ${COMMAND}."
            COMMAND=btop
            MTITLE="Btop++ System Monitor"
          else
            if [ "${have_lynx}" ]
            then
              echo "Continuing, using lynx rather than ${COMMAND}."
              COMMAND="lynx ${WEB_HOME}"
              MTITLE="Lynx Web Browser"
            else
              echo "Continuing, using asciiart rather than ${COMMAND}."
              COMMAND=asciiart
              MTITLE="Asciiville ASCIImatics"
            fi
          fi
        fi
      }
      ;;
    F)
      FULLSCREEN=1
      ;;
    g)
      GNOME=1
      [ "${have_gnome}" ] || {
        GNOME=
        not_in_path gnome-terminal -g
        select_alt_term
      }
      ;;
    i)
      INTERACTIVE=1
      ;;
    I)
      [ "${have_neo}" ] && {
        show_neofetch=1
      }
      ;;
    j)
      ASCSPLASH="${ASCSPLASH} -j"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l julia"
      ;;
    J)
      ASCSPLASH="${ASCSPLASH} -J"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -J"
      ;;
    k)
      kill_tmux_sessions
      exit 0
      ;;
    l)
      COMMAND="lynx ${WEB_HOME}"
      MTITLE="Lynx Web Browser"
      [ "${have_lynx}" ] || {
        not_in_path lynx -l
        if [ "${have_w3m}" ]
        then
          echo "Continuing, using w3m rather than lynx."
          COMMAND="w3m -v ${WEB_HOME}"
          MTITLE="W3M Web Browser"
        else
          if [ "${have_btop}" ]
          then
            echo "Continuing, using btop rather than ${COMMAND}."
            COMMAND=btop
            MTITLE="Btop++ System Monitor"
          else
            if [ "${have_ranger}" ]
            then
              echo "Continuing, using ranger rather than ${COMMAND}."
              COMMAND=ranger
              MTITLE="Ranger File Manager"
            else
              echo "Continuing, using asciiart rather than ${COMMAND}."
              COMMAND=asciiart
              MTITLE="Asciiville ASCIImatics"
            fi
          fi
        fi
      }
      ;;
    L)
      [ "${have_lolcat}" ] && {
        use_lolcat=${OPTARG}
        if [ "${use_lolcat}" == "2" ]
        then
          use_lol="YES+"
          LOLCAT="${LOLCAT_ANIM}"
        else
          use_lol="YES"
          LOLCAT="${LOLCAT_NORM}"
        fi
      }
      ;;
    m)
      ASCSPLASH="${ASCSPLASH} -m"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l mpplus"
      ;;
    M)
      COMMAND=mpcplus
      MTITLE="Music Player Plus MPD Client"
      [ "${have_mpcplus}" ] || {
        not_in_path mpcplus -M
        if [ "${have_btop}" ]
        then
          echo "Continuing, using btop rather than ${COMMAND}."
          COMMAND=btop
          MTITLE="Btop++ System Monitor"
        else
          if [ "${have_ranger}" ]
          then
            echo "Continuing, using ranger rather than ${COMMAND}."
            COMMAND=ranger
            MTITLE="Ranger File Manager"
          else
            echo "Continuing, using asciiart rather than ${COMMAND}."
            COMMAND=asciiart
            MTITLE="Asciiville ASCIImatics"
          fi
        fi
      }
      ;;
    n)
      ASCSPLASH="${ASCSPLASH} -c ${OPTARG}"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -c ${OPTARG}"
      ;;
    N)
      ASCSPLASH="${ASCSPLASH} -C"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -t"
      ;;
    p)
      ASCSPLASH="${ASCSPLASH} -p"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l plasma"
      ;;
    P)
      COMMAND_TMUX="${COMMAND_TMUX} -p ${OPTARG}"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l ${OPTARG}"
      ;;
    r)
      RETRO=1
      [ "${have_retro}" ] || {
        not_in_path cool-retro-term -r
        select_alt_term
      }
      ;;
    R)
      [ "${have_asciinema}" ] && {
        RECORD=1
        TMUX=1
        COMMAND_TMUX="${COMMAND_TMUX} -r"
        ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -R"
      }
      ;;
    S)
      DO_SPLASH=1
      MTITLE="ASCIImatics Animation"
      ;;
    s)
      ASCSPLASH="${ASCSPLASH} -s ${OPTARG}"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -s ${OPTARG}"
      ;;
    t)
      TILIX=1
      [ "${have_tilix}" ] || {
        TILIX=
        not_in_path tilix -t
        select_alt_term
      }
      ;;
    T)
      TMUX=1
      ;;
    U)
      if [ "${have_ninvaders}" ]
      then
        COMMAND=ninvaders
        MTITLE="Ninvaders Video Game"
      else
        not_in_path ninvaders -U
      fi
      ;;
    v)
      [ -f "/usr/share/doc/asciiville/VERSION" ] || {
        echo "Asciiville VERSION file not installed"
        exit 1
      }
      . "/usr/share/doc/asciiville/VERSION"
      echo "Asciiville version ${VERSION} release ${RELEASE}"
      exit 0
      ;;
    V)
      SLIDESHOW="${OPTARG}"
      ;;
    W)
      if [ "${have_cmatrix}" ]
      then
        COMMAND="cmatrix -u 8"
        MTITLE="Matrix Screen"
      else
        not_in_path cmatrix -W
      fi
      ;;
    w)
      COMMAND="w3m -v ${WEB_HOME}"
      MTITLE="W3M Web Browser"
      [ "${have_w3m}" ] || {
        not_in_path w3m -w
        if [ "${have_lynx}" ]
        then
          echo "Continuing, using lynx rather than w3m."
          COMMAND="lynx ${WEB_HOME}"
          MTITLE="Lynx Web Browser"
        else
          if [ "${have_btop}" ]
          then
            echo "Continuing, using btop rather than ${COMMAND}."
            COMMAND=btop
            MTITLE="Btop++ System Monitor"
          else
            if [ "${have_ranger}" ]
            then
              echo "Continuing, using ranger rather than ${COMMAND}."
              COMMAND=ranger
              MTITLE="Ranger File Manager"
            else
              echo "Continuing, using asciiart rather than ${COMMAND}."
              COMMAND=asciiart
              MTITLE="Asciiville ASCIImatics"
            fi
          fi
        fi
      }
      ;;
    X)
      CURRENT=1
      ;;
    x)
      XFCE4=1
      [ "${have_xfce4}" ] || {
        XFCE4=
        not_in_path xfce4-terminal -x
        select_alt_term
      }
      ;;
    Y)
      if [ "${have_nethack}" ]
      then
        COMMAND=nethack
        MTITLE="NetHack Dungeon Game"
      else
        not_in_path nethack -Y
      fi
      ;;
    y)
      COMMAND=ranger
      MTITLE="Ranger File Manager"
      [ "${have_ranger}" ] || {
        not_in_path ranger -y
        if [ "${have_btop}" ]
        then
          echo "Continuing, using btop rather than ${COMMAND}."
          COMMAND=btop
          MTITLE="Btop++ System Monitor"
        else
          if [ "${have_lynx}" ]
          then
            echo "Continuing, using lynx rather than ${COMMAND}."
            COMMAND=lynx
            MTITLE="Lynx Web Browser"
          else
            echo "Continuing, using asciiart rather than ${COMMAND}."
            COMMAND=asciiart
            MTITLE="Asciiville ASCIImatics"
          fi
        fi
      }
      ;;
    Z)
      noaudio=1
      ;;
    z)
      COMMAND=neomutt
      MTITLE="NeoMutt Mail Client"
      [ "${have_neomutt}" ] || {
        if [ "${have_mutt}" ]
        then
          COMMAND=mutt
          MTITLE="Mutt Mail Client"
        else
          not_in_path mutt -z
          if [ "${have_btop}" ]
          then
            echo "Continuing, using btop rather than ${COMMAND}."
            COMMAND=btop
            MTITLE="Btop++ System Monitor"
          else
            if [ "${have_lynx}" ]
            then
              echo "Continuing, using lynx rather than ${COMMAND}."
              COMMAND="lynx ${WEB_HOME}"
              MTITLE="Lynx Web Browser"
            else
              echo "Continuing, using asciiart rather than ${COMMAND}."
              COMMAND=asciiart
              MTITLE="Asciiville ASCIImatics"
            fi
          fi
        fi
      }
      ;;
    u)
      usage
      ;;
    esac
done
shift $((OPTIND-1))

# The -T option says use tmux, -S says do asciimatics
# If we have both then do asciimatics in tmux
# If just the -T then do command in tmux
[ "${TMUX}" ] && {
  if [ "${DO_SPLASH}" ]
  then
    TMUX_SPLASH=1
  else
    TMUX_ASC=1
  fi
}

# If no terminal was specified on the command line, use gnome if available
[ "${GNOME}" ] || [ "${TILIX}" ] || [ "${RETRO}" ] || [ "${CURRENT}" ] || [ "${XFCE4}" ] || {
  select_alt_term
}

# Make sure only one terminal is selected
if [ "${CURRENT}" ]
then
  XFCE4=
  TILIX=
  GNOME=
  RETRO=
else
  if [ "${XFCE4}" ]
  then
    TILIX=
    GNOME=
    RETRO=
  else
    if [ "${TILIX}" ]
    then
      GNOME=
      RETRO=
    else
      [ "${GNOME}" ] && RETRO=
    fi
  fi
fi

artshow=
[ "$1" ] && artshow=1
for art in "$@"
do
  show_art_file ${art}
done
[ "${artshow}" ] && exit 0

[ "${show_neofetch}" ] && {
  if [ "${use_lolcat}" ]
  then
    neofetch | ${LOLCAT}
  else
    neofetch
  fi
  read -p "Press Enter to continue" answer
}

[ "${noaudio}" ] && {
  AUDIO=
  audarg=
}
[ "${AUDIO}" ] && {
  audarg="-P -S ${SONG}"
  ASCSPLASH="${ASCSPLASH} -a"
  ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -a"
}

[ "${SLIDESHOW}" ] && {
  if [ "${cycle}" ]
  then
    cycarg="-c"
  else
    cycarg=
  fi
  if [ "${use_lolcat}" ]
  then
    lolarg="-l ${use_lolcat}"
  else
    lolarg=
  fi
  if [ "${AUDIO}" ]
  then
    audarg="-P -S ${SONG}"
  else
    audarg=
  fi
  showargs="-C ${cycarg} ${lolarg} ${audarg}"
  play_slide_show ${SLIDESHOW}
  exit 0
}

[ "${INTERACTIVE}" ] && {
  [ "${have_lolcat}" ] && {
    use_lolcat=1
    use_lol="YES"
    LOLCAT="${LOLCAT_NORM}"
  }
  songname=`basename "${SONG}"`
  songleng=`echo ${songname} | wc -c`
  [ ${songleng} -gt 16 ] && {
    trimleng=$((songleng - 16))
    songname="${songname::-${trimleng}}..."
  }
  set_show_term
  [ "${FULLSCREEN}" ] && add_fullscreen
  trap 'set_user_conf' SIGINT SIGTERM SIGHUP EXIT
  clear
  echo ""
  show_main_menu
}

make_it_so
