#!/bin/bash
#
# asciiville - front-end for a variety of terminal and/or `tmux` sessions.
#
#     The `asciiville` command can be used to invoke:
#
#     * The lightweight character based system monitor, `btop`
#     * The lightweight character based web browser, `lynx` or `w3m`
#     * The lightweight character based mail client, `mutt`
#     * The lightweight character based file manager, `ranger`
#     * One or more terminal emulators running a specified command
#     * A tmux session
#     * A network upload/download speed test
#     * A web search
#     * Character based ASCII art
#     * Character based world map
#     * Command line character based Twitter client
#     * Display system info
#     * MusicPlayerPlus or RoonCommandLine menus
#     * Any character based client the user wishes to run
#     * One of several asciimatics animations optionally accompanied by audio
#
# Written by Ronald Joe Record <ronaldrecord@gmail.com>
# April, 2022
#

BOLD=$(tput bold)
NORMAL=$(tput sgr0)
PLEASE="Please enter your"
COMMAND=btop
FIG_FONTS="/usr/share/figlet-fonts"
HOME_FIG_FONTS="${HOME}/src/Asciiville/share/figlet-fonts"
FIG_TEXT="Asciiville"
USE_FONT="Standard"
WEB_HOME="https://github.com/doctorfree/Asciiville#readme"
LOLCAT_NORM="lolcat"
LOLCAT_ANIM="lolcat --animate --speed=60.0"
LOLCAT="${LOLCAT_ANIM}"
MTITLE="Btop++ System Monitor"

if [ `echo $PATH | grep -c /usr/local/bin` -ne "1" ]
then
  export PATH="$PATH:/usr/local/bin"
fi
if [ `echo $PATH | grep -c /usr/games` -ne "1" ]
then
  export PATH="$PATH:/usr/games"
fi

usage() {
  printf "\nUsage: asciiville [-a] [-A] [-b] [-c command] [-C] [-d] [-f] [-F]"
  printf "\n\t[-g] [-G geometry] [-i] [-I] [-jJ] [-k] [-l] [-L level] [-m] [-M]"
  printf "\n\t[-n num] [-N] [-p] [-P script] [-r] [-R] [-s song] [-S] [-t]"
  printf "\n\t[-T] [-v] [-V show] [-w] [-x] [-X] [-y] [-z] [-u]\n"
  printf "\nTerminal/Command options:"
  printf "\n\t-c 'command' indicates use 'command'"
  printf "\n\t\tIf 'command' is keyword 'maps' then display a map using mapscii"
  printf "\n\t\tIf 'command' is keyword 'moon' then display the phase of the Moon"
  printf "\n\t\tIf 'command' is keyword 'search' then a web search is performed"
  printf "\n\t\tIf 'command' is keyword 'speed' then a speed test is performed"
  printf "\n\t\tIf 'command' is keyword 'twitter' then a Twitter client is run"
  printf "\n\t\tIf 'command' is keyword 'weather' then display a weather report"
  printf "\n\t\tOtherwise, 'command' will be executed in a terminal window"
  printf "\n\t-C indicates cycle slideshow endlessly (Ctrl-c to exit show)"
  printf "\n\t-d indicates use disk usage analyzer as default command"
  printf "\n\t-f indicates use cbftp/ncftp as the default command"
  printf "\n\t-F indicates fullscreen display"
  printf "\n\t-g indicates use gnome terminal emulator"
  printf "\n\t-G 'geometry' specifies the slideshow window geometry (default fullscreen)"
  printf "\n\t-i indicates start asciiville in interactive mode"
  printf "\n\t-I indicates display system info"
  printf "\n\t-l indicates use lynx web browser as the default command"
  printf "\n\t-L 'level' use lolcat coloring, 'level' can be '1' or '2' (animate)"
  printf "\n\t-P script specifies the ASCIImatics script to run in visualizer pane"
  printf "\n\t-r indicates use retro terminal emulator"
  printf "\n\t-t indicates use tilix terminal emulator"
  printf "\n\t-V 'show' displays an ascii art slide show"
  printf "\n\t\t'show' can be Art, Doctorwhen, Dragonflies, Fractals,"
  printf "\n\t\t\tLyap, Mixed, Owls, Space, or Waterfalls"
  printf "\n\t-w indicates use w3m web browser as the default command"
  printf "\n\t-x indicates use xfce4 terminal emulator"
  printf "\n\t-X indicates run command in current terminal window"
  printf "\n\t-y indicates use ranger file manager as the default command"
  printf "\n\t-z indicates use mutt email client as the default command\n"
  printf "\nASCIImatics animation options:"
  printf "\n\t-A indicates use Asciiville scenes in ASCIImatics display"
  printf "\n\t-a indicates play audio during ASCIImatics display"
  printf "\n\t-b indicates use backup audio during ASCIImatics display"
  printf "\n\t-j indicates use Julia Set scenes in ASCIImatics display"
  printf "\n\t-J indicates Julia Set with several runs using different parameters"
  printf "\n\t-m indicates use MusicPlayerPlus scenes in ASCIImatics display"
  printf "\n\t-M indicates use MusicPlayerPlus MPD client as default command"
  printf "\n\t-n num specifies the number of times to cycle ASCIImatics scenes"
  printf "\n\t-N indicates use alternate comments in Plasma ASCIImatics scenes"
  printf "\n\t-p indicates use Plasma scenes in ASCIImatics display"
  printf "\n\t-s song specifies a song to accompany an ASCIImatics animation"
  printf "\n\t\t'song' can be the full pathname to an audio file or a"
  printf "\n\t\trelative pathname to an audio file in the MPD music library"
  printf "\n\t\tor $HOME/Music/"
  printf "\n\t-S indicates display ASCIImatics splash animation\n"
  printf "\nGeneral options:"
  printf "\n\t-k indicates kill Asciiville tmux sessions and ASCIImatics scripts"
  printf "\n\t-R indicates record tmux session with asciinema"
  printf "\n\t-T indicates use a tmux session for either ASCIImatics or command"
  printf "\n\t-v displays the Asciiville version and exits"
  printf "\n\t-u displays this usage message and exits\n"
  printf "\nInvoked without any arguments, 'asciiville' will display a menu\n"
  printf "\nType 'man asciiville' for detailed usage info on Asciiville"
  printf "\nType 'man asciisplash' for detailed usage info on Asciisplash"
  printf "\nType 'man btop' for detailed usage info on the Btop system monitor"
  printf "\nType 'man lynx' for detailed usage info on the Lynx web browser"
  printf "\nType 'man mutt' for detailed usage info on the Mutt email client"
  printf "\nType 'man cbftp' for detailed usage info on the Cbftp FTP client"
  printf "\nType 'man ranger' for detailed usage info on the Ranger file manager\n"
  exit 1
}

kill_tmux_sessions() {
  SESSIONS="asciiville asciisplash"
  for session in ${SESSIONS}
  do
    ps -ef | grep tmux | grep ${session} > /dev/null && {
      tmux kill-session -t ${session}
    }
  done
  ASCIIS="asciiart asciijulia asciimpplus asciiplasma"
  for ascii in ${ASCIIS}
  do
    ps -ef | grep -v grep | grep ${ascii} > /dev/null && {
      ps -ef | grep -v grep | grep ${ascii} | while IFS= read -r line
      do
        pid=`echo "$line" | awk ' { print $2 } '`
        kill ${pid}
      done 
    }
  done
}

not_in_path() {
  echo "Option \'$2\' indicates use $1 as the default command."
  echo "However, $1 is not installed or not in your path."
  echo "You may be able to install $1 using apt or dnf as follows:"
  printf "\n\n\tsudo apt install $1\nor"
  printf "\n\tsudo dnf install $1\n\n"
}

select_alt_term() {
  if [ "${have_gnome}" ]
  then
    GNOME=1
  else
    if [ "${have_xfce4}" ]
    then
      XFCE4=1
    else
      if [ "${have_tilix}" ]
      then
        TILIX=1
      else
        if [ "${have_retro}" ]
        then
          RETRO=1
        else
          echo "Cannot find a terminal emulator I like. Disabling terminal use."
          use_term=
        fi
      fi
    fi
  fi
}

make_it_so() {
  # Fullscreen tmux sessions and ASCIImatics Animations
  [ "${SPLASH}" ] || [ "${TMUX_ASC}" ] && FULLSCREEN=1

  # Set the command to use based on command line switches (-S, -T)
  AVCOMM="${COMMAND}"
  if [ "${SPLASH}" ]
  then
    if [ "${TMUX_SPLASH}" ]
    then
      AVCOMM="${ASCSPLASH_TMUX}"
    else
      AVCOMM="${ASCSPLASH}"
    fi
  else
    [ "${TMUX_ASC}" ] && AVCOMM="${COMMAND_TMUX}"
  fi

  if [ "${use_term}" ]
  then
    # Begin terminal command startup section
    if [ "${CURRENT}" ]
    then
      ${AVCOMM}
    else
      if [ "${RETRO}" ]
      then
        if [ "${FULLSCREEN}" ]
        then
          cool-retro-term --fullscreen -e "${AVCOMM}" 2> /dev/null &
        else
          cool-retro-term -e "${AVCOMM}" 2> /dev/null &
        fi
      else
        if [ "${FULLSCREEN}" ]
        then
          if [ "${TILIX}" ]
          then
            tilix --title="${MTITLE}" \
                  --full-screen \
                  --window-style=borderless \
                  --profile=Asciiville \
                  --command="${AVCOMM}" 2> /dev/null &
          else
            if [ "${XFCE4}" ]
            then
              xfce4-terminal --title "${MTITLE}" \
                  --icon=audio-player \
                  --hide-menubar \
                  --hide-toolbar \
                  --hide-scrollbar \
                  --fullscreen \
                  --command="${AVCOMM}" &
            else
              gnome-terminal -t "${MTITLE}" \
                  --hide-menubar \
                  --full-screen \
                  --profile=Asciiville \
                  -- ${AVCOMM} &
            fi
          fi
        else
          if [ "${TILIX}" ]
          then
            tilix --title="${MTITLE}" \
                  --window-style=borderless \
                  --geometry=90x24+150+25 \
                  --profile=Asciiville \
                  --command="${AVCOMM}" 2> /dev/null &
          else
            if [ "${XFCE4}" ]
            then
              xfce4-terminal --title "${MTITLE}" \
                --icon=audio-player \
                --hide-menubar \
                --hide-toolbar \
                --hide-scrollbar \
                --geometry 90x24+150+25 \
                --command="${AVCOMM}" &
            else
              gnome-terminal -t "${MTITLE}" \
                  --hide-menubar \
                  --geometry 90x24+150+25 \
                  --profile=Asciiville \
                  -- ${AVCOMM} &
            fi
          fi
        fi
      fi
    fi
    # End terminal command startup section
  else
    ${AVCOMM}
  fi
}

select_font() {
  # Array with font names
  fonts=("Bolger" "sblood" "Slant" "Shadow" "Speed" "Varsity" "Small" "Small Script" "Small Shadow" "Small Slant")
  smallfonts=("Small" "Small Script" "Small Shadow" "Small Slant")

  # Seed random generator
  RANDOM=$$$(date +%s)

  USE_FONT=${fonts[ $RANDOM % ${#fonts[@]} ]}
  [ -r "${FIG_FONTS}/${USE_FONT}.flf" ] || USE_FONT="Standard"

  goBig=
  for font in "${smallfonts[@]}"
  do
    [[ "${USE_FONT}" == "$font" ]] && {
      goBig=1
      break
    }
  done

  case "$1" in
    AsciiArt)
      if [ "${goBig}" ]
      then
        FIG_TEXT="Asciiville Art"
      else
        FIG_TEXT="Ascii Art"
      fi
      ;;
    Asciimatics)
      if [ "${goBig}" ]
      then
        FIG_TEXT="Asciimatics"
      else
        FIG_TEXT="Animation"
      fi
      ;;
    Asciiville)
      if [ "${goBig}" ]
      then
        FIG_TEXT="Asciiville"
      else
        FIG_TEXT="Asciiville"
      fi
      ;;
    MusicPlayer)
      if [ "${goBig}" ]
      then
        FIG_TEXT="MusicPlayerPlus"
      else
        FIG_TEXT="Music"
      fi
      ;;
    Roon)
      if [ "${goBig}" ]
      then
        FIG_TEXT="RoonCommandLine"
      else
        FIG_TEXT="Roon"
      fi
      ;;
    *)
      if [ "${goBig}" ]
      then
        FIG_TEXT="Asciiville"
      else
        FIG_TEXT="Asciiville"
      fi
      ;;
  esac
}

play_slide_show() {
  showname="$1"
  showargs="-C ${cycarg} ${lolarg} ${audarg}"
  if [ "${XFCE4}" ]
  then
    xfce4-terminal --fullscreen \
                   --font="Monospace Regular" \
                   --color-bg=Black \
                   --command="show_ascii_art ${showargs} -s ${showname}"
  else
    if [ "${TILIX}" ]
    then
      tilix --full-screen \
            --window-style=borderless \
            --profile=Asciiville \
            --command="show_ascii_art ${showargs} -s ${showname}"
    else
      gnome-terminal --window --full-screen \
                     --profile=Asciiville \
                     -- show_ascii_art ${showargs} -s ${showname}
    fi
  fi
}

show_art_menu() {
  animation_menu=
  main_menu=
  while true
  do
    if [ "${AUDIO}" ]
    then
      audiostat="YES"
    else
      audiostat="NO"
    fi
    if [ "${cycle}" ]
    then
      cyclestat="YES"
    else
      cyclestat="NO"
    fi
    if [ "${geometry}" ]
    then
      fullstat="NO"
    else
      fullstat="YES"
    fi
    if [ "${RECORD}" ]
    then
      recordstat="YES"
    else
      recordstat="NO"
    fi
    if [ "${TMUX}" ]
    then
      usetmux="YES"
    else
      usetmux="NO"
    fi
    if [ "${use_lolcat}" ]
    then
      lolarg="-l ${use_lolcat}"
    else
      lolarg=
    fi
    [ "${use_figlet}" ] && {
      select_font AsciiArt
      if [ "${use_lolcat}" ]
      then
        figlet -c -d "${FIG_FONTS}" -f "${USE_FONT}" -k -t ${FIG_TEXT} | ${LOLCAT}
      else
        figlet -c -d "${FIG_FONTS}" -f "${USE_FONT}" -k -t ${FIG_TEXT}
      fi
    }
    PS3="${BOLD}${PLEASE} command choice (numeric or text): ${NORMAL}"
    options=()
    options+=("Ascii Doctorwhen Art Slide Show")
    options+=("Ascii Dragonfly Art Slide Show")
    options+=("Ascii Fine Art Slide Show")
    options+=("Ascii Fractal Art Slide Show")
    options+=("Ascii Lyapunov Art Slide Show")
    options+=("Ascii Mixed Art Slide Show")
    options+=("Ascii Owls Art Slide Show")
    options+=("Ascii Space Art Slide Show")
    options+=("Ascii Waterfalls Art Slide Show")
    options+=("Cycle Slideshow     [${cyclestat}]")
    options+=("Fullscreen Window   [${fullstat}]")
    [ "${have_lolcat}" ] && options+=("Use Lolcat Coloring [${use_lol}]")
    options+=("Use Audio           [${audiostat}]")
    options+=("Use Tmux            [${usetmux}]")
    [ "${have_asciinema}" ] && options+=("Record Tmux Session [${recordstat}]")
    [ "${have_splash}" ] && options+=("Animations menu")
    options+=("Main menu" "Quit")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
          "Animations menu",*|*,"Animations menu")
              animation_menu=1
              break 2
              ;;
          "Main menu",*|*,"Main menu"|"Back",*|*,"Back"|"back",*|*,"back")
              main_menu=1
              break 2
              ;;
          "Ascii Doctorwhen Art Slide Show",*|*,"Ascii Doctorwhen Art Slide Show")
              play_slide_show Doctorwhen
              ;;
          "Ascii Dragonfly Art Slide Show",*|*,"Ascii Dragonfly Art Slide Show")
              play_slide_show Dragonflies
              ;;
          "Ascii Space Art Slide Show",*|*,"Ascii Space Art Slide Show")
              play_slide_show Space
              ;;
          "Ascii Fine Art Slide Show",*|*,"Ascii Fine Art Slide Show")
              play_slide_show Art
              break
              ;;
          "Ascii Fractal Art Slide Show",*|*,"Ascii Fractal Art Slide Show")
              play_slide_show Fractals
              break
              ;;
          "Ascii Lyapunov Art Slide Show",*|*,"Ascii Lyapunov Art Slide Show")
              play_slide_show Lyap
              break
              ;;
          "Ascii Mixed Art Slide Show",*|*,"Ascii Mixed Art Slide Show")
              play_slide_show Mixed
              break
              ;;
          "Ascii Owls Art Slide Show",*|*,"Ascii Owls Art Slide Show")
              play_slide_show Owls
              break
              ;;
          "Ascii Waterfalls Art Slide Show",*|*,"Ascii Waterfalls Art Slide Show")
              play_slide_show Waterfalls
              break
              ;;
          "Use Audio"*,*|*,"Use Audio"*)
              if [ "${AUDIO}" ]
              then
                AUDIO=
              else
                AUDIO=1
              fi
              break
              ;;
          "Cycle Slideshow"*,*|*,"Cycle Slideshow"*)
              if [ "${cycle}" ]
              then
                cycle=
              else
                cycle=1
              fi
              break
              ;;
          "Fullscreen Window"*,*|*,"Fullscreen Window"*)
              if [ "${geometry}" ]
              then
                geometry=
              else
                geometry="1280x1024+100+100"
              fi
              break
              ;;
          "Use Lolcat Coloring"*,*|*,"Use Lolcat Coloring"*)
              if [ "${use_lolcat}" == "2" ]
              then
                use_lolcat=
                use_lol="NO"
                lolarg=
              else
                if [ "${use_lolcat}" ]
                then
                  use_lolcat=2
                  use_lol="YES+"
                  lolarg="-l 2"
                  LOLCAT="${LOLCAT_ANIM}"
                else
                  use_lolcat=1
                  use_lol="YES"
                  lolarg="-l 1"
                  LOLCAT="${LOLCAT_NORM}"
                fi
              fi
              break
              ;;
          "Record Tmux Session"*,*|*,"Record Tmux Session"*)
              if [ "${RECORD}" ]
              then
                RECORD=
              else
                RECORD=1
                TMUX=1
              fi
              if [ "${RECORD}" ]
              then
                ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -R"
              else
                ASCSPLASH_TMUX=`echo ${ASCSPLASH_TMUX} | sed -e "s/ -R//"`
              fi
              break
              ;;
          "Use Tmux"*,*|*,"Use Tmux"*)
              if [ "${TMUX}" ]
              then
                TMUX=
                RECORD=
              else
                TMUX=1
              fi
              break
              ;;
          "Quit",*|*,"Quit"|"quit",*|*,"quit")
              printf "\nExiting\n"
              exit 0
              ;;
      esac
      REPLY=
    done
  done
  [ "${animation_menu}" ] && {
    clear
    printf "\n\n\n"
    show_animation_menu
  }
  [ "${main_menu}" ] && {
    clear
    printf "\n"
    init_vars
    show_main_menu
  }
}

show_animation_menu() {
  art_menu=
  main_menu=
  while true
  do
    SPLASH=1
    if [ "${AUDIO}" ]
    then
      audiostat="YES"
    else
      audiostat="NO"
    fi
    if [ "${RECORD}" ]
    then
      recordstat="YES"
    else
      recordstat="NO"
    fi
    if [ "${TMUX}" ]
    then
      usetmux="YES"
    else
      usetmux="NO"
    fi
    skip_it_so=
    [ "${use_figlet}" ] && {
      select_font Asciimatics
      if [ "${use_lolcat}" ]
      then
        figlet -c -d "${FIG_FONTS}" -f "${USE_FONT}" -k -t ${FIG_TEXT} | ${LOLCAT}
      else
        figlet -c -d "${FIG_FONTS}" -f "${USE_FONT}" -k -t ${FIG_TEXT}
      fi
    }
    PS3="${BOLD}${PLEASE} command choice (numeric or text): ${NORMAL}"
    options=()
    [ "${have_asciiart}" ] && options+=("Asciiville ASCIImatics Animation")
    [ "${have_asciijulia}" ] && options+=("Julia Set ASCIImatics Animation")
    [ "${have_asciimpplus}" ] && options+=("MPPlus ASCIImatics Animation")
    [ "${have_asciiplasma}" ] && options+=("Plasma ASCIImatics Animation")
    [ "${have_bb}" ] && options+=("Run AAlib BB Demo")
    [ "${have_showascii}" ] && options+=("Ascii Art Slide Shows")
    [ "${have_lolcat}" ] && options+=("Use Lolcat Coloring [${use_lol}]")
    options+=("Use Audio           [${audiostat}]")
    options+=("Use Tmux            [${usetmux}]")
    [ "${have_asciinema}" ] && options+=("Record Tmux Session [${recordstat}]")
    [ "${have_showascii}" ] && options+=("Asciiville Art menu")
    options+=("Main menu" "Quit")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
          "Asciiville Art menu",*|*,"Asciiville Art menu")
              art_menu=1
              break 2
              ;;
          "Main menu",*|*,"Main menu"|"Back",*|*,"Back"|"back",*|*,"back")
              clear
              init_vars
              break 2
              ;;
          "Asciiville ASCIImatics Animation",*|*,"Asciiville ASCIImatics Animation")
              ASCSPLASH="${ASCSPLASH} -i"
              ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l art"
              break
              ;;
          "Julia Set ASCIImatics Animation",*|*,"Julia Set ASCIImatics Animation")
              ASCSPLASH="${ASCSPLASH} -j"
              ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l julia"
              break
              ;;
          "MPPlus ASCIImatics Animation",*|*,"MPPlus ASCIImatics Animation")
              ASCSPLASH="${ASCSPLASH} -m"
              ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l mpplus"
              break
              ;;
          "Plasma ASCIImatics Animation",*|*,"Plasma ASCIImatics Animation")
              ASCSPLASH="${ASCSPLASH} -p"
              ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l plasma"
              break
              ;;
          "Run AAlib BB Demo",*|*,"Run AAlib BB Demo")
              SAVED_DISPLAY="${DISPLAY}"
              export DISPLAY=""
              if [ "${AUDIO}" ]
              then
                bb-tmux -a
              else
                bb-tmux
              fi
              skip_it_so=1
              export DISPLAY="${SAVED_DISPLAY}"
              break
              ;;
          "Ascii Art Slide Shows",*|*,"Ascii Art Slide Shows")
              clear
              printf "\n\n\n"
              show_art_menu
              skip_it_so=1
              break
              ;;
          "Use Lolcat Coloring"*,*|*,"Use Lolcat Coloring"*)
              if [ "${use_lolcat}" == "2" ]
              then
                use_lolcat=
                use_lol="NO"
                lolarg=
              else
                if [ "${use_lolcat}" ]
                then
                  use_lolcat=2
                  use_lol="YES+"
                  lolarg="-l 2"
                  LOLCAT="${LOLCAT_ANIM}"
                else
                  use_lolcat=1
                  use_lol="YES"
                  lolarg="-l 1"
                  LOLCAT="${LOLCAT_NORM}"
                fi
              fi
              skip_it_so=1
              break
              ;;
          "Use Audio"*,*|*,"Use Audio"*)
              if [ "${AUDIO}" ]
              then
                AUDIO=
              else
                AUDIO=1
              fi
              if [ "${AUDIO}" ]
              then
                ASCSPLASH="${ASCSPLASH} -a"
                ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -a"
              else
                ASCSPLASH=`echo ${ASCSPLASH} | sed -e "s/ -a//"`
                ASCSPLASH_TMUX=`echo ${ASCSPLASH_TMUX} | sed -e "s/ -a//"`
              fi
              skip_it_so=1
              break
              ;;
          "Record Tmux Session"*,*|*,"Record Tmux Session"*)
              if [ "${RECORD}" ]
              then
                RECORD=
              else
                RECORD=1
                TMUX=1
              fi
              if [ "${RECORD}" ]
              then
                ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -R"
              else
                ASCSPLASH_TMUX=`echo ${ASCSPLASH_TMUX} | sed -e "s/ -R//"`
              fi
              skip_it_so=1
              break
              ;;
          "Use Tmux"*,*|*,"Use Tmux"*)
              if [ "${TMUX}" ]
              then
                TMUX=
                RECORD=
              else
                TMUX=1
              fi
              skip_it_so=1
              break
              ;;
          "Quit",*|*,"Quit"|"quit",*|*,"quit")
              printf "\nExiting\n"
              exit 0
              ;;
      esac
      REPLY=
    done
    [ "${skip_it_so}" ] || {
      make_it_so
      init_vars
    }
  done
  [ "${art_menu}" ] && {
    clear
    printf "\n\n\n"
    show_art_menu
  }
  [ "${main_menu}" ] && {
    clear
    printf "\n"
    init_vars
    show_main_menu
  }
}

show_main_menu() {
  while true
  do
    if [ "${AUDIO}" ]
    then
      audiostat="YES"
    else
      audiostat="NO"
    fi
    if [ "${FULLSCREEN}" ]
    then
      fullstat="YES"
    else
      fullstat="NO"
    fi
    if [ "${RECORD}" ]
    then
      recordstat="YES"
    else
      recordstat="NO"
    fi
    if [ "${TMUX}" ]
    then
      usetmux="YES"
    else
      usetmux="NO"
    fi
    if [ "${BROWSER}" == "w3m" ]
    then
      default_browser="W3M"
    else
      if [ "${BROWSER}" == "lynx" ]
      then
        default_browser="Lynx"
      else
        if [ "${BROWSER}" ]
        then
          default_browser="${BROWSER}"
        else
          default_browser="None"
        fi
      fi
    fi
    [ "${COMMAND}" ] || COMMAND=btop
    show_comm=`echo ${COMMAND} | awk ' { print $1 } '`
    case "${COMMAND}" in
      btop)
        use_btop="YES"
        use_gdu="NO"
        use_lynx="NO"
        use_mpp="NO"
        use_mutt="NO"
        use_ftp="NO"
        use_ranger="NO"
        use_w3m="NO"
        ;;
      cbftp|ncftp)
        use_btop="NO"
        use_gdu="NO"
        use_lynx="NO"
        use_mpp="NO"
        use_mutt="NO"
        use_ftp="YES"
        use_ranger="NO"
        use_w3m="NO"
        ;;
      gdu*)
        use_btop="NO"
        use_gdu="YES"
        use_lynx="NO"
        use_mpp="NO"
        use_mutt="NO"
        use_ftp="NO"
        use_ranger="NO"
        use_w3m="NO"
        ;;
      lynx*)
        use_btop="NO"
        use_gdu="NO"
        use_lynx="YES"
        use_mpp="NO"
        use_mutt="NO"
        use_ftp="NO"
        use_ranger="NO"
        use_w3m="NO"
        ;;
      mpcplus)
        use_btop="NO"
        use_gdu="NO"
        use_lynx="NO"
        use_mpp="YES"
        use_mutt="NO"
        use_ftp="NO"
        use_ranger="NO"
        use_w3m="NO"
        ;;
      mutt|neomutt)
        use_btop="NO"
        use_gdu="NO"
        use_lynx="NO"
        use_mpp="NO"
        use_mutt="YES"
        use_ftp="NO"
        use_ranger="NO"
        use_w3m="NO"
        ;;
      ranger)
        use_btop="NO"
        use_gdu="NO"
        use_lynx="NO"
        use_mpp="NO"
        use_mutt="NO"
        use_ftp="NO"
        use_ranger="YES"
        use_w3m="NO"
        ;;
      w3m*)
        use_btop="NO"
        use_gdu="NO"
        use_lynx="NO"
        use_mpp="NO"
        use_mutt="NO"
        use_ftp="NO"
        use_ranger="NO"
        use_w3m="YES"
        ;;
    esac
    skip_it_so=
    [ "${use_figlet}" ] && {
      select_font Asciiville
      if [ "${use_lolcat}" ]
      then
        figlet -c -d "${FIG_FONTS}" -f "${USE_FONT}" -k -t ${FIG_TEXT} | ${LOLCAT}
      else
        figlet -c -d "${FIG_FONTS}" -f "${USE_FONT}" -k -t ${FIG_TEXT}
      fi
    }
    PS3="${BOLD}${PLEASE} command choice (numeric or text): ${NORMAL}"
    options=()
    [ "${have_showascii}" ] && options+=("Ascii Art Slide Shows")
    [ "${have_splash}" ] && options+=("ASCIImatics Animations")
    if [ "${use_term}" ]
    then
      [ "${have_gnome}" ] && options+=("Run ${show_comm} in Gnome Terminal")
      [ "${have_retro}" ] && options+=("Run ${show_comm} in Retro Terminal")
      [ "${have_tilix}" ] && options+=("Run ${show_comm} in Tilix Terminal")
      [ "${have_xfce4}" ] && options+=("Run ${show_comm} in XFCE4 Terminal")
    fi
    options+=("Run ${show_comm} in current window")
    [ "${have_bb}" ] && {
      [ "$DISPLAY" = "" ] || options+=("Run AAlib Demo (X11 mode)")
    }
    [ "${have_bb}" ] && options+=("Run AAlib Demo (Curses mode)")
    [ "${have_speed}" ] && options+=("Run Speed Test")
    [ "${have_rainbow}" ] && options+=("Run Twitter Client")
    [ "${have_ddgr}" ] && options+=("Search the Web")
    [ "${have_mapscii}" ] && options+=("Show Mapscii World Map")
    [ "${have_mpplus}" ] && options+=("Show MusicPlayerPlus Menu")
    [ "${have_roon}" ] && options+=("Show RoonCommandLine Menu")
    [ "${have_neo}" ] && options+=("Show System Info")
    [ "${have_curl}" ] && options+=("Phase of the Moon")
    [ "${have_curl}" ] && options+=("Weather Report")
    [ "${have_btop}" ] && options+=("Use Btop System Monitor    [${use_btop}]")
    [ "${have_gdu}" ] && options+=("Use Disk Usage Analyzer    [${use_gdu}]")
    [ "${have_lynx}" ] && options+=("Use  Lynx  Web  Browser    [${use_lynx}]")
    [ "${have_w3m}" ] && options+=("Use  W3M   Web  Browser    [${use_w3m}]")
    [ "${have_lolcat}" ] && options+=("Use Lolcat Coloring        [${use_lol}]")
    [ "${have_mpcplus}" ] && options+=("Use Music Player Plus      [${use_mpp}]")
    if [ "${have_cbftp}" ]
    then
      options+=("Use Cbftp FTP Client       [${use_ftp}]")
    else
      [ "${have_ncftp}" ] && options+=("Use Ncftp FTP Client       [${use_ftp}]")
    fi
    if [ "${have_neomutt}" ]
    then
      options+=("Use NeoMutt Mail Client    [${use_mutt}]")
    else
      [ "${have_mutt}" ] && options+=("Use Mutt Mail Client       [${use_mutt}]")
    fi
    [ "${have_ranger}" ] && options+=("Use Ranger File Manager    [${use_ranger}]")
    options+=("Use Audio                  [${audiostat}]")
    options+=("Use Tmux                   [${usetmux}]")
    [ "${have_asciinema}" ] && options+=("Record Tmux Session        [${recordstat}]")
    options+=("Fullscreen Window          [${fullstat}]")
    options+=("Default Web Browser        [${default_browser}]")
    options+=("Kill Tmux Sessions")
    options+=("Quit")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
          "Run ${show_comm} in XFCE4 Terminal",*|*,"Run ${show_comm} in XFCE4 Terminal")
              XFCE4=1
              TILIX=
              GNOME=
              RETRO=
              CURRENT=
              break
              ;;
          "Run ${show_comm} in Gnome Terminal",*|*,"Run ${show_comm} in Gnome Terminal")
              GNOME=1
              XFCE4=
              TILIX=
              RETRO=
              CURRENT=
              break
              ;;
          "Run ${show_comm} in Retro Terminal",*|*,"Run ${show_comm} in Retro Terminal")
              RETRO=1
              GNOME=
              XFCE4=
              TILIX=
              CURRENT=
              break
              ;;
          "Run ${show_comm} in Tilix Terminal",*|*,"Run ${show_comm} in Tilix Terminal")
              TILIX=1
              RETRO=
              GNOME=
              XFCE4=
              CURRENT=
              break
              ;;
          "Run ${show_comm} in current window",*|*,"Run ${show_comm} in current window")
              CURRENT=1
              TILIX=
              RETRO=
              GNOME=
              XFCE4=
              break
              ;;
          "Use Btop System Monitor"*,*|*,"Use Btop System Monitor"*)
              COMMAND=btop
              MTITLE="Btop++ System Monitor"
              skip_it_so=1
              break
              ;;
          "Use Disk Usage Analyzer"*,*|*,"Use Disk Usage Analyzer"*)
              COMMAND="gdu ${HOME}"
              MTITLE="Disk Usage Analyzer"
              skip_it_so=1
              break
              ;;
          "Default Web Browser"*,*|*,"Default Web Browser"*)
              if [ "${default_browser}" == "W3M" ]
              then
                if [ "${have_lynx}" ]
                then
                  export BROWSER=lynx
                  default_browser="Lynx"
                else
                  if [ "${SAVED_BROWSER}" ]
                  then
                    export BROWSER="${SAVED_BROWSER}"
                    default_browser="${BROWSER}"
                  else
                    export BROWSER=
                    default_browser="None"
                  fi
                fi
              else
                if [ "${default_browser}" == "Lynx" ]
                then
                  if [ "${SAVED_BROWSER}" ]
                  then
                    export BROWSER="${SAVED_BROWSER}"
                    default_browser="${BROWSER}"
                  else
                    export BROWSER=
                    default_browser="None"
                  fi
                else
                  if [ "${default_browser}" == "None" ]
                  then
                    if [ "${have_w3m}" ]
                    then
                      export BROWSER=w3m
                      default_browser="W3M"
                    else
                      if [ "${have_lynx}" ]
                      then
                        export BROWSER=lynx
                        default_browser="Lynx"
                      else
                        if [ "${SAVED_BROWSER}" ]
                        then
                          export BROWSER="${SAVED_BROWSER}"
                          default_browser="${BROWSER}"
                        else
                          export BROWSER=
                          default_browser="None"
                        fi
                      fi
                    fi
                  else
                    if [ "${BROWSER}" ]
                    then
                      export BROWSER=
                      default_browser="None"
                    else
                      if [ "${have_w3m}" ]
                      then
                        export BROWSER=w3m
                        default_browser="W3M"
                      else
                        if [ "${have_lynx}" ]
                        then
                          export BROWSER=lynx
                          default_browser="Lynx"
                        else
                          if [ "${SAVED_BROWSER}" ]
                          then
                            export BROWSER="${SAVED_BROWSER}"
                            default_browser="${BROWSER}"
                          else
                            export BROWSER=
                            default_browser="None"
                          fi
                        fi
                      fi
                    fi
                  fi
                fi
              fi
              skip_it_so=1
              break
              ;;
          "Use  Lynx  Web  Browser"*,*|*,"Use  Lynx  Web  Browser"*)
              COMMAND="lynx ${WEB_HOME}"
              MTITLE="Lynx Web Browser"
              export BROWSER=lynx
              skip_it_so=1
              break
              ;;
          "Use  W3M   Web  Browser"*,*|*,"Use  W3M   Web  Browser"*)
              COMMAND="w3m -v ${WEB_HOME}"
              MTITLE="W3M Web Browser"
              export BROWSER=w3m
              skip_it_so=1
              break
              ;;
          "Use Lolcat Coloring"*,*|*,"Use Lolcat Coloring"*)
              if [ "${use_lolcat}" == "2" ]
              then
                use_lolcat=
                use_lol="NO"
              else
                if [ "${use_lolcat}" ]
                then
                  use_lolcat=2
                  use_lol="YES+"
                  LOLCAT="${LOLCAT_ANIM}"
                else
                  use_lolcat=1
                  use_lol="YES"
                  LOLCAT="${LOLCAT_NORM}"
                fi
              fi
              skip_it_so=1
              break
              ;;
          "Use Music Player Plus"*,*|*,"Use Music Player Plus"*)
              COMMAND=mpcplus
              MTITLE="Music Player Plus MPD Client"
              skip_it_so=1
              break
              ;;
          "Use Cbftp FTP Client"*,*|*,"Use Cbftp FTP Client"*)
              COMMAND=cbftp
              MTITLE="Cbftp FTP Client"
              skip_it_so=1
              break
              ;;
          "Use Ncftp FTP Client"*,*|*,"Use Ncftp FTP Client"*)
              COMMAND=ncftp
              MTITLE="Ncftp FTP Client"
              skip_it_so=1
              break
              ;;
          "Use Mutt Mail Client"*,*|*,"Use Mutt Mail Client"*)
              COMMAND=mutt
              MTITLE="Mutt Mail Client"
              skip_it_so=1
              break
              ;;
          "Use NeoMutt Mail Client"*,*|*,"Use NeoMutt Mail Client"*)
              COMMAND=neomutt
              MTITLE="NeoMutt Mail Client"
              skip_it_so=1
              break
              ;;
          "Use Ranger File Manager"*,*|*,"Use Ranger File Manager"*)
              COMMAND=ranger
              MTITLE="Ranger File Manager"
              skip_it_so=1
              break
              ;;
          "Run AAlib Demo (Curses mode)",*|*,"Run AAlib Demo (Curses mode)")
              SAVED_DISPLAY="${DISPLAY}"
              export DISPLAY=""
              if [ "${AUDIO}" ]
              then
                bb-tmux -a
              else
                bb-tmux
              fi
              skip_it_so=1
              export DISPLAY="${SAVED_DISPLAY}"
              break
              ;;
          "Run AAlib Demo (X11 mode)",*|*,"Run AAlib Demo (X11 mode)")
              if [ "${AUDIO}" ]
              then
                bb-tmux -a
              else
                bb-tmux
              fi
              skip_it_so=1
              break
              ;;
          "Phase of the Moon",*|*,"Phase of the Moon")
              curl wttr.in/Moon 2> /dev/null | sed '$ d'
              read -p "Press Enter to continue" answer
              skip_it_so=1
              break
              ;;
          "Weather Report",*|*,"Weather Report")
              curl wttr.in?format=v2 2> /dev/null | sed '$ d'
              read -p "Press Enter to continue" answer
              skip_it_so=1
              break
              ;;
          "Run Speed Test",*|*,"Run Speed Test")
              speedtest-cli
              skip_it_so=1
              break
              ;;
          "Run Twitter Client",*|*,"Run Twitter Client")
              # For 24-bit color image support, run with the '-p24' option
              # rainbowstream -p24
              rainbowstream
              skip_it_so=1
              break
              ;;
          "Search the Web",*|*,"Search the Web")
              ddgr
              skip_it_so=1
              break
              ;;
          "Show Mapscii World Map",*|*,"Show Mapscii World Map")
              mapscii
              skip_it_so=1
              break
              ;;
          "Show MusicPlayerPlus Menu",*|*,"Show MusicPlayerPlus Menu")
              [ "${use_figlet}" ] && {
                select_font MusicPlayer
                if [ "${use_lolcat}" ]
                then
                  figlet -c -d "${FIG_FONTS}" -f "${USE_FONT}" -k -t ${FIG_TEXT} | ${LOLCAT}
                else
                  figlet -c -d "${FIG_FONTS}" -f "${USE_FONT}" -k -t ${FIG_TEXT}
                fi
              }
              mpplus -i
              clear
              skip_it_so=1
              break
              ;;
          "Show RoonCommandLine Menu",*|*,"Show RoonCommandLine Menu")
              [ "${use_figlet}" ] && {
                select_font Roon
                if [ "${use_lolcat}" ]
                then
                  figlet -c -d "${FIG_FONTS}" -f "${USE_FONT}" -k -t ${FIG_TEXT} | ${LOLCAT}
                else
                  figlet -c -d "${FIG_FONTS}" -f "${USE_FONT}" -k -t ${FIG_TEXT}
                fi
              }
              roon
              clear
              skip_it_so=1
              break
              ;;
          "Show System Info",*|*,"Show System Info")
              if [ "${use_lolcat}" ]
              then
                neofetch | ${LOLCAT}
              else
                neofetch
              fi
              read -p "Press Enter to continue" answer
              skip_it_so=1
              break
              ;;
          "ASCIImatics Animations",*|*,"ASCIImatics Animations")
              clear
              printf "\n\n\n"
              show_animation_menu
              skip_it_so=1
              break
              ;;
          "Ascii Art Slide Shows",*|*,"Ascii Art Slide Shows")
              clear
              printf "\n\n\n"
              show_art_menu
              skip_it_so=1
              break
              ;;
          "Kill Tmux Sessions",*|*,"Kill Tmux Sessions")
              kill_tmux_sessions
              skip_it_so=1
              break
              ;;
          "Use Tmux"*,*|*,"Use Tmux"*)
              if [ "${TMUX}" ]
              then
                TMUX=
                RECORD=
              else
                TMUX=1
              fi
              skip_it_so=1
              break
              ;;
          "Record Tmux Session"*,*|*,"Record Tmux Session"*)
              if [ "${RECORD}" ]
              then
                RECORD=
              else
                RECORD=1
                TMUX=1
              fi
              if [ "${RECORD}" ]
              then
                COMMAND_TMUX="${COMMAND_TMUX} -r"
              else
                COMMAND_TMUX=`echo ${COMMAND_TMUX} | sed -e "s/ -r//"`
              fi
              skip_it_so=1
              break
              ;;
          "Use Audio"*,*|*,"Use Audio"*)
              if [ "${AUDIO}" ]
              then
                AUDIO=
              else
                AUDIO=1
              fi
              if [ "${AUDIO}" ]
              then
                ASCSPLASH="${ASCSPLASH} -a"
                ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -a"
              else
                ASCSPLASH=`echo ${ASCSPLASH} | sed -e "s/ -a//"`
                ASCSPLASH_TMUX=`echo ${ASCSPLASH_TMUX} | sed -e "s/ -a//"`
              fi
              skip_it_so=1
              break
              ;;
          "Fullscreen Window"*,*|*,"Fullscreen Window"*)
              if [ "${FULLSCREEN}" ]
              then
                FULLSCREEN=
              else
                FULLSCREEN=1
              fi
              skip_it_so=1
              break
              ;;
          "Quit",*|*,"Quit"|"quit",*|*,"quit")
              printf "\nExiting\n"
              exit 0
              ;;
      esac
      REPLY=
    done
    [ "${skip_it_so}" ] || {
      make_it_so
      init_vars
    }
  done
}

init_vars() {
  VTITLE="Spectrum Visualizer"
  COMMAND_TMUX="btop-tmux"
  ASCSPLASH="asciisplash"
  ASCSPLASH_TMUX="asciisplash-tmux"

  FULLSCREEN=
  INTERACTIVE=
  RECORD=
  SPLASH=
  TMUX_ASC=
  TMUX_SPLASH=
}

init_vars
# Without any arguments, bring up interactive dialog menu
[ $# -eq 0 ] && INTERACTIVE=1
have_btop=`type -p btop`
have_neomutt=`type -p neomutt`
have_mutt=`type -p mutt`
have_ranger=`type -p ranger`
have_retro=`type -p cool-retro-term`
have_tilix=`type -p tilix`
have_asciiart=`type -p asciiart`
have_asciijulia=`type -p asciijulia`
have_asciiplasma=`type -p asciiplasma`
have_asciimpplus=`type -p asciimpplus`
have_asciinema=`type -p asciinema`
have_bb=`type -p bb-tmux`
have_curl=`type -p curl`
have_ddgr=`type -p ddgr`
have_figlet=`type -p figlet`
have_gdu=`type -p gdu`
have_ncdu=`type -p ncdu`
have_mapscii=`type -p mapscii`
have_mpcplus=`type -p mpcplus`
have_mpplus=`type -p mpplus`
have_neo=`type -p neofetch`
have_cbftp=`type -p cbftp`
have_ncftp=`type -p ncftp`
have_lolcat=`type -p lolcat`
have_rainbow=`type -p rainbowstream`
have_roon=`type -p roon`
have_speed=`type -p speedtest-cli`
have_splash=`type -p asciisplash`
have_showascii=`type -p show_ascii_art`
have_xfce4=`type -p xfce4-terminal`
have_gnome=`type -p gnome-terminal`
have_lynx=`type -p lynx`
have_w3m=`type -p w3m`
use_lolcat=
use_lol="NO"
if [ "${have_figlet}" ]
then
  use_figlet=1
  [ -d "${FIG_FONTS}" ] || {
    if [ -d "${HOME_FIG_FONTS}" ]
    then
      FIG_FONTS="${HOME_FIG_FONTS}"
    else
      use_figlet=
    fi
  }
else
  use_figlet=
fi

SAVED_BROWSER=
if [ "${BROWSER}" ]
then
  [ "${BROWSER}" == "w3m" ] || [ "${BROWSER}" == "lynx" ] || {
    # The user set a custom BROWSER env var
    SAVED_BROWSER="${BROWSER}"
  }
else
  if [ "${have_lynx}" ]
  then
    [ "${BROWSER}" ] || export BROWSER=lynx
  else
    [ "${have_w3m}" ] && {
      [ "${BROWSER}" ] || export BROWSER=w3m
    }
  fi
fi

cycle=
geometry=
use_term=1
show_neofetch=
SLIDESHOW=
while getopts "Aabc:CdfFgG:iIjJklL:mMn:NpP:rRSs:tTvV:wxXyzu" flag; do
  case $flag in
    A)
      ASCSPLASH="${ASCSPLASH} -i"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l art"
      ;;
    a)
      AUDIO=1
      ASCSPLASH="${ASCSPLASH} -a"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -a"
      ;;
    b)
      ASCSPLASH="${ASCSPLASH} -b"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -b"
      ;;
    C)
      cycle=1
      ;;
    c)
      COMMAND="${OPTARG}"
      case "${COMMAND}" in
      maps|Maps)
          [ "${have_mapscii}" ] && mapscii
          break
          ;;
      moon|Moon)
          [ "${have_curl}" ] && {
            curl wttr.in/Moon 2> /dev/null | sed '$ d'
            read -p "Press Enter to continue" answer
          }
          break
          ;;
      search|Search)
          [ "${have_ddgr}" ] && ddgr
          break
          ;;
      speed|Speed)
          [ "${have_speed}" ] && speedtest-cli
          break
          ;;
      twitter|Twitter)
          [ "${have_rainbow}" ] && rainbowstream
          break
          ;;
      weather|Weather)
          break
          [ "${have_curl}" ] && {
            curl wttr.in?format=v2 2> /dev/null | sed '$ d'
            read -p "Press Enter to continue" answer
          }
          ;;
      *)
          FIRST=`echo ${COMMAND} | awk ' { print $1 } '`
          MTITLE="Asciiville ${COMMAND}"
          type -p "${FIRST}" > /dev/null || {
            not_in_path ${FIRST} -c
            if [ "${have_btop}" ]
            then
              echo "Continuing, using btop rather than ${COMMAND}."
              COMMAND=btop
              MTITLE="Btop++ System Monitor"
            else
              if [ "${have_lynx}" ]
              then
                echo "Continuing, using lynx rather than ${COMMAND}."
                COMMAND="lynx ${WEB_HOME}"
                MTITLE="Lynx Web Browser"
              else
                echo "Continuing, using asciiplasma rather than ${COMMAND}."
                COMMAND=asciiplasma
                MTITLE="ASCIImatics Plasma"
              fi
            fi
          }
          break
          ;;
      esac
      ;;
    d)
      COMMAND="gdu ${HOME}"
      MTITLE="Disk Usage Analyzer"
      [ "${have_gdu}" ] || {
        not_in_path gdu -d
        if [ "${have_ncdu}" ]
        then
          echo "Continuing, using ncdu rather than gdu."
          COMMAND="ncdu ${HOME}"
        else
          if [ "${have_btop}" ]
          then
            echo "Continuing, using btop rather than ${COMMAND}."
            COMMAND=btop
            MTITLE="Btop++ System Monitor"
          else
            if [ "${have_ranger}" ]
            then
              echo "Continuing, using ranger rather than ${COMMAND}."
              COMMAND=ranger
              MTITLE="Ranger File Manager"
            else
              echo "Continuing, using asciiplasma rather than ${COMMAND}."
              COMMAND=asciiplasma
              MTITLE="ASCIImatics Plasma"
            fi
          fi
        fi
      }
      ;;
    f)
      COMMAND=cbftp
      MTITLE="Cbftp FTP Client"
      [ "${have_cbftp}" ] || {
        if [ "${have_ncftp}" ]
        then
          COMMAND=ncftp
          MTITLE="Ncftp FTP Client"
        else
          not_in_path cbftp -f
          if [ "${have_btop}" ]
          then
            echo "Continuing, using btop rather than ${COMMAND}."
            COMMAND=btop
            MTITLE="Btop++ System Monitor"
          else
            if [ "${have_lynx}" ]
            then
              echo "Continuing, using lynx rather than ${COMMAND}."
              COMMAND="lynx ${WEB_HOME}"
              MTITLE="Lynx Web Browser"
            else
              echo "Continuing, using asciiplasma rather than ${COMMAND}."
              COMMAND=asciiplasma
              MTITLE="ASCIImatics Plasma"
            fi
          fi
        fi
      }
      ;;
    F)
      FULLSCREEN=1
      ;;
    g)
      GNOME=1
      [ "${have_gnome}" ] || {
        GNOME=
        not_in_path gnome-terminal -g
        select_alt_term
      }
      ;;
    G)
      geometry="${OPTARG}"
      ;;
    i)
      INTERACTIVE=1
      ;;
    I)
      [ "${have_neo}" ] && {
        show_neofetch=1
      }
      ;;
    j)
      ASCSPLASH="${ASCSPLASH} -j"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l julia"
      ;;
    J)
      ASCSPLASH="${ASCSPLASH} -J"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -J"
      ;;
    k)
      kill_tmux_sessions
      exit 0
      ;;
    l)
      COMMAND="lynx ${WEB_HOME}"
      MTITLE="Lynx Web Browser"
      [ "${have_lynx}" ] || {
        not_in_path lynx -l
        if [ "${have_w3m}" ]
        then
          echo "Continuing, using w3m rather than lynx."
          COMMAND="w3m -v ${WEB_HOME}"
          MTITLE="W3M Web Browser"
        else
          if [ "${have_btop}" ]
          then
            echo "Continuing, using btop rather than ${COMMAND}."
            COMMAND=btop
            MTITLE="Btop++ System Monitor"
          else
            if [ "${have_ranger}" ]
            then
              echo "Continuing, using ranger rather than ${COMMAND}."
              COMMAND=ranger
              MTITLE="Ranger File Manager"
            else
              echo "Continuing, using asciiplasma rather than ${COMMAND}."
              COMMAND=asciiplasma
              MTITLE="ASCIImatics Plasma"
            fi
          fi
        fi
      }
      ;;
    L)
      [ "${have_lolcat}" ] && {
        use_lolcat=${OPTARG}
        if [ "${use_lolcat}" == "2" ]
        then
          use_lol="YES+"
          LOLCAT="${LOLCAT_ANIM}"
        else
          use_lol="YES"
          LOLCAT="${LOLCAT_NORM}"
        fi
      }
      ;;
    m)
      ASCSPLASH="${ASCSPLASH} -m"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l mpplus"
      ;;
    M)
      COMMAND=mpcplus
      MTITLE="Music Player Plus MPD Client"
      [ "${have_mpcplus}" ] || {
        not_in_path mpcplus -M
        if [ "${have_btop}" ]
        then
          echo "Continuing, using btop rather than ${COMMAND}."
          COMMAND=btop
          MTITLE="Btop++ System Monitor"
        else
          if [ "${have_ranger}" ]
          then
            echo "Continuing, using ranger rather than ${COMMAND}."
            COMMAND=ranger
            MTITLE="Ranger File Manager"
          else
            echo "Continuing, using asciiplasma rather than ${COMMAND}."
            COMMAND=asciiplasma
            MTITLE="ASCIImatics Plasma"
          fi
        fi
      }
      ;;
    n)
      ASCSPLASH="${ASCSPLASH} -c ${OPTARG}"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -c ${OPTARG}"
      ;;
    N)
      ASCSPLASH="${ASCSPLASH} -C"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -t"
      ;;
    p)
      ASCSPLASH="${ASCSPLASH} -p"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l plasma"
      ;;
    P)
      COMMAND_TMUX="${COMMAND_TMUX} -p ${OPTARG}"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l ${OPTARG}"
      ;;
    r)
      RETRO=1
      [ "${have_retro}" ] || {
        not_in_path cool-retro-term -r
        select_alt_term
      }
      ;;
    R)
      [ "${have_asciinema}" ] && {
        RECORD=1
        TMUX=1
        COMMAND_TMUX="${COMMAND_TMUX} -r"
        ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -R"
      }
      ;;
    S)
      SPLASH=1
      ;;
    s)
      ASCSPLASH="${ASCSPLASH} -s ${OPTARG}"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -s ${OPTARG}"
      ;;
    t)
      TILIX=1
      [ "${have_tilix}" ] || {
        TILIX=
        not_in_path tilix -t
        select_alt_term
      }
      ;;
    T)
      TMUX=1
      ;;
    v)
      [ -f "/usr/share/doc/asciiville/VERSION" ] || {
        echo "Asciiville VERSION file not installed"
        exit 1
      }
      . "/usr/share/doc/asciiville/VERSION"
      echo "Asciiville version ${VERSION} release ${RELEASE}"
      exit 0
      ;;
    V)
      SLIDESHOW="${OPTARG}"
      ;;
    w)
      COMMAND="w3m -v ${WEB_HOME}"
      MTITLE="W3M Web Browser"
      [ "${have_w3m}" ] || {
        not_in_path w3m -w
        if [ "${have_lynx}" ]
        then
          echo "Continuing, using lynx rather than w3m."
          COMMAND="lynx ${WEB_HOME}"
          MTITLE="Lynx Web Browser"
        else
          if [ "${have_btop}" ]
          then
            echo "Continuing, using btop rather than ${COMMAND}."
            COMMAND=btop
            MTITLE="Btop++ System Monitor"
          else
            if [ "${have_ranger}" ]
            then
              echo "Continuing, using ranger rather than ${COMMAND}."
              COMMAND=ranger
              MTITLE="Ranger File Manager"
            else
              echo "Continuing, using asciiplasma rather than ${COMMAND}."
              COMMAND=asciiplasma
              MTITLE="ASCIImatics Plasma"
            fi
          fi
        fi
      }
      ;;
    X)
      use_term=
      ;;
    x)
      XFCE4=1
      [ "${have_xfce4}" ] || {
        XFCE4=
        not_in_path xfce4-terminal -x
        select_alt_term
      }
      ;;
    y)
      COMMAND=ranger
      MTITLE="Ranger File Manager"
      [ "${have_ranger}" ] || {
        not_in_path ranger -y
        if [ "${have_btop}" ]
        then
          echo "Continuing, using btop rather than ${COMMAND}."
          COMMAND=btop
          MTITLE="Btop++ System Monitor"
        else
          if [ "${have_lynx}" ]
          then
            echo "Continuing, using lynx rather than ${COMMAND}."
            COMMAND=lynx
            MTITLE="Lynx Web Browser"
          else
            echo "Continuing, using asciiplasma rather than ${COMMAND}."
            COMMAND=asciiplasma
            MTITLE="ASCIImatics Plasma"
          fi
        fi
      }
      ;;
    z)
      COMMAND=neomutt
      MTITLE="NeoMutt Mail Client"
      [ "${have_neomutt}" ] || {
        if [ "${have_mutt}" ]
        then
          COMMAND=mutt
          MTITLE="Mutt Mail Client"
        else
          not_in_path mutt -z
          if [ "${have_btop}" ]
          then
            echo "Continuing, using btop rather than ${COMMAND}."
            COMMAND=btop
            MTITLE="Btop++ System Monitor"
          else
            if [ "${have_lynx}" ]
            then
              echo "Continuing, using lynx rather than ${COMMAND}."
              COMMAND="lynx ${WEB_HOME}"
              MTITLE="Lynx Web Browser"
            else
              echo "Continuing, using asciiplasma rather than ${COMMAND}."
              COMMAND=asciiplasma
              MTITLE="ASCIImatics Plasma"
            fi
          fi
        fi
      }
      ;;
    u)
      usage
      ;;
    esac
done

# The -T option says use tmux, -S says do asciimatics
# If we have both then do asciimatics in tmux
# If just the -T then do command in tmux
[ "${TMUX}" ] && {
  if [ "${SPLASH}" ]
  then
    TMUX_SPLASH=1
  else
    TMUX_ASC=1
  fi
}

# Figure out which terminal emulator to use
[ "${TILIX}" ] || [ "${RETRO}" ] || [ "${GNOME}" ] || [ "${XFCE4}" ] || {
  select_alt_term
}

# Make sure only one terminal is selected
if [ "${XFCE4}" ]
then
  TILIX=
  GNOME=
  RETRO=
else
  if [ "${TILIX}" ]
  then
    GNOME=
    RETRO=
  else
    [ "${GNOME}" ] && RETRO=
  fi
fi

[ "${show_neofetch}" ] && {
  if [ "${use_lolcat}" ]
  then
    neofetch | ${LOLCAT}
  else
    neofetch
  fi
  read -p "Press Enter to continue" answer
}

[ "${SLIDESHOW}" ] && {
  if [ "${cycle}" ]
  then
    cycarg="-c"
  else
    cycarg=
  fi
  if [ "${use_lolcat}" ]
  then
    lolarg="-l ${use_lolcat}"
  else
    lolarg=
  fi
  if [ "${AUDIO}" ]
  then
    audarg="-P"
  else
    audarg=
  fi
  showargs="-C ${cycarg} ${lolarg} ${audarg}"
  if [ "${XFCE4}" ]
  then
    if [ "${geometry}" ]
    then
      xfce4-terminal --geometry=${geometry} \
                     --font="Monospace Regular" \
                     --color-bg=Black \
                     --command="show_ascii_art ${showargs} -s ${SLIDESHOW}"
    else
      xfce4-terminal --fullscreen \
                     --font="Monospace Regular" \
                     --color-bg=Black \
                     --command="show_ascii_art ${showargs} -s ${SLIDESHOW}"
    fi
  else
    if [ "${TILIX}" ]
    then
      if [ "${geometry}" ]
      then
        tilix --geometry=${geometry} \
              --profile=Asciiville \
              --command="show_ascii_art ${showargs} -s ${SLIDESHOW}"
      else
        tilix --full-screen \
              --window-style=borderless \
              --profile=Asciiville \
              --command="show_ascii_art ${showargs} -s ${SLIDESHOW}"
      fi
    else
      if [ "${geometry}" ]
      then
        gnome-terminal --window --geometry=${geometry} \
                       --profile=Asciiville \
                       -- show_ascii_art ${showargs} -s ${SLIDESHOW}
      else
        gnome-terminal --window --full-screen \
                       --profile=Asciiville \
                       -- show_ascii_art ${showargs} -s ${SLIDESHOW}
      fi
    fi
  fi
}

[ "${INTERACTIVE}" ] && {
  [ "${have_lolcat}" ] && {
    use_lolcat=2
    use_lol="YES+"
    LOLCAT="${LOLCAT_ANIM}"
  }
  clear
  echo ""
  show_main_menu
}

make_it_so
