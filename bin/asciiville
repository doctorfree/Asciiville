#!/bin/bash
#
# asciiville - front-end for a variety of terminal and/or `tmux` sessions.
#
#     The `asciiville` command can be used to invoke:
#
#     * The lightweight character based system monitor, `btop`
#     * The lightweight character based web browser, `lynx` or `w3m`
#     * The lightweight character based mail client, `neomutt`
#     * The lightweight character based file manager, `ranger`
#     * One or more terminal emulators running a specified command
#     * A tmux session
#     * A network upload/download speed test
#     * A web search
#     * Character based ASCII art
#     * Character based world map
#     * Command line character based Twitter client
#     * Display system info
#     * MusicPlayerPlus or RoonCommandLine menus
#     * Any character based client the user wishes to run
#     * One of several asciimatics animations optionally accompanied by audio
#
# Written by Ronald Joe Record <ronaldrecord@gmail.com>
# April, 2022
#

BOLD=$(tput bold 2>/dev/null)
NORM=$(tput sgr0 2>/dev/null)
PLEASE="Please enter your"
COMMAND=btop
platform=`uname -s`
if [ "${platform}" == "Darwin" ]
then
  TOP="/usr/local"
else
  TOP="/usr"
fi
FIG_FONTS="${TOP}/share/figlet-fonts"
HOME_FIG_FONTS="${HOME}/src/Asciiville/share/figlet-fonts"
FIG_TEXT="Asciiville"
USE_FONT="Standard"
WEB_HOME="https://github.com/doctorfree/Asciiville#readme"
LOLCAT_NORM="lolcat"
LOLCAT_ANIM="lolcat --animate --speed=60.0"
LOLCAT="${LOLCAT_ANIM}"
MTITLE="Asciiville"
ASHARE=${TOP}/share/asciiville
DSHARE=${TOP}/share/doc/asciiville
ARTDIR=${ASHARE}/art
MUSEDIR=${ASHARE}/music
TOOLSBIN=${ASHARE}/tools/bin
SONG="${MUSEDIR}/Chronos.mp3"
ALTSONG="${MUSEDIR}/Epic_Dramatic-Yuriy_Bespalov.wav"
shuffle=
length=0
show_interval=5
art_font_size=4
txt_font_size=20
re='^[0-9]+$'
# fifo name
fifo_name="/tmp/asciiville_$$"
# Kitty socket
sock_name="/tmp/asckitty_$$"

platform=`uname -s`
if [ "${platform}" == "Darwin" ]
then
  KITTY_QUIT_OPT="--override macos_quit_when_last_window_closed=yes"
else
  KITTY_QUIT_OPT=
fi

# Some configuration can be maintained here
CONFIG="${HOME}/.config/asciiville/config"
[ -f ${CONFIG} ] && . ${CONFIG}

# Backwards compatibility with older Asciiville config
[ -d "${ARTDIR}" ] || {
  LOC_ARTDIR=`echo "${ARTDIR}" | sed -e "s%/usr/%/usr/local/%"`
  [ -d "${LOC_ARTDIR}" ] && ARTDIR="${LOC_ARTDIR}"
}
[ -d "${MUSEDIR}" ] || {
  LOC_MUSEDIR=`echo "${MUSEDIR}" | sed -e "s%/usr/%/usr/local/%"`
  [ -d "${LOC_MUSEDIR}" ] && MUSEDIR="${LOC_MUSEDIR}"
}
saved_art_size=${art_font_size}
saved_txt_size=${txt_font_size}

if [ `echo $PATH | grep -c /.local/bin` -ne "1" ]
then
  PATH="$PATH:$HOME/.local/bin"
fi
if [ `echo $PATH | grep -c /usr/local/bin` -ne "1" ]
then
  PATH="$PATH:/usr/local/bin"
fi
if [ `echo $PATH | grep -c /usr/local/games` -ne "1" ]
then
  PATH="$PATH:/usr/local/games"
fi
export PATH

usage() {
  if [ "${have_rich}" ]
  then
    rich "[bold]Usage:[/] [bold italic green]asciiville[/] [cyan]\[-a] \[-A] \[-b] \[-c[/] [yellow]command[/][cyan]] \[-C] \[-d] \[-D[/] [yellow]delay[/][cyan]][/]" --print
    rich "    [cyan]\[-E[/] [yellow]len[/][cyan]] \[-f] \[-F] \[-g] \[-i] \[-I] \[-jJ] \[-k] \[-K] \[-l] \[-L[/] [yellow]level[/][cyan]][/]" --print
    rich "    [cyan]\[-m] \[-M] \[-N] \[-n[/] [yellow]num[/][cyan]] \[-p] \[-P[/] [yellow]script[/][cyan]] \[-r] \[-R] \[-s[/] [yellow]song[/][cyan]][/]" --print
    rich "    [cyan]\[-S] \[-t] \[-T] \[-U] \[-v] \[-V[/] [yellow]show[/][cyan]] \[-w] \[-W] \[-x] \[-X] \[-y][/]" --print
    rich "    [cyan]\[-Y] \[-z] \[-Z] \[-u] \[[/][yellow]file1 \[file2 ...][/][cyan]][/]" --print
    printf "\n"
    rich "[bold]Terminal/Command options:[/]" --print
    rich "    [cyan]-c[/] [yellow]'command'[/] indicates use '[bold]command[/]'" --print
    rich "        If '[bold]command[/]' is keyword '[magenta]endo[/]' then [italic]display ascii fluid simulation[/]" --print
    rich "        If '[bold]command[/]' is keyword '[magenta]maps[/]' then [italic]display a map using mapscii[/]" --print
    rich "        If '[bold]command[/]' is keyword '[magenta]moon[/]' then [italic]display the phase of the Moon[/]" --print
    rich "        If '[bold]command[/]' is keyword '[magenta]news[/]' then [italic]display RSS news feeds[/]" --print
    rich "        If '[bold]command[/]' is keyword '[magenta]pokemon[/]' then [italic]display a Pokemon[/]" --print
    rich "        If '[bold]command[/]' is keyword '[magenta]reddit[/]' then [italic]display Reddit terminal UI[/]" --print
    rich "        If '[bold]command[/]' is keyword '[magenta]search[/]' then [italic]a web search is performed[/]" --print
    rich "        If '[bold]command[/]' is keyword '[magenta]speed[/]' then [italic]a speed test is performed[/]" --print
    rich "        If '[bold]command[/]' is keyword '[magenta]splash[/]' then [italic]show Asciiville splash screen[/]" --print
    rich "        If '[bold]command[/]' is keyword '[magenta]translate[/]' then [italic]the translation tool is run[/]" --print
    rich "        If '[bold]command[/]' is keyword '[magenta]twitter[/]' then [italic]a Twitter client is run[/]" --print
    rich "        If '[bold]command[/]' is keyword '[magenta]weather[/]' then [italic]display a weather report[/]" --print
    rich "        Otherwise, '[bold]command[/]' will be executed in a terminal window" --print
    rich "    [cyan]-d[/] indicates [italic] use disk usage analyzer as default command[/]" --print
    rich "    [cyan]-f[/] indicates [italic] use cbftp/ncftp as the default command[/]" --print
    rich "    [cyan]-F[/] indicates [italic] fullscreen display[/]" --print
    rich "    [cyan]-g[/] indicates [italic] use gnome terminal emulator[/]" --print
    rich "    [cyan]-i[/] indicates [italic] start asciiville in interactive mode[/]" --print
    rich "    [cyan]-I[/] indicates [italic] display system info[/]" --print
    rich "    [cyan]-k[/] indicates [italic] use kitty terminal emulator[/]" --print
    rich "    [cyan]-l[/] indicates [italic] use lynx web browser as the default command[/]" --print
    rich "    [cyan]-L[/] [yellow]'level'[/] lolcat coloring level" --print
    rich "       [yellow]'level'[/] can be '[yellow]0[/]' (off), '[yellow]1[/]' (on), or '[yellow]2[/]' (animate)" --print
    rich "    [cyan]-r[/] indicates [italic] use retro terminal emulator[/]" --print
    rich "    [cyan]-t[/] indicates [italic] use tilix terminal emulator[/]" --print
    rich "    [cyan]-U[/] indicates [italic] set command to Ninvaders[/]" --print
    rich "    [cyan]-w[/] indicates [italic] use w3m web browser as the default command[/]" --print
    rich "    [cyan]-W[/] indicates [italic] use cmatrix as the default command[/]" --print
    rich "    [cyan]-x[/] indicates [italic] use xfce4 terminal emulator[/]" --print
    rich "    [cyan]-X[/] indicates [italic] run commands in current terminal window[/]" --print
    rich "    [cyan]-y[/] indicates [italic] use ranger file manager as the default command[/]" --print
    rich "    [cyan]-Y[/] indicates [italic] use NetHack dungeon game as the default command[/]" --print
    rich "    [cyan]-z[/] indicates [italic] use neomutt email client as the default command[/]" --print
    rich "[bold]Slideshow/ASCIImatics animation options:[/]" --print
    rich "    [cyan]-A[/] indicates [italic] use Asciiville scenes in ASCIImatics display[/]" --print
    rich "    [cyan]-a[/] indicates [italic] play audio during display[/]" --print
    rich "    [cyan]-b[/] indicates [italic] use backup audio during display[/]" --print
    rich "    [cyan]-C[/] indicates [italic] cycle slideshow endlessly[/] (Ctrl-c to exit show)" --print
    rich "    [cyan]-D[/] [yellow]'delay'[/] specifies [yellow]delay[/], in seconds, between art display (default 5)" --print
    rich "    [cyan]-E[/] [yellow]'len'[/] indicates [italic] random slideshow of length [yellow]'len'[/] (0 infinite)[/]" --print
    rich "    [cyan]-j[/] indicates [italic] use Julia Set scenes in ASCIImatics display[/]" --print
    rich "    [cyan]-J[/] indicates [italic] Julia Set with several runs using different parameters[/]" --print
    rich "    [cyan]-m[/] indicates [italic] use MusicPlayerPlus scenes in ASCIImatics display[/]" --print
    rich "    [cyan]-M[/] indicates [italic] use MusicPlayerPlus MPD client as default command[/]" --print
    rich "    [cyan]-n[/] [yellow]num[/] specifies the number of times to cycle ASCIImatics scenes" --print
    rich "    [cyan]-N[/] indicates [italic] use alternate comments in Plasma ASCIImatics scenes[/]" --print
    rich "    [cyan]-p[/] indicates [italic] use Plasma scenes in ASCIImatics display[/]" --print
    rich "    [cyan]-P[/] [yellow]script[/] specifies the ASCIImatics script to run" --print
    rich "    [cyan]-s[/] [yellow]'song'[/] specifies a song to accompany an ASCIImatics animation" --print
    rich "       [yellow]'song'[/] can be the full pathname to an audio file or a relative" --print
    rich "       pathname to an audio file in the MPD music library or ~/Music/" --print
    rich "    [cyan]-S[/] indicates [italic] display ASCIImatics splash animation[/]" --print
    rich "    [cyan]-V[/] [yellow]'show'[/] displays an ascii art slide show" --print
    rich "       [yellow]'show'[/] can be one of [yellow]'Art', 'Doctorwhen', 'Dragonflies',[/]" --print
    rich "       [yellow]'Fractals', 'Friends', 'Iterated', 'Lyapunov', 'Nature',[/]" --print
    rich "       [yellow]'Owls', 'Space', 'Vintage', 'Wallpapers', 'Waterfalls',[/]" --print
    rich "       the name of a custom ascii art folder, the slideshow keyword" --print
    rich "       [yellow]'files'[/] which indicates [italic] display a slideshow using the ascii[/]" --print
    rich "       [italic]art files provided on the command line[/], or the slideshow" --print
    rich "       argument [yellow]'files=/path/to/file'[/] which indicates [italic] read the list[/]" --print
    rich "       [italic]of slideshow files from the file[/] [yellow]'/path/to/file'[/]" --print
    rich "    [cyan]-Z[/] indicates [italic] do not play audio during slideshow/animation[/]" --print
    printf "\n"
    rich "[bold]General options:[/]" --print
    rich "    [cyan]-K[/] indicates [italic] kill Asciiville tmux sessions and ASCIImatics scripts[/]" --print
    rich "    [cyan]-R[/] indicates [italic] record tmux session with asciinema[/]" --print
    rich "    [cyan]-T[/] indicates [italic] use a tmux session for either ASCIImatics or command[/]" --print
    rich "    [cyan]-v[/] displays the Asciiville version and exits" --print
    rich "    [cyan]-u[/] displays this usage message and exits" --print
    printf "\n"
    rich "Remaining arguments are filenames of ascii art to display" --print
    rich "    Ascii art filenames can be relative to the Ascii Art Gallery folder" --print
    rich "    and need not specify the filename suffix. For example:" --print
    rich "        [green]asciiville[/] [cyan]-L[/] [yellow]2[/] [magenta]Friends/tux Doctorwhen/Capitola_Village_Vivid[/]" --print
    printf "\n"
    rich "Invoked without any arguments, [green]'asciiville'[/] will display an interactive menu" --print
    printf "\n"
    rich "Type [green]'man asciiville'[/] for detailed usage info on Asciiville" --print
    rich "Type [green]'man asciisplash'[/] for detailed usage info on Asciisplash" --print
    rich "Type [green]'man btop'[/] for detailed usage info on the Btop system monitor" --print
    rich "Type [green]'man lynx'[/] for detailed usage info on the Lynx web browser" --print
    rich "Type [green]'man neomutt'[/] for detailed usage info on the NeoMutt email client" --print
    rich "Type [green]'man cbftp'[/] for detailed usage info on the Cbftp FTP client" --print
    rich "Type [green]'man ranger'[/] for detailed usage info on the Ranger file manager" --print
    printf "\n"
  else
    printf "\nUsage: asciiville [-a] [-A] [-b] [-c command] [-C] [-d] [-D delay]"
    printf "\n\t[-E len] [-f] [-F] [-g] [-i] [-I] [-jJ] [-k] [-K] [-l] [-L level]"
    printf "\n\t[-m] [-M] [-N] [-n num] [-p] [-P script] [-r] [-R] [-s song]"
    printf "\n\t[-S] [-t] [-T] [-U] [-v] [-V show] [-w] [-W] [-x] [-X] [-y]"
    printf "\n\t[-Y] [-z] [-Z] [-u] [file1 [file2 ...]]\n"
    printf "\nTerminal/Command options:"
    printf "\n\t-c 'command' indicates use 'command'"
    printf "\n\t\tIf 'command' is keyword 'endo' then display ascii fluid simulation"
    printf "\n\t\tIf 'command' is keyword 'maps' then display a map using mapscii"
    printf "\n\t\tIf 'command' is keyword 'moon' then display the phase of the Moon"
    printf "\n\t\tIf 'command' is keyword 'news' then display RSS news feeds"
    printf "\n\t\tIf 'command' is keyword 'pokemon' then display a Pokemon"
    printf "\n\t\tIf 'command' is keyword 'reddit' then display Reddit terminal UI"
    printf "\n\t\tIf 'command' is keyword 'search' then a web search is performed"
    printf "\n\t\tIf 'command' is keyword 'speed' then a speed test is performed"
    printf "\n\t\tIf 'command' is keyword 'splash' then show Asciiville splash screen"
    printf "\n\t\tIf 'command' is keyword 'translate' then the translation tool is run"
    printf "\n\t\tIf 'command' is keyword 'twitter' then a Twitter client is run"
    printf "\n\t\tIf 'command' is keyword 'weather' then display a weather report"
    printf "\n\t\tOtherwise, 'command' will be executed in a terminal window"
    printf "\n\t-d indicates use disk usage analyzer as default command"
    printf "\n\t-f indicates use cbftp/ncftp as the default command"
    printf "\n\t-F indicates fullscreen display"
    printf "\n\t-g indicates use gnome terminal emulator"
    printf "\n\t-i indicates start asciiville in interactive mode"
    printf "\n\t-I indicates display system info"
    printf "\n\t-k indicates use kitty terminal emulator"
    printf "\n\t-l indicates use lynx web browser as the default command"
    printf "\n\t-L 'level' lolcat coloring level"
    printf "\n\t   'level' can be '0' (off), '1' (on), or '2' (animate)"
    printf "\n\t-r indicates use retro terminal emulator"
    printf "\n\t-t indicates use tilix terminal emulator"
    printf "\n\t-U indicates set command to Ninvaders"
    printf "\n\t-w indicates use w3m web browser as the default command"
    printf "\n\t-W indicates use cmatrix as the default command"
    printf "\n\t-x indicates use xfce4 terminal emulator"
    printf "\n\t-X indicates run commands in current terminal window"
    printf "\n\t-y indicates use ranger file manager as the default command"
    printf "\n\t-Y indicates use NetHack dungeon game as the default command"
    printf "\n\t-z indicates use neomutt email client as the default command"
    printf "\nSlideshow/ASCIImatics animation options:"
    printf "\n\t-A indicates use Asciiville scenes in ASCIImatics display"
    printf "\n\t-a indicates play audio during display"
    printf "\n\t-b indicates use backup audio during display"
    printf "\n\t-C indicates cycle slideshow endlessly (Ctrl-c to exit show)"
    printf "\n\t-D 'delay' specifies delay, in seconds, between art display (default 5)"
    printf "\n\t-E 'len' indicates random slideshow of length 'len' (0 infinite)"
    printf "\n\t-j indicates use Julia Set scenes in ASCIImatics display"
    printf "\n\t-J indicates Julia Set with several runs using different parameters"
    printf "\n\t-m indicates use MusicPlayerPlus scenes in ASCIImatics display"
    printf "\n\t-M indicates use MusicPlayerPlus MPD client as default command"
    printf "\n\t-n num specifies the number of times to cycle ASCIImatics scenes"
    printf "\n\t-N indicates use alternate comments in Plasma ASCIImatics scenes"
    printf "\n\t-p indicates use Plasma scenes in ASCIImatics display"
    printf "\n\t-P script specifies the ASCIImatics script to run"
    printf "\n\t-s 'song' specifies a song to accompany an ASCIImatics animation"
    printf "\n\t   'song' can be the full pathname to an audio file or a relative"
    printf "\n\t   pathname to an audio file in the MPD music library or ~/Music/"
    printf "\n\t-S indicates display ASCIImatics splash animation"
    printf "\n\t-V 'show' displays an ascii art slide show"
    printf "\n\t   'show' can be one of 'Art', 'Doctorwhen', 'Dragonflies',"
    printf "\n\t   'Fractals', 'Friends', 'Iterated', 'Lyapunov', 'Nature',"
    printf "\n\t   'Owls', 'Space', 'Vintage', 'Wallpapers', 'Waterfalls',"
    printf "\n\t   the name of a custom ascii art folder, the slideshow keyword"
    printf "\n\t   'files' which indicates display a slideshow using the ascii"
    printf "\n\t   art files provided on the command line, or the slideshow"
    printf "\n\t   argument 'files=/path/to/file' which indicates read the list"
    printf "\n\t   of slideshow files from the file '/path/to/file'"
    printf "\n\t-Z indicates do not play audio during slideshow/animation\n"
    printf "\nGeneral options:"
    printf "\n\t-K indicates kill Asciiville tmux sessions and ASCIImatics scripts"
    printf "\n\t-R indicates record tmux session with asciinema"
    printf "\n\t-T indicates use a tmux session for either ASCIImatics or command"
    printf "\n\t-v displays the Asciiville version and exits"
    printf "\n\t-u displays this usage message and exits\n"
    printf "\nRemaining arguments are filenames of ascii art to display"
    printf "\n\tAscii art filenames can be relative to the Ascii Art Gallery folder"
    printf "\n\tand need not specify the filename suffix. For example:"
    printf "\n\t\tasciiville -L 2 Friends/tux Doctorwhen/Capitola_Village_Vivid\n"
    printf "\nInvoked without any arguments, 'asciiville' will display an interactive menu\n"
    printf "\nType 'man asciiville' for detailed usage info on Asciiville"
    printf "\nType 'man asciisplash' for detailed usage info on Asciisplash"
    printf "\nType 'man btop' for detailed usage info on the Btop system monitor"
    printf "\nType 'man lynx' for detailed usage info on the Lynx web browser"
    printf "\nType 'man neomutt' for detailed usage info on the NeoMutt email client"
    printf "\nType 'man cbftp' for detailed usage info on the Cbftp FTP client"
    printf "\nType 'man ranger' for detailed usage info on the Ranger file manager\n"
  fi
  exit 1
}

check_display() {
  consolemode=0
  if [ "${DISPLAY}" ]
  then
    # First check if on a console screen
    have_tty=`type -p tty`
    [ "${have_tty}" ] && {
      tty=$(tty)
      echo "${tty}" | grep /dev/tty > /dev/null && consolemode=1
      echo "${tty}" | grep /dev/con > /dev/null && consolemode=1
    }
    # Next check if this is an SSH session
    [ ${consolemode} -eq 0 ] && {
      # Check if this is an SSH session
      [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ] && consolemode=1
    }
  else
    consolemode=1
  fi
  return ${consolemode}
}

kill_tmux_sessions() {
  SESSIONS="asciiville asciisplash"
  for session in ${SESSIONS}
  do
    ps -ef | grep tmux | grep ${session} > /dev/null && {
      tmux kill-session -t ${session}
    }
  done
  ASCIIS="asciiart asciijulia asciimpplus asciiplasma"
  for ascii in ${ASCIIS}
  do
    ps -ef | grep -v grep | grep ${ascii} > /dev/null && {
      ps -ef | grep -v grep | grep ${ascii} | while IFS= read -r line
      do
        pid=`echo "$line" | awk ' { print $2 } '`
        kill ${pid}
      done 
    }
  done
}

# colorize man pages
man () {
  LESS_TERMCAP_mb=$'\e[1;32m' \
  LESS_TERMCAP_md=$'\e[1;32m' \
  LESS_TERMCAP_me=$'\e[0m' \
  LESS_TERMCAP_se=$'\e[0m' \
  LESS_TERMCAP_so=$'\e[01;33m' \
  LESS_TERMCAP_ue=$'\e[0m' \
  LESS_TERMCAP_us=$'\e[1;4;31m' \
  command man "$@"
}

not_in_path() {
  echo "Option \'$2\' indicates use $1 as the default command."
  echo "However, $1 is not installed or not in your path."
  echo "You may be able to install $1 using apt or dnf as follows:"
  printf "\n\n\tsudo apt install $1\nor"
  printf "\n\tsudo dnf install $1\n\n"
}

generate_art() {
  image_dir=
  select_input_dir
  [ "${image_dir}" ] && {
    ascii_dir=
    select_output_dir
    [ "${ascii_dir}" ] && {
      save_config
      echo "Selected image input directory = ${image_dir}"
      echo "Selected ascii art output directory = ${ascii_dir}"
      while true
      do
        read -p "Generate ASCII Art with these selections? (y/n) " answer
        case ${answer} in
          [Yy]* )
            show_ascii_art -b -I "${image_dir}" -O "${ascii_dir}"
            while true
            do
              read -p "View slideshow of generated ascii art? (y/n) " viewslides
              case ${viewslides} in
                [Yy]* )
                  showname=`basename "${ascii_dir}"`
                  showdir=`dirname "${ascii_dir}"`
                  play_slide_show "${showname}" "${showdir}"
                  break
                  ;;
                [Nn]* )
                  printf "\nSkipping ascii art slideshow.\n"
                  break
                  ;;
                * ) echo "Please answer 'y' to view slideshow, or 'n' to skip."
                  ;;
              esac
            done
            break
            ;;
          [Nn]* )
            printf "\nSkipping ascii art generation.\n"
            break
            ;;
          * ) echo "Please answer 'y' to select directory, or 'n' to skip."
            ;;
        esac
      done
    }
  }
}

save_config() {
  [ -f ${CONFIG} ] && {
    echo "ARTDIR=${ARTDIR}" > ${CONFIG}
    echo "MUSEDIR=${MUSEDIR}" >> ${CONFIG}
    echo "SONG=${SONG}" >> ${CONFIG}
    echo "ALTSONG=${ALTSONG}" >> ${CONFIG}
    echo "" >> ${CONFIG}
    echo "AUDIO=${AUDIO}" >> ${CONFIG}
    echo "BROWSER=${BROWSER}" >> ${CONFIG}
    echo "COMMAND=\"${COMMAND}\"" >> ${CONFIG}
    echo "FULLSCREEN=${FULLSCREEN}" >> ${CONFIG}
    echo "LOLCAT=\"${LOLCAT}\"" >> ${CONFIG}
    echo "MTITLE=\"${MTITLE}\"" >> ${CONFIG}
    echo "CURRENT=${CURRENT}" >> ${CONFIG}
    echo "GNOME=${GNOME}" >> ${CONFIG}
    echo "RETRO=${RETRO}" >> ${CONFIG}
    echo "TILIX=${TILIX}" >> ${CONFIG}
    echo "KITTY=${KITTY}" >> ${CONFIG}
    echo "XFCE4=${XFCE4}" >> ${CONFIG}
    echo "" >> ${CONFIG}
    echo "shuffle=${shuffle}" >> ${CONFIG}
    echo "length=${length}" >> ${CONFIG}
    echo "use_lolcat=${use_lolcat}" >> ${CONFIG}
    echo "use_lol=${use_lol}" >> ${CONFIG}
    echo "journal=\"${journal}\"" >> ${CONFIG}
    echo "style=\"${style}\"" >> ${CONFIG}
    echo "show_interval=${show_interval}" >> ${CONFIG}
    echo "art_font_size=${art_font_size}" >> ${CONFIG}
    echo "txt_font_size=${txt_font_size}" >> ${CONFIG}
    echo "" >> ${CONFIG}
    echo "defchars='${defchars}'" >> ${CONFIG}
    echo "revchars='${revchars}'" >> ${CONFIG}
    echo "revlong='${revlong}'" >> ${CONFIG}
    echo "longchars='${longchars}'" >> ${CONFIG}
  }
}

set_user_conf() {
  exitcode=$?
  save_config
  rm -f ${fifo_name}

  exit ${exitcode}
}

select_alt_term() {
  if [ "${have_kitty}" ]
  then
    KITTY=1
  else
    if [ "${have_gnome}" ]
    then
      GNOME=1
    else
      if [ "${have_tilix}" ]
      then
        TILIX=1
      else
        if [ "${have_xfce4}" ]
        then
          XFCE4=1
        else
          if [ "${have_retro}" ]
          then
            RETRO=1
          else
            echo "Cannot find a terminal emulator I like. Using current window."
            CURRENT=1
          fi
        fi
      fi
    fi
  fi
}

make_it_so() {
  # Set the command to use
  # Based on command line switches (-S, -T) or menu selections
  AVCOMM="${COMMAND}"
  if [ "${DO_SPLASH}" ]
  then
    if [ "${TMUX_SPLASH}" ]
    then
      AVCOMM="${ASCSPLASH_TMUX}"
    else
      AVCOMM="${ASCSPLASH}"
    fi
    MTITLE="ASCIImatics Animation"
  else
    [ "${TMUX_ASC}" ] && AVCOMM="${COMMAND_TMUX}"
  fi

  # Begin terminal command startup section
  if [ "${CURRENT}" ]
  then
    [ "${FULLSCREEN}" ] && add_fullscreen
    ${AVCOMM}
    [ "${FULLSCREEN}" ] && {
      remove_fullscreen
    }
  else
    if [ "${RETRO}" ]
    then
      if [ "${FULLSCREEN}" ]
      then
        cool-retro-term --fullscreen -e ${AVCOMM} > /dev/null 2>&1 &
      else
        cool-retro-term -e ${AVCOMM} > /dev/null 2>&1 &
      fi
    else
      if [ "${FULLSCREEN}" ]
      then
        if [ "${KITTY}" ]
        then
          kitty --title="${MTITLE}" \
                --start-as fullscreen \
                --override font_size=18 \
                --override draw_minimal_borders=yes \
                --override tab_bar_min_tabs=2 \
                --override startup_session=none \
                ${KITTY_QUIT_OPT} \
                ${AVCOMM} 2> /dev/null &
        else
          if [ "${TILIX}" ]
          then
            tilix --title="${MTITLE}" \
                  --full-screen \
                  --window-style=borderless \
                  --profile=Asciiville \
                  --command="${AVCOMM}" 2> /dev/null &
          else
            if [ "${XFCE4}" ]
            then
              xfce4-terminal --title "${MTITLE}" \
                  --icon=audio-player \
                  --hide-menubar \
                  --hide-toolbar \
                  --hide-scrollbar \
                  --fullscreen \
                  --command="${AVCOMM}" &
            else
              gnome-terminal -t "${MTITLE}" \
                  --hide-menubar \
                  --full-screen \
                  --profile=Asciiville \
                  -- ${AVCOMM} &
            fi
          fi
        fi
      else
        if [ "${KITTY}" ]
        then
          kitty --title="${MTITLE}" \
                --start-as normal \
                --override font_size=18 \
                --override draw_minimal_borders=yes \
                --override initial_window_width=90c \
                --override initial_window_height=28c \
                --override tab_bar_min_tabs=2 \
                --override startup_session=none \
                ${KITTY_QUIT_OPT} \
                ${AVCOMM} 2> /dev/null &
        else
          if [ "${TILIX}" ]
          then
            tilix --title="${MTITLE}" \
                  --window-style=borderless \
                  --geometry=90x28+150+25 \
                  --profile=Asciiville \
                  --command="${AVCOMM}" 2> /dev/null &
          else
            if [ "${XFCE4}" ]
            then
              xfce4-terminal --title "${MTITLE}" \
                --icon=audio-player \
                --hide-menubar \
                --hide-toolbar \
                --hide-scrollbar \
                --geometry 90x28+150+25 \
                --command="${AVCOMM}" &
            else
              gnome-terminal -t "${MTITLE}" \
                  --hide-menubar \
                  --geometry 90x28+150+25 \
                  --profile=Asciiville \
                  -- ${AVCOMM} &
            fi
          fi
        fi
      fi
    fi
  fi
  # End terminal command startup section
}

select_font() {
  # Array with font names
  fonts=("Bolger" "Lean" "sblood" "Slant" "Shadow" "Speed" "Varsity" "Small" "Small Script" "Small Shadow" "Small Slant")
  smallfonts=("Small" "Small Script" "Small Shadow" "Small Slant")

  # Seed random generator
  RANDOM=$$$(date +%s)

  if [ "$2" == "small" ]
  then
    USE_FONT=${smallfonts[ $RANDOM % ${#smallfonts[@]} ]}
  else
    USE_FONT=${fonts[ $RANDOM % ${#fonts[@]} ]}
  fi
  [ "${USE_FONT}" == "Lean" ] && {
    [ "${FULLSCREEN}" ] || {
      while [ "${USE_FONT}" == "Lean" ]
      do
        USE_FONT=${fonts[ $RANDOM % ${#fonts[@]} ]}
      done
    }
  }
  [ -r "${FIG_FONTS}/${USE_FONT}.flf" ] || {
    if [ -r "${FIG_FONTS}/Standard.flf" ]
    then
      USE_FONT="Standard"
    else
      USE_FONT="standard"
    fi
  }

  goBig=
  for font in "${smallfonts[@]}"
  do
    [[ "${USE_FONT}" == "$font" ]] && {
      goBig=1
      break
    }
  done

  case "$1" in
    AsciiAppTerm)
      FIG_TEXT="Apps & Games"
      ;;
    AsciiArt)
      if [ "${goBig}" ]
      then
        FIG_TEXT="Asciiville Art"
      else
        FIG_TEXT="Ascii Art"
      fi
      ;;
    Asciimatics)
      if [ "${goBig}" ]
      then
        FIG_TEXT="Asciimatics"
      else
        FIG_TEXT="Animation"
      fi
      ;;
    Asciiville)
      if [ "${goBig}" ]
      then
        FIG_TEXT="Asciiville"
      else
        FIG_TEXT="Asciiville"
      fi
      ;;
    Help)
      if [ "${goBig}" ]
      then
        FIG_TEXT="Asciiville Help"
      else
        FIG_TEXT="Help"
      fi
      ;;
    Journal)
      if [ "${goBig}" ]
      then
        FIG_TEXT="Journal"
      else
        FIG_TEXT="Journal"
      fi
      ;;
    MusicPlayer)
      if [ "${goBig}" ]
      then
        FIG_TEXT="MusicPlayerPlus"
      else
        FIG_TEXT="Music"
      fi
      ;;
    Roon)
      if [ "${goBig}" ]
      then
        FIG_TEXT="RoonCommandLine"
      else
        FIG_TEXT="Roon"
      fi
      ;;
    *)
      if [ "${goBig}" ]
      then
        FIG_TEXT="Asciiville"
      else
        FIG_TEXT="Asciiville"
      fi
      ;;
  esac
}

add_fullscreen() {
  [ "${have_wmctrl}" ] && {
    [ "${have_xprop}" ] && {
      # The things a man must do
      win_id=`wmctrl -lp | grep $(xprop -root | grep _NET_ACTIVE_WINDOW | head -1 | awk '{print $5}' | sed 's/,//' | sed 's/^0x/0x0/') | awk ' { print $1 } '`
      [ "${win_id}" ] && xprop -id ${win_id} | grep _NET_WM_STATE | grep FULLSCREEN > /dev/null && isfull=1
    }
    [ "${isfull}" ] || {
      wmctrl -r ':ACTIVE:' -b add,fullscreen
      # [ "${isfull}" ] || wmctrl -r ':ACTIVE:' -b add,maximized_vert,maximized_horz,fullscreen
      sleep 0.2
    }
  }
}

remove_fullscreen() {
  [ "${have_wmctrl}" ] && {
    [ "${isfull}" ] || {
      wmctrl -r ':ACTIVE:' -b remove,fullscreen
      # wmctrl -r ':ACTIVE:' -b remove,maximized_vert,maximized_horz,fullscreen
      clear
      sleep 0.2
    }
  }
}

wait_for_done() {
  # if fifo not found, create
  [ -p "${fifo_name}" ] || mkfifo "${fifo_name}"

  while true
  do
    # read line from fifo_name
    [ -p "${fifo_name}" ] || break
    # read -r -u 3 status<${fifo_name}
    read -r status<${fifo_name}
    # if status is done, break from loop
    if [ "${status}" = 'done' ]
    then
      break
    fi
  done

  rm -f ${fifo_name}
}

custom_gallery() {
  gallery_dir="$1"
  fontargs=
  set_font_size=1
  uses_ansi_escape=1
  scale_art_font=1
  scale_txt_font=1
  [ -f ${gallery_dir}/.config ] && {
    . ${gallery_dir}/.config
    [ "${set_font_size}" ] || fontargs="-E"
    [ "${uses_ansi_escape}" ] || fontargs="${fontargs} -Z"
    [ ${scale_art_font} -eq 1 ] || {
      art_font_size=$((art_font_size * scale_art_font))
    }
    [ ${scale_txt_font} -eq 1 ] || {
      txt_font_size=$((txt_font_size * scale_txt_font))
    }
  }
}

show_art_file() {
  art="$1"
  if [ "$2" ]
  then
    art_dir="-A $2"
  else
    art_dir=
  fi
  showargs="${art_dir} -v -C ${cycarg} -D ${show_interval} ${lolarg} ${audarg}"
  [ "${slideshow}" == "files" ] && showargs="${showargs} -W"
  save_config
  clear
  if [ "${CURRENT}" ]
  then
    num_exp='^[0-9]+$'
    termname=unknown
    myppid=`ps -e | grep ${PPID} | awk ' { print $1 } '`
    myppid=`echo ${myppid} | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'`
    if [[ ${myppid} =~ ${num_exp} ]]
    then
      parent=`ps -o ppid= -p ${myppid}`
      parent=`echo ${parent} | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'`
      if [[ ${parent} =~ ${num_exp} ]]
      then
        termname=`ps -e | grep ${parent} | awk ' { print $4 } '`
      fi
    fi

    case ${termname} in
      gnome-terminal*)
        add_fullscreen
        show_ascii_art -e gnome ${showargs} -a "${art}"
        ;;
      kitty*)
        kitty --listen-on unix:${sock_name} \
              --title="${art} Slideshow" \
              --start-as fullscreen \
              --override allow_remote_control=yes \
              --override dynamic_background_opacity=yes \
              --override background=black \
              --override font_size=18 \
              --override draw_minimal_borders=yes \
              --override tab_bar_min_tabs=2 \
              --override startup_session=none \
              ${KITTY_QUIT_OPT} \
              show_ascii_art -e kitty -K ${sock_name} ${showargs} -a "${art}"
        ;;
      tilix*)
        add_fullscreen
        show_ascii_art -e tilix ${showargs} -a "${art}"
        ;;
      xfce4-terminal*)
        add_fullscreen
        xfce4-terminal --tab \
             --title "${art} Slideshow" \
             --color-bg=Black \
             --hide-menubar \
             --hide-borders \
             --hide-toolbar \
             --hide-scrollbar \
             --command="show_ascii_art -e xfce4 -K ${fifo_name} ${showargs} -a '${art}'" &
        wait_for_done
        ;;
      *)
        add_fullscreen
        show_ascii_art ${showargs} -a "${art}"
        ;;
    esac
    remove_fullscreen
  else
    if [ "${RETRO}" ]
    then
      cool-retro-term --fullscreen \
                      -e show_ascii_art ${showargs} -a "${art}" > /dev/null 2>&1
    else
      if [ "${XFCE4}" ]
      then
        add_fullscreen
        xfce4-terminal --fullscreen \
             --color-bg=Black \
             --hide-menubar \
             --hide-borders \
             --hide-toolbar \
             --hide-scrollbar \
             --command="show_ascii_art -e xfce4 -K ${fifo_name} ${showargs} -a '${art}'" &
        wait_for_done
        clear
        sleep 2
        remove_fullscreen
      else
        if [ "${TILIX}" ]
        then
          tilix --full-screen \
                --window-style=borderless \
                --profile=Asciiville \
                --command="show_ascii_art -e tilix ${showargs} -a '${art}'"
        else
          if [ "${KITTY}" ]
          then
            kitty --listen-on unix:${sock_name} \
              --title="${art} Slideshow" \
              --start-as fullscreen \
              --override allow_remote_control=yes \
              --override dynamic_background_opacity=yes \
              --override background=black \
              --override font_size=18 \
              --override draw_minimal_borders=yes \
              --override tab_bar_min_tabs=2 \
              --override startup_session=none \
              ${KITTY_QUIT_OPT} \
              show_ascii_art -e kitty -K ${sock_name} ${showargs} -a "${art}"
          else
            gnome-terminal --window --full-screen \
                           --profile=Asciiville \
                           -- show_ascii_art -e gnome ${showargs} -a "${art}"
          fi
        fi
      fi
    fi
  fi
}

play_show() {
  clear
  if [ "${CURRENT}" ]
  then
    add_fullscreen
    num_exp='^[0-9]+$'
    termname=unknown
    myppid=`ps -e | grep ${PPID} | awk ' { print $1 } '`
    myppid=`echo ${myppid} | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'`
    if [[ ${myppid} =~ ${num_exp} ]]
    then
      parent=`ps -o ppid= -p ${myppid}`
      parent=`echo ${parent} | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'`
      if [[ ${parent} =~ ${num_exp} ]]
      then
        termname=`ps -e | grep ${parent} | awk ' { print $4 } '`
      fi
    fi

    case ${termname} in
      gnome-terminal*)
        show_ascii_art -e gnome ${showargs}
        ;;
      kitty*)
        kitty --listen-on unix:${sock_name} \
              --title="${showname} Slideshow" \
              --start-as fullscreen \
              --override allow_remote_control=yes \
              --override dynamic_background_opacity=yes \
              --override background=black \
              --override font_size=18 \
              --override draw_minimal_borders=yes \
              --override tab_bar_min_tabs=2 \
              --override startup_session=none \
              ${KITTY_QUIT_OPT} \
              show_ascii_art -e kitty -K ${sock_name} ${showargs}
        ;;
      tilix*)
        show_ascii_art -e tilix ${showargs}
        ;;
      xfce4-terminal*)
        xfce4-terminal --tab \
             --title "${showname} Slideshow" \
             --color-bg=Black \
             --hide-menubar \
             --hide-borders \
             --hide-toolbar \
             --hide-scrollbar \
             --command="show_ascii_art -e xfce4 -K ${fifo_name} ${showargs}" &
        wait_for_done
        ;;
      *)
        show_ascii_art ${showargs}
        ;;
    esac
    remove_fullscreen
  else
    if [ "${RETRO}" ]
    then
      cool-retro-term --fullscreen \
                      -e show_ascii_art ${showargs} > /dev/null 2>&1
    else
      if [ "${XFCE4}" ]
      then
        add_fullscreen
        xfce4-terminal --fullscreen \
             --color-bg=Black \
             --hide-menubar \
             --hide-borders \
             --hide-toolbar \
             --hide-scrollbar \
             --command="show_ascii_art -e xfce4 -K ${fifo_name} ${showargs}" &
        wait_for_done
        clear
        sleep 2
        remove_fullscreen
      else
        if [ "${TILIX}" ]
        then
          tilix --full-screen \
                --window-style=borderless \
                --profile=Asciiville \
                --command="show_ascii_art -e tilix ${showargs}"
        else
          if [ "${KITTY}" ]
          then
            kitty --listen-on unix:${sock_name} \
                  --start-as fullscreen \
                  --override allow_remote_control=yes \
                  --override dynamic_background_opacity=yes \
                  --override background=black \
                  --override font_size=18 \
                  --override draw_minimal_borders=yes \
                  --override tab_bar_min_tabs=2 \
                  --override startup_session=none \
                  ${KITTY_QUIT_OPT} \
                  show_ascii_art -e kitty -K ${sock_name} ${showargs}
          else
            gnome-terminal --window --full-screen \
                           --profile=Asciiville \
                           -- show_ascii_art -e gnome ${showargs}
          fi
        fi
      fi
    fi
  fi
}

play_random_show() {
  showlength="$1"
  [ ${showlength} -lt 0 ] && showlength=0
  if [ "$2" ]
  then
    art_dir="-A $2"
  else
    art_dir=
  fi
  showargs="${art_dir} -C -R ${showlength} ${cycarg} -D ${show_interval} ${lolarg} ${audarg}"
  play_show
}

play_slide_show() {
  showname="$1"
  if [ "$2" ]
  then
    art_dir="-A $2"
  else
    art_dir=
  fi
  custom_gallery "${ARTDIR}/${showname}"
  showargs="${art_dir} -C ${cycarg} -D ${show_interval} ${fontargs} ${lolarg} ${audarg}"
  if [ "${shuffle}" ]
  then
    showargs="${showargs} -R ${length} -s ${showname}"
  else
    showargs="${showargs} -s ${showname}"
  fi
  save_config
  play_show
  [ ${scale_art_font} -eq 1 ] || art_font_size=${saved_art_size}
  [ ${scale_txt_font} -eq 1 ] || txt_font_size=${saved_txt_size}
  [ ${scale_art_font} -eq 1 ] && [ ${scale_txt_font} -eq 1 ] || save_config
}

show_figlet() {
  if [ "${use_lolcat}" ]
  then
    if [ "${USE_FONT}" == "Lean" ]
    then
      figlet -c -d ${FIG_FONTS} -f "${USE_FONT}" -k -t ${FIG_TEXT} 2> /dev/null | tr ' _/' ' ()' | ${LOLCAT}
    else
      figlet -c -d ${FIG_FONTS} -f "${USE_FONT}" -k -t ${FIG_TEXT} 2> /dev/null | ${LOLCAT}
    fi
  else
    if [ "${USE_FONT}" == "Lean" ]
    then
      figlet -c -d ${FIG_FONTS} -f "${USE_FONT}" -k -t ${FIG_TEXT} 2> /dev/null | tr ' _/' ' ()'
    else
      figlet -c -d ${FIG_FONTS} -f "${USE_FONT}" -k -t ${FIG_TEXT} 2> /dev/null
    fi
  fi
}

show_help_menu() {
  MTITLE="Asciiville Help"
  while true
  do
    [ "${use_figlet}" ] && {
      select_font Help small
      show_figlet
    }
    PS3="${BOLD}${PLEASE} choice (numeric or text): ${NORM}"
    options=()
    if [ "${have_w3m}" ]
    then
      options+=("Asciiville README")
    else
      [ "${have_lynx}" ] && options+=("Asciiville README")
    fi
    options+=("Asciiville Man Page")
    options+=("Asciiville Animation Man Page")
    options+=("ASCIInema Man Page")
    options+=("Julia Set Animation Man Page")
    options+=("MusicPlayer Animation Man Page")
    options+=("ASCII Splash Man Page")
    options+=("ASCII Splash Tmux Man Page")
    [ "${have_aewan}" ] && options+=("Aewan Art Creation Man Page")
    [ "${have_btop}" ] && options+=("Btop System Monitor Man Page")
    [ "${have_cbftp}" ] && options+=("Cbftp FTP Client Man Page")
    [ "${have_ddgr}" ] && options+=("Ddgr Web Search Man Page")
    [ "${have_gdu}" ] && options+=("Gdu Disk Usage Man Page")
    [ "${have_jrnl}" ] && options+=("Journal Command Help")
    [ "${have_lynx}" ] && options+=("Lynx Web Browser Man Page")
    [ "${have_mpcplus}" ] && options+=("Mpcplus Music Player Man Page")
    [ "${have_mutt}" ] && options+=("Mutt Mail Client Man Page")
    [ "${have_mutt}" ] && options+=("Mutt Full Manual")
    [ "${have_neomutt}" ] && options+=("NeoMutt Mail Client Man Page")
    [ "${have_neomutt}" ] && options+=("NeoMutt Full Manual")
    [ "${have_nethack}" ] && options+=("NetHack Game Man Page")
    [ "${have_nethack}" ] && options+=("NetHack Guide Book")
    [ "${have_newsboat}" ] && options+=("Newsboat RSS Feed Man Page")
    [ "${have_newsboat}" ] && options+=("Newsboat Full Manual")
    [ "${have_ranger}" ] && options+=("Ranger File Manager Man Page")
    [ "${have_ranger}" ] && options+=("Rifle File Opener Man Page")
    options+=("Show ASCII Art Man Page")
    options+=("Show Phase of Moon Man Page")
    options+=("Show Weather Report Man Page")
    [ "${have_tuir}" ] && options+=("Terminal UI for Reddit Man Page")
    [ "${have_tuir}" ] && options+=("Terminal UI for Reddit Controls")
    options+=("Tmux Multiplexer Man Page")
    [ "${have_w3m}" ] && options+=("W3m Web Browser Man Page")
    [ "${have_retro}" ] && options+=("Retro Terminal Man Page")
    [ "${have_gnome}" ] && options+=("Gnome Terminal Man Page")
    [ "${have_kitty}" ] && options+=("Kitty Terminal Man Page")
    [ "${have_tilix}" ] && options+=("Tilix Terminal Man Page")
    [ "${have_xfce4}" ] && options+=("Xfce4 Terminal Man Page")
    options+=("Done / Back" "Quit")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
        "Done"*,*|*,"Done"*|"done"*,*|*,"done"*|"Back"*,*|*,"Back"*|"back"*,*|*,"back"*)
          break 2
          ;;
        "Asciiville README",*|*,"Asciiville README")
          if [ "${have_w3m}" ]
          then
            w3m ${DSHARE}/README.html
          else
            [ "${have_lynx}" ] && {
              lynx ${DSHARE}/README.html
            }
          fi
          break
          ;;
        "Asciiville Man"*,*|*,"Asciiville Man"*)
          man asciiville
          break
          ;;
        "Asciiville Animation"*,*|*,"Asciiville Animation"*)
          man asciiart
          break
          ;;
        "Julia"*,*|*,"Julia"*)
          man asciijulia
          break
          ;;
        "MusicPlayer"*,*|*,"MusicPlayer"*)
          man asciimpplus
          break
          ;;
        "ASCIInema"*,*|*,"ASCIInema"*)
          man asciinema
          break
          ;;
        "ASCII Splash Tmux"*,*|*,"ASCII Splash Tmux"*)
          man asciisplash-tmux
          break
          ;;
        "ASCII Splash"*,*|*,"ASCII Splash"*)
          man asciisplash
          break
          ;;
        "Aewan"*,*|*,"Aewan"*)
          man aewan
          break
          ;;
        "Btop"*,*|*,"Btop"*)
          man btop
          break
          ;;
        "Cbftp"*,*|*,"Cbftp"*)
          man cbftp
          break
          ;;
        "Ddgr"*,*|*,"Ddgr"*)
          man ddgr
          break
          ;;
        "Gdu"*,*|*,"Gdu"*)
          man gdu
          break
          ;;
        "Journal"*,*|*,"Journal"*)
          jrnl --help | less
          break
          ;;
        "Lynx"*,*|*,"Lynx"*)
          man lynx
          break
          ;;
        "Mpcplus"*,*|*,"Mpcplus"*)
          man mpcplus
          break
          ;;
        "Mutt Mail"*,*|*,"Mutt Mail"*)
          man mutt
          break
          ;;
        "NeoMutt Mail"*,*|*,"NeoMutt Mail"*)
          man neomutt
          break
          ;;
        "Mutt Full"*,*|*,"Mutt Full"*)
          if [ "${have_w3m}" ]
          then
            w3m ${TOP}/share/doc/mutt/html/index.html
          else
            [ "${have_lynx}" ] && {
              lynx ${TOP}/share/doc/mutt/html/index.html
            }
          fi
          break
          ;;
        "NeoMutt Full"*,*|*,"NeoMutt Full"*)
          if [ "${have_w3m}" ]
          then
            w3m ${TOP}/share/doc/neomutt/html/index.html
          else
            [ "${have_lynx}" ] && {
              lynx ${TOP}/share/doc/neomutt/html/index.html
            }
          fi
          break
          ;;
        "NetHack Game"*,*|*,"NetHack Game"*)
          man nethack
          break
          ;;
        "NetHack Guide"*,*|*,"NetHack Guide"*)
          less ${TOP}/games/share/doc/nethack/Guidebook.txt
          break
          ;;
        "Newsboat Full"*,*|*,"Newsboat Full"*)
          if [ "${have_w3m}" ]
          then
            w3m ${TOP}/share/doc/newsboat/newsboat.html
          else
            [ "${have_lynx}" ] && {
              lynx ${TOP}/share/doc/newsboat/newsboat.html
            }
          fi
          break
          ;;
        "Newsboat"*,*|*,"Newsboat"*)
          man newsboat
          break
          ;;
        "Ranger"*,*|*,"Ranger"*)
          man ranger
          break
          ;;
        "Rifle"*,*|*,"Rifle"*)
          man rifle
          break
          ;;
        "Show ASCII"*,*|*,"Show ASCII"*)
          man show_ascii_art
          break
          ;;
        "Show Phase"*,*|*,"Show Phase"*)
          man show_moon
          break
          ;;
        "Show Weather"*,*|*,"Show Weather"*)
          man show_weather
          break
          ;;
        "Terminal"*"Man Page",*|*,"Terminal"*"Man Page")
          man tuir
          break
          ;;
        "Terminal"*"Controls",*|*,"Terminal"*"Controls")
          if [ "${have_w3m}" ]
          then
            w3m ${HOME}/.config/tuir/CONTROLS.md
          else
            [ "${have_lynx}" ] && {
              lynx ${HOME}/.config/tuir/CONTROLS.md
            }
          fi
          break
          ;;
        "Tmux"*,*|*,"Tmux"*)
          man tmux
          break
          ;;
        "W3m"*,*|*,"W3m"*)
          man w3m
          break
          ;;
        "Retro"*,*|*,"Retro"*)
          man cool-retro-term
          break
          ;;
        "Gnome"*,*|*,"Gnome"*)
          man gnome-terminal
          break
          ;;
        "Tilix"*,*|*,"Tilix"*)
          man tilix
          break
          ;;
        "Xfce4"*,*|*,"Xfce4"*)
          man xfce4-terminal
          break
          ;;
        "Quit",*|*,"Quit"|"quit",*|*,"quit")
          remove_fullscreen
          printf "\nExiting Asciiville\n"
          exit 0
          ;;
        *,*|*,*)
          printf "\nCould not match '${REPLY}' with a menu entry."
          printf "\nPlease try again with an exact match.\n"
          [ "${use_figlet}" ] && {
            select_font Asciimatics
            show_figlet
          }
          ;;
      esac
      REPLY=
    done
  done
  clear
  printf "\n"
}

show_select_menu() {
  main_menu=
  while true
  do
    [ "${COMMAND}" ] || COMMAND=btop
    use_aewan="NO"
    use_btop="NO"
    use_cmatrix="NO"
    use_ftp="NO"
    use_gdu="NO"
    use_lynx="NO"
    use_mpp="NO"
    use_mutt="NO"
    use_nethack="NO"
    use_ninvaders="NO"
    use_newsboat="NO"
    use_tuir="NO"
    use_ranger="NO"
    use_tetris="NO"
    use_w3m="NO"
    case "${COMMAND}" in
      aewan)
        use_aewan="YES"
        ;;
      btop)
        use_btop="YES"
        ;;
      cbftp|ncftp)
        use_ftp="YES"
        ;;
      cmatrix*)
        use_cmatrix="YES"
        ;;
      gdu*)
        use_gdu="YES"
        ;;
      lynx*)
        use_lynx="YES"
        ;;
      mpcplus)
        use_mpp="YES"
        ;;
      mutt|neomutt)
        use_mutt="YES"
        ;;
      nethack)
        use_nethack="YES"
        ;;
      newsboat)
        use_newsboat="YES"
        ;;
      ninvaders)
        use_ninvaders="YES"
        ;;
      ranger)
        use_ranger="YES"
        ;;
      tetris)
        use_tetris="YES"
        ;;
      tuir)
        use_tuir="YES"
        ;;
      w3m*)
        use_w3m="YES"
        ;;
    esac
    if [ "${KITTY}" ]
    then
      use_kitty="YES"
    else
      use_kitty="NO"
    fi
    if [ "${GNOME}" ]
    then
      use_gnome="YES"
    else
      use_gnome="NO"
    fi
    if [ "${XFCE4}" ]
    then
      use_xfce4="YES"
    else
      use_xfce4="NO"
    fi
    if [ "${TILIX}" ]
    then
      use_tilix="YES"
    else
      use_tilix="NO"
    fi
    if [ "${RETRO}" ]
    then
      use_retro="YES"
    else
      use_retro="NO"
    fi
    if [ "${CURRENT}" ]
    then
      use_current="YES"
    else
      use_current="NO"
    fi
    show_comm=`echo ${COMMAND} | awk ' { print $1 } '`
    set_show_term
    [ "${use_figlet}" ] && {
      select_font AsciiAppTerm
      show_figlet
    }
    PS3="${BOLD}${PLEASE} choice (numeric or text, 'h' for help): ${NORM}"
    options=()
    [ "${have_aewan}" ] && options+=("Aewan Art Creation     [${use_btop}]")
    [ "${have_btop}" ] && options+=("Btop System Monitor    [${use_btop}]")
    [ "${have_gdu}" ] && options+=("Disk Usage Analyzer    [${use_gdu}]")
    [ "${have_lynx}" ] && options+=("Lynx Web Browser       [${use_lynx}]")
    [ "${have_w3m}" ] && options+=("W3M Web Browser        [${use_w3m}]")
    [ "${have_cmatrix}" ] && options+=("Matrix Screen          [${use_cmatrix}]")
    [ "${have_mpcplus}" ] && options+=("Music Player Plus      [${use_mpp}]")
    if [ "${have_cbftp}" ]
    then
      options+=("Cbftp FTP Client       [${use_ftp}]")
    else
      [ "${have_ncftp}" ] && options+=("Ncftp FTP Client       [${use_ftp}]")
    fi
    if [ "${have_neomutt}" ]
    then
      options+=("NeoMutt Mail Client    [${use_mutt}]")
    else
      [ "${have_mutt}" ] && options+=("Mutt Mail Client       [${use_mutt}]")
    fi
    [ "${have_nethack}" ] && options+=("NetHack Dungeon Game   [${use_nethack}]")
    [ "${have_ninvaders}" ] && options+=("Ninvaders Video Game   [${use_ninvaders}]")
    [ "${have_tetris}" ] && options+=("Tetris Video Game      [${use_tetris}]")
    [ "${have_newsboat}" ] && options+=("Newsboat RSS Feeds     [${use_newsboat}]")
    [ "${have_ranger}" ] && options+=("Ranger File Manager    [${use_ranger}]")
    [ "${have_tuir}" ] && options+=("Reddit UI              [${use_tuir}]")
    [ "${have_xfce4}" ] && options+=("XFCE4 Terminal         [${use_xfce4}]")
    [ "${have_gnome}" ] && options+=("Gnome Terminal         [${use_gnome}]")
    [ "${have_kitty}" ] && options+=("Kitty Terminal         [${use_kitty}]")
    [ "${have_retro}" ] && options+=("Retro Terminal         [${use_retro}]")
    [ "${have_tilix}" ] && options+=("Tilix Terminal         [${use_tilix}]")
    options+=("Current Terminal       [${use_current}]")
    options+=("${BOLD}Run ${show_comm} in ${show_term}${NORM}")
    [ "${have_jrnl}" ] && options+=("Journal Menu")
    [ "${have_showascii}" ] && options+=("Ascii Art Menu")
    [ "${have_splash}" ] && options+=("Animations Menu")
    options+=("Done / Main Menu" "Quit")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
          "h",*|*,"h"|"H",*|*,"H"|"help",*|*,"help"|"Help",*|*,"Help")
              clear
              printf "\n"
              show_help_menu
              break
              ;;
          "Done"*,*|*,"Done"*|"Back",*|*,"Back"|"back",*|*,"back"|"Main"*,*|*,"Main"*|"main",*|*,"main")
              main_menu=1
              break 2
              ;;
          "Animations"*,*|*,"Animations"*)
              animation_menu=1
              break 2
              ;;
          "Journal"*,*|*,"Journal"*)
              journal_menu=1
              break 2
              ;;
          "Ascii Art"*,*|*,"Ascii Art"*)
              art_menu=1
              break 2
              ;;
          "Aewan"*,*|*,"Aewan"*)
              COMMAND=aewan
              MTITLE="Aewan Art Creation"
              break
              ;;
          "Btop"*,*|*,"Btop"*)
              COMMAND=btop
              MTITLE="Btop++ System Monitor"
              break
              ;;
          "Disk"*,*|*,"Disk"*)
              COMMAND="gdu ${HOME}"
              MTITLE="Disk Usage Analyzer"
              break
              ;;
          "Lynx"*,*|*,"Lynx"*)
              COMMAND="lynx ${WEB_HOME}"
              MTITLE="Lynx Web Browser"
              export BROWSER=lynx
              break
              ;;
          "W3M"*,*|*,"W3M"*)
              COMMAND="w3m -v ${WEB_HOME}"
              MTITLE="W3M Web Browser"
              export BROWSER=w3m
              break
              ;;
          "Matrix"*,*|*,"Matrix"*)
              COMMAND="cmatrix -u 8"
              MTITLE="Matrix Screen"
              break
              ;;
          "Music"*,*|*,"Music"*)
              COMMAND=mpcplus
              MTITLE="Music Player Plus MPD Client"
              break
              ;;
          "Cbftp"*,*|*,"Cbftp"*)
              COMMAND=cbftp
              MTITLE="Cbftp FTP Client"
              break
              ;;
          "Ncftp"*,*|*,"Ncftp"*)
              COMMAND=ncftp
              MTITLE="Ncftp FTP Client"
              break
              ;;
          "Mutt"*,*|*,"Mutt"*)
              COMMAND=mutt
              MTITLE="Mutt Mail Client"
              break
              ;;
          "NeoMutt"*,*|*,"NeoMutt"*)
              COMMAND=neomutt
              MTITLE="NeoMutt Mail Client"
              break
              ;;
          "NetHack"*,*|*,"NetHack"*)
              COMMAND=nethack
              MTITLE="NetHack Dungeon Game"
              break
              ;;
          "News"*,*|*,"News"*)
              COMMAND=newsboat
              MTITLE="Newsboat RSS Feeds"
              break
              ;;
          "Ninvaders"*,*|*,"Ninvaders"*)
              COMMAND=ninvaders
              MTITLE="Ninvaders Video Game"
              break
              ;;
          "Ranger"*,*|*,"Ranger"*)
              COMMAND=ranger
              MTITLE="Ranger File Manager"
              break
              ;;
          "Reddit"*,*|*,"Reddit"*)
              COMMAND=tuir
              MTITLE="Terminal UI for Reddit"
              break
              ;;
          "Tetris"*,*|*,"Tetris"*)
              COMMAND=tetris
              MTITLE="Tetris Video Game"
              break
              ;;
          "XFCE4"*,*|*,"XFCE4"*)
              XFCE4=1
              TILIX=
              KITTY=
              GNOME=
              RETRO=
              CURRENT=
              break
              ;;
          "Gnome"*,*|*,"Gnome"*)
              GNOME=1
              KITTY=
              XFCE4=
              TILIX=
              RETRO=
              CURRENT=
              break
              ;;
          "Kitty"*,*|*,"Kitty"*)
              KITTY=1
              GNOME=
              XFCE4=
              TILIX=
              RETRO=
              CURRENT=
              break
              ;;
          "Retro"*,*|*,"Retro"*)
              RETRO=1
              GNOME=
              XFCE4=
              TILIX=
              KITTY=
              CURRENT=
              break
              ;;
          "Tilix"*,*|*,"Tilix"*)
              TILIX=1
              KITTY=
              RETRO=
              GNOME=
              XFCE4=
              CURRENT=
              break
              ;;
          "Current"*,*|*,"Current"*)
              CURRENT=1
              TILIX=
              KITTY=
              RETRO=
              GNOME=
              XFCE4=
              break
              ;;
          *"Run ${show_comm} in ${show_term}"*,*|*,*"Run ${show_comm} in ${show_term}"*)
              make_it_so
              break
              ;;
          "Quit",*|*,"Quit"|"quit",*|*,"quit")
              remove_fullscreen
              printf "\nExiting Asciiville\n"
              exit 0
              ;;
          *,*|*,*)
              printf "\nCould not match '${REPLY}' with a menu entry."
              printf "\nPlease try again with an exact match.\n"
              [ "${use_figlet}" ] && {
                select_font AsciiAppTerm
                show_figlet
              }
              ;;
      esac
      REPLY=
    done
  done
  [ "${art_menu}" ] && {
    clear
    printf "\n\n\n"
    show_art_menu
  }
  [ "${journal_menu}" ] && {
    clear
    printf "\n\n\n"
    show_journal_menu
  }
  [ "${animation_menu}" ] && {
    clear
    printf "\n\n\n"
    show_animation_menu
  }
  [ "${main_menu}" ] && {
    clear
    printf "\n"
    init_vars
    show_main_menu
  }
}

show_art_menu() {
  main_menu=
  while true
  do
    if [ "${AUDIO}" ]
    then
      audiostat="YES"
      audarg="-P -S ${SONG}"
    else
      audiostat="NO"
      audarg=
    fi
    if [ "${cycle}" ]
    then
      cyclestat="YES"
    else
      cyclestat="NO"
    fi
    if [ "${shuffle}" ]
    then
      randomize="YES"
    else
      randomize="NO"
    fi
    if [ "${RECORD}" ]
    then
      recordstat="YES"
    else
      recordstat="NO"
    fi
    if [ "${KITTY}" ]
    then
      use_kitty="YES"
    else
      use_kitty="NO"
    fi
    if [ "${GNOME}" ]
    then
      use_gnome="YES"
    else
      use_gnome="NO"
    fi
    if [ "${XFCE4}" ]
    then
      use_xfce4="YES"
    else
      use_xfce4="NO"
    fi
    if [ "${TILIX}" ]
    then
      use_tilix="YES"
    else
      use_tilix="NO"
    fi
    if [ "${RETRO}" ]
    then
      use_retro="YES"
    else
      use_retro="NO"
    fi
    if [ "${CURRENT}" ]
    then
      use_current="YES"
    else
      use_current="NO"
    fi
    if [ "${TMUX}" ]
    then
      usetmux="YES"
    else
      usetmux="NO"
    fi
    if [ "${use_lolcat}" ]
    then
      lolarg="-l ${use_lolcat}"
    else
      lolarg=
    fi
    [ "${use_figlet}" ] && {
      select_font AsciiArt
      show_figlet
    }
    PS3="${BOLD}${PLEASE} choice (numeric or text, 'h' for help): ${NORM}"
    options=()
    for ascii_art_dir in ${ARTDIR}/*
    do
      [ "${ascii_art_dir}" == "${ARTDIR}/*" ] && continue
      [ -d "${ascii_art_dir}" ] || continue
      [ "${ascii_art_dir}" == "${ARTDIR}/pics" ] && continue
      ascii_dir_name=`basename "${ascii_art_dir}"`
      [ "${ascii_dir_name}" == "Art" ] && ascii_dir_name="Fine"
      [ "${ascii_dir_name}" == "Dragonflies" ] && ascii_dir_name="Dragonfly"
      options+=("${ascii_dir_name} Art Slideshow")
    done
    options+=("Random Art Slideshow")
    options+=("Select ASCII Art")
    options+=("Generate ASCII Art")
    options+=("Cycle Slideshow       [${cyclestat}]")
    options+=("Shuffle Slideshow     [${randomize}]")
    [ "${have_lolcat}" ] && options+=("Use Lolcat Coloring   [${use_lol}]")
    options+=("Use Audio             [${audiostat}]")
    [ "${audiostat}" == "YES" ] && options+=("Select Song [${songname}]")
    [ "${have_xfce4}" ] && options+=("XFCE4 Terminal        [${use_xfce4}]")
    [ "${have_gnome}" ] && options+=("Gnome Terminal        [${use_gnome}]")
    [ "${have_kitty}" ] && options+=("Kitty Terminal        [${use_kitty}]")
    [ "${have_retro}" ] && options+=("Retro Terminal        [${use_retro}]")
    [ "${have_tilix}" ] && options+=("Tilix Terminal        [${use_tilix}]")
    options+=("Current Terminal      [${use_current}]")
    options+=("Use Tmux              [${usetmux}]")
    [ "${have_asciinema}" ] && [ "${TMUX}" ] && options+=("Record Tmux Session   [${recordstat}]")
    options+=("Slideshow Interval    [${show_interval}]")
    options+=("Art Font Size         [${art_font_size}]")
    options+=("Text Font Size        [${txt_font_size}]")
    options+=("Main Menu" "Quit")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
          "h",*|*,"h"|"H",*|*,"H"|"help",*|*,"help"|"Help",*|*,"Help")
              clear
              printf "\n"
              show_help_menu
              break
              ;;
          "Main"*,*|*,"Main"*|"Back",*|*,"Back"|"back",*|*,"back")
              main_menu=1
              break 2
              ;;
          "Doctorwhen"*,*|*,"Doctorwhen"*)
              play_slide_show Doctorwhen
              break
              ;;
          "Dragonfly"*,*|*,"Dragonfly"*)
              play_slide_show Dragonflies
              break
              ;;
          "Space"*,*|*,"Space"*)
              play_slide_show Space
              break
              ;;
          "Fine"*,*|*,"Fine"*)
              play_slide_show Art
              break
              ;;
          "Fractal"*,*|*,"Fractal"*)
              play_slide_show Fractals
              break
              ;;
          "Lyapunov"*,*|*,"Lyapunov"*)
              play_slide_show Lyap
              break
              ;;
          "Mixed"*,*|*,"Mixed"*)
              play_slide_show Mixed
              break
              ;;
          "Owls"*,*|*,"Owls"*)
              play_slide_show Owls
              break
              ;;
          "Random"*,*|*,"Random"*)
              num=50
              while true
              do
                read -p "Enter slideshow length or 'Enter' to accept length = ${num} " len
                [ "${len}" ] || break
                if [[ ${len} =~ $re ]]
                then
                  num=${len}
                  break
                else
                  echo "Requested slideshow length '${len}' is not a number"
                fi
              done
              play_random_show ${num}
              break
              ;;
          "Waterfalls"*,*|*,"Waterfalls"*)
              play_slide_show Waterfalls
              break
              ;;
          *"Art Slideshow",*|*,*"Art Slideshow")
              gallery_name=`echo ${opt} | sed -e "s/ Art Slideshow//"`
              play_slide_show "${gallery_name}"
              break
              ;;
          "XFCE4"*,*|*,"XFCE4"*)
              XFCE4=1
              TILIX=
              KITTY=
              GNOME=
              RETRO=
              CURRENT=
              break
              ;;
          "Gnome"*,*|*,"Gnome"*)
              GNOME=1
              KITTY=
              XFCE4=
              TILIX=
              RETRO=
              CURRENT=
              break
              ;;
          "Kitty"*,*|*,"Kitty"*)
              KITTY=1
              GNOME=
              XFCE4=
              TILIX=
              RETRO=
              CURRENT=
              break
              ;;
          "Retro"*,*|*,"Retro"*)
              RETRO=1
              GNOME=
              XFCE4=
              TILIX=
              KITTY=
              CURRENT=
              break
              ;;
          "Tilix"*,*|*,"Tilix"*)
              TILIX=1
              KITTY=
              RETRO=
              GNOME=
              XFCE4=
              CURRENT=
              break
              ;;
          "Current"*,*|*,"Current"*)
              CURRENT=1
              TILIX=
              KITTY=
              RETRO=
              GNOME=
              XFCE4=
              break
              ;;
          "Use Audio"*,*|*,"Use Audio"*)
              if [ "${AUDIO}" ]
              then
                AUDIO=
              else
                AUDIO=1
              fi
              if [ "${AUDIO}" ]
              then
                if [ "${custom_song}" ]
                then
                  ASCSPLASH="${ASCSPLASH} -a -s ${SONG}"
                  ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -a -s ${SONG}"
                else
                  ASCSPLASH="${ASCSPLASH} -a"
                  ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -a"
                fi
                audarg="-P -S ${SONG}"
              else
                ASCSPLASH=`echo ${ASCSPLASH} | sed -e "s# -a##" -e "s# -s ${SONG}##"`
                ASCSPLASH_TMUX=`echo ${ASCSPLASH_TMUX} | sed -e "s# -a##" -e "s# -s ${SONG}##"`
                audarg=
              fi
              break
              ;;
          "Cycle"*,*|*,"Cycle"*)
              if [ "${cycle}" ]
              then
                cycle=
              else
                cycle=1
              fi
              break
              ;;
          "Shuffle"*,*|*,"Shuffle"*)
              if [ "${shuffle}" ]
              then
                shuffle=
              else
                shuffle=1
              fi
              break
              ;;
          "Use Lolcat"*,*|*,"Use Lolcat"*)
              if [ "${use_lolcat}" == "2" ]
              then
                use_lolcat=
                use_lol="NO"
                lolarg=
              else
                if [ "${use_lolcat}" ]
                then
                  use_lolcat=2
                  use_lol="YES+"
                  lolarg="-l 2"
                  LOLCAT="${LOLCAT_ANIM}"
                else
                  use_lolcat=1
                  use_lol="YES"
                  lolarg="-l 1"
                  LOLCAT="${LOLCAT_NORM}"
                fi
              fi
              break
              ;;
          "Record"*,*|*,"Record"*)
              if [ "${RECORD}" ]
              then
                RECORD=
              else
                RECORD=1
                TMUX=1
              fi
              if [ "${RECORD}" ]
              then
                ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -R"
              else
                ASCSPLASH_TMUX=`echo ${ASCSPLASH_TMUX} | sed -e "s/ -R//"`
              fi
              break
              ;;
          "Use Tmux"*,*|*,"Use Tmux"*)
              if [ "${TMUX}" ]
              then
                TMUX=
                RECORD=
              else
                TMUX=1
              fi
              break
              ;;
          "Select ASCII"*,*|*,"Select ASCII"*)
              select_ascii
              break
              ;;
          "Generate"*,*|*,"Generate"*)
              generate_art
              break
              ;;
          "Select Song"*,*|*,"Select Song"*)
              select_song
              break
              ;;
          "Slideshow Interval"*,*|*,"Slideshow Interval"*)
              while true
              do
                read -p "Enter slideshow interval in seconds (current value = ${show_interval}) " interval
                if [[ ${interval} =~ $re ]]
                then
                  show_interval=${interval}
                  break
                else
                  echo "Requested interval '${interval}' is not a number"
                fi
              done
              break
              ;;
          "Art Font"*,*|*,"Art Font"*)
              while true
              do
                read -p "Enter new art font size (current value = ${art_font_size}) " artsize
                if [[ ${artsize} =~ $re ]]
                then
                  art_font_size=${artsize}
                  saved_art_size=${art_font_size}
                  break
                else
                  echo "Requested art font size '${artsize}' is not a number"
                fi
              done
              break
              ;;
          "Text Font"*,*|*,"Text Font"*)
              while true
              do
                read -p "Enter new text font size (current value = ${txt_font_size}) " txtsize
                if [[ ${txtsize} =~ $re ]]
                then
                  txt_font_size=${txtsize}
                  saved_txt_size=${txt_font_size}
                  break
                else
                  echo "Requested text font size '${txtsize}' is not a number"
                fi
              done
              break
              ;;
          "Quit",*|*,"Quit"|"quit",*|*,"quit")
              remove_fullscreen
              printf "\nExiting Asciiville\n"
              exit 0
              ;;
          *,*|*,*)
              printf "\nCould not match '${REPLY}' with a menu entry."
              printf "\nPlease try again with an exact match.\n"
              [ "${use_figlet}" ] && {
                select_font AsciiArt
                show_figlet
              }
              ;;
      esac
      REPLY=
    done
  done
  [ "${main_menu}" ] && {
    clear
    printf "\n"
    init_vars
    show_main_menu
  }
}

show_animation_menu() {
  art_menu=
  journal_menu=
  main_menu=
  MTITLE="ASCII Animation"
  while true
  do
    DO_SPLASH=1
    if [ "${AUDIO}" ]
    then
      audiostat="YES"
      audarg="-P -S ${SONG}"
    else
      audiostat="NO"
      audarg=
    fi
    if [ "${KITTY}" ]
    then
      use_kitty="YES"
    else
      use_kitty="NO"
    fi
    if [ "${GNOME}" ]
    then
      use_gnome="YES"
    else
      use_gnome="NO"
    fi
    if [ "${XFCE4}" ]
    then
      use_xfce4="YES"
    else
      use_xfce4="NO"
    fi
    if [ "${TILIX}" ]
    then
      use_tilix="YES"
    else
      use_tilix="NO"
    fi
    if [ "${RETRO}" ]
    then
      use_retro="YES"
    else
      use_retro="NO"
    fi
    if [ "${CURRENT}" ]
    then
      use_current="YES"
    else
      use_current="NO"
    fi
    if [ "${RECORD}" ]
    then
      recordstat="YES"
    else
      recordstat="NO"
    fi
    if [ "${TMUX}" ]
    then
      usetmux="YES"
    else
      usetmux="NO"
    fi
    if [ "${FULLSCREEN}" ]
    then
      fullstat="YES"
    else
      fullstat="NO"
    fi
    skip_it_so=
    [ "${use_figlet}" ] && {
      select_font Asciimatics
      show_figlet
    }
    PS3="${BOLD}${PLEASE} choice (numeric or text, 'h' for help): ${NORM}"
    options=()
    [ "${have_asciiart}" ] && options+=("Asciiville Animation")
    [ "${have_gum}" ] && [ -x ${TOOLSBIN}/asciifetch ] && {
      options+=("Asciiville Splashscreen")
    }
    [ "${have_asciijulia}" ] && options+=("Julia Set Animation")
    [ "${have_asciimpplus}" ] && options+=("MPPlus Animation")
    [ "${have_asciiplasma}" ] && options+=("Plasma Animation")
    [ "${have_bb}" ] && options+=("AAlib BB Demo")
    [ "${have_endo}" ] && options+=("Fluid Simulator")
    [ "${have_xfce4}" ] && options+=("XFCE4 Terminal    [${use_xfce4}]")
    [ "${have_gnome}" ] && options+=("Gnome Terminal    [${use_gnome}]")
    [ "${have_kitty}" ] && options+=("Kitty Terminal    [${use_kitty}]")
    [ "${have_retro}" ] && options+=("Retro Terminal    [${use_retro}]")
    [ "${have_tilix}" ] && options+=("Tilix Terminal    [${use_tilix}]")
    options+=("Current Terminal  [${use_current}]")
    options+=("Fullscreen Window [${fullstat}]")
    [ "${have_lolcat}" ] && options+=("Use Lolcat Coloring   [${use_lol}]")
    options+=("Use Tmux              [${usetmux}]")
    [ "${have_asciinema}" ] && [ "${TMUX}" ] && options+=("Record Tmux Session   [${recordstat}]")
    options+=("Use Audio             [${audiostat}]")
    [ "${audiostat}" == "YES" ] && options+=("Select Song [${songname}]")
    [ "${have_jrnl}" ] && options+=("Journal Menu")
    [ "${have_mpplus}" ] && options+=("MusicPlayerPlus Menu")
    [ "${have_roon}" ] && options+=("RoonCommandLine Menu")
    [ "${have_showascii}" ] && options+=("Ascii Art Menu")
    options+=("Main Menu" "Quit")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
          "h",*|*,"h"|"H",*|*,"H"|"help",*|*,"help"|"Help",*|*,"Help")
              clear
              printf "\n"
              show_help_menu
              skip_it_so=1
              break
              ;;
          "Main Menu",*|*,"Main Menu"|"Back",*|*,"Back"|"back",*|*,"back")
              main_menu=1
              break 2
              ;;
          "Asciiville Anim"*,*|*,"Asciiville Anim"*)
              ASCSPLASH="${ASCSPLASH} -i"
              ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l art"
              break
              ;;
          "Asciiville Splash"*,*|*,"Asciiville Splash"*)
              clear
              ${TOOLSBIN}/asciifetch -a -f
              ${TOOLSBIN}/asciifetch -z -f
              skip_it_so=1
              break
              ;;
          "Julia"*,*|*,"Julia"*)
              ASCSPLASH="${ASCSPLASH} -j"
              ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l julia"
              break
              ;;
          "MPPlus"*,*|*,"MPPlus"*)
              ASCSPLASH="${ASCSPLASH} -m"
              ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l mpplus"
              break
              ;;
          "Plasma"*,*|*,"Plasma"*)
              ASCSPLASH="${ASCSPLASH} -p"
              ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l plasma"
              break
              ;;
          "AAlib"*,*|*,"AAlib"*)
              SAVED_DISPLAY="${DISPLAY}"
              export DISPLAY=""
              if [ "${AUDIO}" ]
              then
                if [ "${custom_song}" ]
                then
                  bash ${TOOLSBIN}/bb-tmux -a -s "${SONG}"
                else
                  bash ${TOOLSBIN}/bb-tmux -a
                fi
              else
                bash ${TOOLSBIN}/bb-tmux
              fi
              skip_it_so=1
              export DISPLAY="${SAVED_DISPLAY}"
              break
              ;;
          "Fluid"*,*|*,"Fluid"*)
              COMMAND="bash -m ${TOP}/bin/show_endo"
              COMMAND_TMUX="bash -m ${TOP}/bin/show_endo"
              ASCSPLASH="${COMMAND}"
              ASCSPLASH_TMUX="${COMMAND_TMUX}"
              # trap -- '' SIGINT
              # reset_trap=1
              break
              ;;
          "Journal"*,*|*,"Journal"*)
              journal_menu=1
              break 2
              ;;
          "Ascii Art"*,*|*,"Ascii Art"*)
              art_menu=1
              break 2
              ;;
          "XFCE4"*,*|*,"XFCE4"*)
              XFCE4=1
              TILIX=
              KITTY=
              GNOME=
              RETRO=
              CURRENT=
              skip_it_so=1
              break
              ;;
          "Gnome"*,*|*,"Gnome"*)
              GNOME=1
              XFCE4=
              KITTY=
              TILIX=
              RETRO=
              CURRENT=
              skip_it_so=1
              break
              ;;
          "Kitty"*,*|*,"Kitty"*)
              KITTY=1
              GNOME=
              XFCE4=
              TILIX=
              RETRO=
              CURRENT=
              skip_it_so=1
              break
              ;;
          "Retro"*,*|*,"Retro"*)
              RETRO=1
              GNOME=
              XFCE4=
              TILIX=
              KITTY=
              CURRENT=
              skip_it_so=1
              break
              ;;
          "Tilix"*,*|*,"Tilix"*)
              TILIX=1
              RETRO=
              GNOME=
              KITTY=
              XFCE4=
              CURRENT=
              skip_it_so=1
              break
              ;;
          "Current"*,*|*,"Current"*)
              CURRENT=1
              TILIX=
              KITTY=
              RETRO=
              GNOME=
              XFCE4=
              skip_it_so=1
              break
              ;;
          "Use Lolcat"*,*|*,"Use Lolcat"*)
              if [ "${use_lolcat}" == "2" ]
              then
                use_lolcat=
                use_lol="NO"
                lolarg=
              else
                if [ "${use_lolcat}" ]
                then
                  use_lolcat=2
                  use_lol="YES+"
                  lolarg="-l 2"
                  LOLCAT="${LOLCAT_ANIM}"
                else
                  use_lolcat=1
                  use_lol="YES"
                  lolarg="-l 1"
                  LOLCAT="${LOLCAT_NORM}"
                fi
              fi
              skip_it_so=1
              break
              ;;
          "Use Audio"*,*|*,"Use Audio"*)
              if [ "${AUDIO}" ]
              then
                AUDIO=
              else
                AUDIO=1
              fi
              if [ "${AUDIO}" ]
              then
                if [ "${custom_song}" ]
                then
                  ASCSPLASH="${ASCSPLASH} -a -s ${SONG}"
                  ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -a -s ${SONG}"
                else
                  ASCSPLASH="${ASCSPLASH} -a"
                  ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -a"
                fi
                audarg="-P -S ${SONG}"
              else
                ASCSPLASH=`echo ${ASCSPLASH} | sed -e "s# -a##" -e "s# -s ${SONG}##"`
                ASCSPLASH_TMUX=`echo ${ASCSPLASH_TMUX} | sed -e "s# -a##" -e "s# -s ${SONG}##"`
                audarg=
              fi
              skip_it_so=1
              break
              ;;
          "Record"*,*|*,"Record"*)
              if [ "${RECORD}" ]
              then
                RECORD=
              else
                RECORD=1
                TMUX=1
              fi
              if [ "${RECORD}" ]
              then
                ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -R"
              else
                ASCSPLASH_TMUX=`echo ${ASCSPLASH_TMUX} | sed -e "s/ -R//"`
              fi
              skip_it_so=1
              break
              ;;
          "Use Tmux"*,*|*,"Use Tmux"*)
              if [ "${TMUX}" ]
              then
                TMUX=
                RECORD=
              else
                TMUX=1
              fi
              skip_it_so=1
              break
              ;;
          "Fullscreen"*,*|*,"Fullscreen"*)
              if [ "${FULLSCREEN}" ]
              then
                FULLSCREEN=
              else
                FULLSCREEN=1
              fi
              if [ "${FULLSCREEN}" ]
              then
                add_fullscreen
              else
                remove_fullscreen
              fi
              skip_it_so=1
              break
              ;;
          "MusicPlayerPlus"*,*|*,"MusicPlayerPlus"*)
              [ "${use_figlet}" ] && {
                select_font MusicPlayer
                show_figlet
              }
              mpplus -i
              clear
              skip_it_so=1
              break
              ;;
          "RoonCommandLine"*,*|*,"RoonCommandLine"*)
              [ "${use_figlet}" ] && {
                select_font Roon
                show_figlet
              }
              roon
              clear
              skip_it_so=1
              break
              ;;
          "Select"*,*|*,"Select"*)
              select_song
              skip_it_so=1
              break
              ;;
          "Quit",*|*,"Quit"|"quit",*|*,"quit")
              remove_fullscreen
              printf "\nExiting Asciiville\n"
              exit 0
              ;;
          *,*|*,*)
              printf "\nCould not match '${REPLY}' with a menu entry."
              printf "\nPlease try again with an exact match.\n"
              [ "${use_figlet}" ] && {
                select_font Asciimatics
                show_figlet
              }
              ;;
      esac
      REPLY=
    done
    [ "${skip_it_so}" ] || {
      make_it_so
      # [ "${reset_trap}" ] && {
      #   trap 'set_user_conf' SIGINT SIGTERM SIGHUP EXIT
      #   reset_trap=
      # }
      init_vars
    }
  done
  [ "${art_menu}" ] && {
    clear
    printf "\n\n\n"
    show_art_menu
  }
  [ "${journal_menu}" ] && {
    clear
    printf "\n\n\n"
    show_journal_menu
  }
  [ "${main_menu}" ] && {
    clear
    printf "\n"
    init_vars
    show_main_menu
  }
}

show_journal_menu() {
  art_menu=
  animation_menu=
  main_menu=

  while true
  do
    [ "${use_figlet}" ] && {
      select_font Journal
      show_figlet
    }
    PS3="${BOLD}${PLEASE} choice (numeric or text, 'h' for help): ${NORM}"
    options=()
    options+=("New Journal Entry")
    options+=("All Journal Entries")
    options+=("Today's Journal Entries")
    options+=("Yesterday's Journal Entries")
    options+=("This Week's Journal Entries")
    options+=("This Month's Journal Entries")
    options+=("This Year's Journal Entries")
    options+=("Last 10 Journal Entries")
    [ ${numjrnls} -gt 1 ] && {
      options+=("Switch Journal        [${journal}]")
    }
    options+=("Switch Display Format [${style}]")
    encrypted=
    jloc=`jrnl --list | grep '*' | grep ${journal} | awk ' { print $4 } '`
    first=${jloc:0:1}
    uses_tilda=
    [ "${first}" == "~" ] && {
      uses_tilda=1
      jloc=`echo ${jloc} | sed -e "s/~//"`
    }
    if [ "${uses_tilda}" ]
    then
      file ${HOME}${jloc} | grep -i terminator > /dev/null && encrypted=1 
    else
      file ${jloc} | grep -i terminator > /dev/null && encrypted=1 
    fi
    if [ "${encrypted}" ]
    then
      options+=("Decrypt Journal")
    else
      options+=("Encrypt Journal")
    fi
    [ "${have_splash}" ] && options+=("Animations Menu")
    [ "${have_showascii}" ] && options+=("Ascii Art")
    options+=("Main Menu" "Quit")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
          "h",*|*,"h"|"H",*|*,"H"|"help",*|*,"help"|"Help",*|*,"Help")
              clear
              printf "\n"
              show_help_menu
              break
              ;;
          "New"*,*|*,"New"*)
              # To run jrnl in a terminal window:
              # tilix -t floating-jrnl -e jrnl --config-override editor ""
              jrnl ${journal}
              printf "\n\nThe new journal entry:\n\n"
              jrnl ${journal} ${formatarg} -n 1
              [ "${journal_pager}" == "${PAGER}" ] && {
                read -p "Press Enter to continue" answer
              }
              break
              ;;
          "Last"*,*|*,"Last"*)
              jrnl ${journal} ${formatarg} -n 10 | ${journal_pager} 2> /dev/null
              [ "${journal_pager}" == "${PAGER}" ] && {
                read -p "Press Enter to continue" answer
              }
              break
              ;;
          "Yesterday"*,*|*,"Yesterday"*)
              jrnl ${journal} ${formatarg} -on yesterday | ${journal_pager} 2> /dev/null
              [ "${journal_pager}" == "${PAGER}" ] && {
                read -p "Press Enter to continue" answer
              }
              break
              ;;
          "Today"*,*|*,"Today"*)
              jrnl ${journal} ${formatarg} -on today | ${journal_pager} 2> /dev/null
              [ "${journal_pager}" == "${PAGER}" ] && {
                read -p "Press Enter to continue" answer
              }
              break
              ;;
          "This Week"*,*|*,"This Week"*)
              day=`date +%A`
              jrnl ${journal} ${formatarg} -from "last ${day}" -to today | ${journal_pager} 2> /dev/null
              [ "${journal_pager}" == "${PAGER}" ] && {
                read -p "Press Enter to continue" answer
              }
              break
              ;;
          "This Month"*,*|*,"This Month"*)
              month=`date +%B`
              year=`date +%Y`
              jrnl ${journal} ${formatarg} -on "${month} ${year}" | ${journal_pager} 2> /dev/null
              [ "${journal_pager}" == "${PAGER}" ] && {
                read -p "Press Enter to continue" answer
              }
              break
              ;;
          "This Year"*,*|*,"This Year"*)
              year=`date +%Y`
              jrnl ${journal} ${formatarg} -on "${year}" | ${journal_pager} 2> /dev/null
              [ "${journal_pager}" == "${PAGER}" ] && {
                read -p "Press Enter to continue" answer
              }
              break
              ;;
          "Last Year"*,*|*,"Last Year"*)
              year=`date +%Y`
              year=$((year - 1))
              jrnl ${journal} ${formatarg} -on "${year}" | ${journal_pager} 2> /dev/null
              [ "${journal_pager}" == "${PAGER}" ] && {
                read -p "Press Enter to continue" answer
              }
              break
              ;;
          "All"*,*|*,"All"*)
              jrnl ${journal} ${formatarg} -to today | ${journal_pager} 2> /dev/null
              [ "${journal_pager}" == "${PAGER}" ] && {
                read -p "Press Enter to continue" answer
              }
              break
              ;;
          "Switch Journal"*,*|*,"Switch Journal"*)
              for (( j=0; j<${numjrnls}; j++ ));
              do
                [ "${journal}" == "${journals[$j]}" ] && {
                  k=$((j + 1))
                  if [ ${numjrnls} -gt $k ]
                  then
                    journal="${journals[$k]}"
                  else
                    journal="${journals[0]}"
                  fi
                  break
                }
              done
              break
              ;;
          "Switch Display"*,*|*,"Switch Display"*)
              if [ "${style}" == "pretty" ]
              then
                style="fancy"
                journal_pager=${PAGER}
              else
                if [ "${style}" == "fancy" ]
                then
                  style="markdown"
                  journal_pager="w3m -T text/markdown -o confirm_qq=false"
                else
                  style="pretty"
                  journal_pager=${PAGER}
                fi
              fi
              formatarg="--format ${style}"
              break
              ;;
          "Decrypt"*,*|*,"Decrypt"*)
              jrnl ${journal} --decrypt
              break
              ;;
          "Encrypt"*,*|*,"Encrypt"*)
              jrnl ${journal} --encrypt
              break
              ;;
          "Animation"*,*|*,"Animation"*)
              animation_menu=1
              break 2
              ;;
          "Ascii"*,*|*,"Ascii"*)
              art_menu=1
              break 2
              ;;
          "Main Menu",*|*,"Main Menu"|"Back",*|*,"Back"|"back",*|*,"back")
              main_menu=1
              break 2
              ;;
          "Quit",*|*,"Quit"|"quit",*|*,"quit")
              remove_fullscreen
              printf "\nExiting Asciiville\n"
              exit 0
              ;;
          *,*|*,*)
              printf "\nCould not match '${REPLY}' with a menu entry."
              printf "\nPlease try again with an exact match.\n"
              [ "${use_figlet}" ] && {
                select_font Journal
                show_figlet
              }
              ;;
      esac
      REPLY=
    done
  done
  [ "${animation_menu}" ] && {
    clear
    printf "\n\n\n"
    show_animation_menu
  }
  [ "${art_menu}" ] && {
    clear
    printf "\n\n\n"
    show_art_menu
  }
  [ "${main_menu}" ] && {
    clear
    printf "\n"
    init_vars
    show_main_menu
  }
}

show_main_menu() {
  art_menu=
  animation_menu=
  journal_menu=
  select_menu=
  while true
  do
    if [ "${AUDIO}" ]
    then
      audiostat="YES"
      audarg="-P -S ${SONG}"
    else
      audiostat="NO"
      audarg=
    fi
    if [ "${FULLSCREEN}" ]
    then
      fullstat="YES"
    else
      fullstat="NO"
    fi
    if [ "${RECORD}" ]
    then
      recordstat="YES"
    else
      recordstat="NO"
    fi
    if [ "${TMUX}" ]
    then
      usetmux="YES"
    else
      usetmux="NO"
    fi
    if [ "${BROWSER}" == "w3m" ]
    then
      default_browser="W3M"
    else
      if [ "${BROWSER}" == "lynx" ]
      then
        default_browser="Lynx"
      else
        if [ "${BROWSER}" ]
        then
          default_browser="${BROWSER}"
        else
          default_browser="None"
        fi
      fi
    fi
    [ "${COMMAND}" ] || COMMAND=btop
    show_comm=`echo ${COMMAND} | awk ' { print $1 } '`
    set_show_term
    skip_it_so=
    [ "${use_figlet}" ] && {
      select_font Asciiville
      show_figlet
    }
    PS3="${BOLD}${PLEASE} choice (numeric or text, 'h' for help): ${NORM}"
    options=()
    [ "${have_showascii}" ] && options+=("Ascii Art")
    [ "${have_splash}" ] && options+=("ASCII Animations")
    options+=("Apps & Games")
    [ "${have_bb}" ] && {
      check_display
      [ $? -eq 0 ] && options+=("AAlib Demo (X11 mode)")
    }
    [ "${have_bb}" ] && options+=("AAlib Demo (Curses mode)")
    [ "${have_mapscii}" ] && options+=("Mapscii World Map")
    [ "${have_curl}" ] && options+=("Phase of the Moon")
    options+=("Run ${show_comm} in ${show_term}")
    [ "${have_ddgr}" ] && options+=("Search the Web")
    [ "${have_curl}" ] && [ -x ${TOOLSBIN}/pokefetch ] && {
      check_display
      [ $? -eq 0 ] && options+=("Show a Pokemon")
    }
    [ "${have_speed}" ] && options+=("Speed Test")
    [ "${have_rainbow}" ] && options+=("Twitter Client")
    [ "${have_curl}" ] && options+=("Weather Report")
    options+=("Kill Tmux Sessions")
    [ "${have_lolcat}" ] && options+=("Use Lolcat Coloring        [${use_lol}]")
    options+=("Use Tmux                   [${usetmux}]")
    [ "${have_asciinema}" ] && [ "${TMUX}" ] && options+=("Record Tmux Session        [${recordstat}]")
    options+=("Fullscreen Window          [${fullstat}]")
    options+=("Default Web Browser        [${default_browser}]")
    options+=("Use Audio                  [${audiostat}]")
    options+=("Generate ASCII Art")
    [ "${have_neo}" ] && options+=("Show System Info")
    [ "${have_got}" ] && options+=("Text Translation Tool")
    [ "${have_jrnl}" ] && options+=("Journal Menu")
    [ "${have_mpplus}" ] && options+=("MusicPlayerPlus Menu")
    [ "${have_roon}" ] && options+=("RoonCommandLine Menu")
    options+=("Quit")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
          "h",*|*,"h"|"H",*|*,"H"|"help",*|*,"help"|"Help",*|*,"Help")
              clear
              printf "\n"
              show_help_menu
              skip_it_so=1
              break
              ;;
          "Run ${show_comm} in ${show_term}",*|*,"Run ${show_comm} in ${show_term}")
              break
              ;;
          "Default"*,*|*,"Default"*)
              if [ "${default_browser}" == "W3M" ]
              then
                if [ "${have_lynx}" ]
                then
                  export BROWSER=lynx
                  default_browser="Lynx"
                else
                  if [ "${SAVED_BROWSER}" ]
                  then
                    export BROWSER="${SAVED_BROWSER}"
                    default_browser="${BROWSER}"
                  else
                    export BROWSER=
                    default_browser="None"
                  fi
                fi
              else
                if [ "${default_browser}" == "Lynx" ]
                then
                  if [ "${SAVED_BROWSER}" ]
                  then
                    export BROWSER="${SAVED_BROWSER}"
                    default_browser="${BROWSER}"
                  else
                    export BROWSER=
                    default_browser="None"
                  fi
                else
                  if [ "${default_browser}" == "None" ]
                  then
                    if [ "${have_w3m}" ]
                    then
                      export BROWSER=w3m
                      default_browser="W3M"
                    else
                      if [ "${have_lynx}" ]
                      then
                        export BROWSER=lynx
                        default_browser="Lynx"
                      else
                        if [ "${SAVED_BROWSER}" ]
                        then
                          export BROWSER="${SAVED_BROWSER}"
                          default_browser="${BROWSER}"
                        else
                          export BROWSER=
                          default_browser="None"
                        fi
                      fi
                    fi
                  else
                    if [ "${BROWSER}" ]
                    then
                      export BROWSER=
                      default_browser="None"
                    else
                      if [ "${have_w3m}" ]
                      then
                        export BROWSER=w3m
                        default_browser="W3M"
                      else
                        if [ "${have_lynx}" ]
                        then
                          export BROWSER=lynx
                          default_browser="Lynx"
                        else
                          if [ "${SAVED_BROWSER}" ]
                          then
                            export BROWSER="${SAVED_BROWSER}"
                            default_browser="${BROWSER}"
                          else
                            export BROWSER=
                            default_browser="None"
                          fi
                        fi
                      fi
                    fi
                  fi
                fi
              fi
              skip_it_so=1
              break
              ;;
          "Use Lolcat"*,*|*,"Use Lolcat"*)
              if [ "${use_lolcat}" == "2" ]
              then
                use_lolcat=
                use_lol="NO"
              else
                if [ "${use_lolcat}" ]
                then
                  use_lolcat=2
                  use_lol="YES+"
                  LOLCAT="${LOLCAT_ANIM}"
                else
                  use_lolcat=1
                  use_lol="YES"
                  LOLCAT="${LOLCAT_NORM}"
                fi
              fi
              skip_it_so=1
              break
              ;;
          "AAlib Demo (Curses mode)",*|*,"AAlib Demo (Curses mode)")
              SAVED_DISPLAY="${DISPLAY}"
              export DISPLAY=""
              if [ "${AUDIO}" ]
              then
                bash ${TOOLSBIN}/bb-tmux -a
              else
                bash ${TOOLSBIN}/bb-tmux
              fi
              skip_it_so=1
              export DISPLAY="${SAVED_DISPLAY}"
              break
              ;;
          "AAlib Demo (X11 mode)",*|*,"AAlib Demo (X11 mode)")
              if [ "${AUDIO}" ]
              then
                bash ${TOOLSBIN}/bb-tmux -a
              else
                bash ${TOOLSBIN}/bb-tmux
              fi
              skip_it_so=1
              break
              ;;
          "Phase"*,*|*,"Phase"*)
              curl wttr.in/Moon?AF 2> /dev/null
              read -p "Press Enter to continue" answer
              skip_it_so=1
              break
              ;;
          "Show a Pok"*,*|*,"Show a Pok"*)
              ${TOOLSBIN}/pokefetch
              read -p "Press Enter to continue" answer
              skip_it_so=1
              break
              ;;
          "Weather"*,*|*,"Weather"*)
              printf "\n"
              [ -x ${TOOLSBIN}/weatherfetch ] && {
                ${TOOLSBIN}/weatherfetch
              }
              printf "\n"
              curl wttr.in?AFQn1 2> /dev/null | tail -n +6
              printf "\n"
              read -p "Press Enter to continue" answer
              skip_it_so=1
              break
              ;;
          "Speed"*,*|*,"Speed"*)
              speedtest-cli
              read -p "Press Enter to continue" answer
              skip_it_so=1
              break
              ;;
          "Twitter"*,*|*,"Twitter"*)
              # For 24-bit color image support, run with the '-p24' option
              # rainbowstream -p24
              rainbowstream
              skip_it_so=1
              break
              ;;
          "Search"*,*|*,"Search"*)
              ddgr
              skip_it_so=1
              break
              ;;
          "Mapscii"*,*|*,"Mapscii"*)
              mapscii
              skip_it_so=1
              break
              ;;
          "MusicPlayerPlus"*,*|*,"MusicPlayerPlus"*)
              [ "${use_figlet}" ] && {
                select_font MusicPlayer
                show_figlet
              }
              mpplus -i
              clear
              skip_it_so=1
              break
              ;;
          "RoonCommandLine"*,*|*,"RoonCommandLine"*)
              [ "${use_figlet}" ] && {
                select_font Roon
                show_figlet
              }
              roon
              clear
              skip_it_so=1
              break
              ;;
          "Show System"*,*|*,"Show System"*)
              if [ "${use_lolcat}" ]
              then
                neofetch | ${LOLCAT}
              else
                neofetch
              fi
              read -p "Press Enter to continue" answer
              skip_it_so=1
              break
              ;;
          "ASCII"*,*|*,"ASCII"*)
              animation_menu=1
              break 2
              ;;
          "Ascii Art"*,*|*,"Ascii Art"*)
              art_menu=1
              break 2
              ;;
          "Journal"*,*|*,"Journal"*)
              journal_menu=1
              break 2
              ;;
          "Apps"*,*|*,"Apps"*)
              select_menu=1
              break 2
              ;;
          "Generate"*,*|*,"Generate"*)
              generate_art
              skip_it_so=1
              break
              ;;
          "Text"*,*|*,"Text"*)
              got
              skip_it_so=1
              break
              ;;
          "Kill"*,*|*,"Kill"*)
              kill_tmux_sessions
              skip_it_so=1
              break
              ;;
          "Use Tmux"*,*|*,"Use Tmux"*)
              if [ "${TMUX}" ]
              then
                TMUX=
                RECORD=
              else
                TMUX=1
              fi
              skip_it_so=1
              break
              ;;
          "Record"*,*|*,"Record"*)
              if [ "${RECORD}" ]
              then
                RECORD=
              else
                RECORD=1
                TMUX=1
              fi
              if [ "${RECORD}" ]
              then
                COMMAND_TMUX="${COMMAND_TMUX} -r"
              else
                COMMAND_TMUX=`echo ${COMMAND_TMUX} | sed -e "s/ -r//"`
              fi
              skip_it_so=1
              break
              ;;
          "Use Audio"*,*|*,"Use Audio"*)
              if [ "${AUDIO}" ]
              then
                AUDIO=
              else
                AUDIO=1
              fi
              if [ "${AUDIO}" ]
              then
                if [ "${custom_song}" ]
                then
                  ASCSPLASH="${ASCSPLASH} -a -s ${SONG}"
                  ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -a -s ${SONG}"
                else
                  ASCSPLASH="${ASCSPLASH} -a"
                  ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -a"
                fi
                audarg="-P -S ${SONG}"
              else
                ASCSPLASH=`echo ${ASCSPLASH} | sed -e "s# -a##" -e "s# -s ${SONG}##"`
                ASCSPLASH_TMUX=`echo ${ASCSPLASH_TMUX} | sed -e "s# -a##" -e "s# -s ${SONG}##"`
                audarg=
              fi
              skip_it_so=1
              break
              ;;
          "Fullscreen"*,*|*,"Fullscreen"*)
              if [ "${FULLSCREEN}" ]
              then
                FULLSCREEN=
              else
                FULLSCREEN=1
              fi
              if [ "${FULLSCREEN}" ]
              then
                add_fullscreen
              else
                remove_fullscreen
              fi
              skip_it_so=1
              break
              ;;
          "Quit",*|*,"Quit"|"quit",*|*,"quit")
              remove_fullscreen
              printf "\nExiting Asciiville\n"
              exit 0
              ;;
          *,*|*,*)
              printf "\nCould not match '${REPLY}' with a menu entry."
              printf "\nPlease try again with an exact match.\n"
              [ "${use_figlet}" ] && {
                select_font Asciiville
                show_figlet
              }
              ;;
      esac
      REPLY=
    done
    [ "${skip_it_so}" ] || {
      make_it_so
      init_vars
    }
  done
  [ "${art_menu}" ] && {
    clear
    printf "\n\n\n"
    show_art_menu
  }
  [ "${animation_menu}" ] && {
    clear
    printf "\n\n\n"
    show_animation_menu
  }
  [ "${journal_menu}" ] && {
    clear
    printf "\n\n\n"
    show_journal_menu
  }
  [ "${select_menu}" ] && {
    clear
    printf "\n\n\n"
    show_select_menu
  }
}

choose_folder() {
  TMP="$(mktemp)"
  ranger --choosedir="${TMP}" "${HOME}" 1>&2
  cat ${TMP}
  rm  -f ${TMP}
}

choose_ascii() {
  TMP="$(mktemp)"
  ranger --choosefiles="${TMP}" "${ARTDIR}" 1>&2
  artfiles=
  while read line
  do
    if [ "${artfiles}" ]
    then
      artfiles="${artfiles},${line}"
    else
      artfiles="${line}"
    fi
  done < <(cat ${TMP})

  echo "${artfiles}" 
  rm  -f ${TMP}
}

choose_song() {
  TMP="$(mktemp)"
  ranger --choosefile="${TMP}" "${HOME}/Music" 1>&2
  cat ${TMP}
  rm  -f ${TMP}
}

select_input_dir() {
  if [ "${have_ranger}" ]
  then
    echo ""
    echo "Choosing a directory in Ranger is done by visiting a directory"
    echo ""
    echo "Use the arrow keys to browse folders"
    echo "Press 'Enter' to enter a directory"
    echo "Create a new directory with ':mkdir <dirname>'"
    echo ""
    echo "While in the directory you wish to select, quit Ranger with 'q'"
    echo ""
    while true
    do
      read -p "Select image input directory now? (y/n) " answer
      case ${answer} in
        [Yy]* )
          image_dir="$(choose_folder)"
          echo ""
          echo "Selected image input directory = ${image_dir}"
          echo ""
          break
          ;;
        [Nn]* )
          printf "\nSkipping image input directory selection.\n"
          image_dir=
          break
          ;;
        * ) echo "Please answer 'y' to select directory, or 'n' to skip."
          ;;
      esac
    done
  else
    image_dir=$(dialog --stdout \
                          --title "Please select an image input folder" \
                          --fselect ${HOME}/Pictures/ 14 48)
  fi
}

select_output_dir() {
  if [ "${have_ranger}" ]
  then
    echo ""
    echo "Choosing a directory in Ranger is done by visiting a directory"
    echo ""
    echo "Use the arrow keys to browse folders"
    echo "Press 'Enter' to enter a directory"
    echo "Create a new directory with ':mkdir <dirname>'"
    echo ""
    echo "While in the directory you wish to select, quit Ranger with 'q'"
    echo ""
    while true
    do
      read -p "Select ascii art output directory now? (y/n) " answer
      case ${answer} in
        [Yy]* )
          ascii_dir="$(choose_folder)"
          echo ""
          echo "Selected ASCII Art output directory = ${ascii_dir}"
          echo ""
          break
          ;;
        [Nn]* )
          printf "\nSkipping ascii art output directory selection.\n"
          ascii_dir=
          break
          ;;
        * ) echo "Please answer 'y' to select directory, or 'n' to skip."
          ;;
      esac
    done
  else
    ascii_dir=$(dialog --stdout \
                          --title "Please select an ascii art output folder" \
                          --fselect ${HOME}/Pictures/ 14 48)
  fi
}

select_ascii() {
  selectedAscii=
  if [ "${have_ranger}" ]
  then
    selectedAscii="$(choose_ascii)"
  else
    selectedAscii=$(dialog --stdout \
                          --title "Please select an ascii art file" \
                          --fselect ${ARTDIR}/ 14 48)
  fi
  [ "${selectedAscii}" ] && show_art_file "${selectedAscii}"
}

select_song() {
  if [ "${have_ranger}" ]
  then
    selectedSong="$(choose_song)"
  else
    selectedSong=$(dialog --stdout \
                          --title "Please select a song" \
                          --fselect ${HOME}/Music/ 14 48)
  fi
  songfile=
  file "${selectedSong}" | grep -i audio > /dev/null || \
  file "${selectedSong}" | grep Ogg > /dev/null && songfile=1
  [ "${songfile}" ] && {
    SONG="${selectedSong}"
    songname=`basename "${SONG}"`
    songleng=`echo ${songname} | wc -c`
    [ ${songleng} -gt 16 ] && {
      trimleng=$((songleng - 16))
      songname="${songname::-${trimleng}}..."
    }
    custom_song=1
  }
}

set_show_term() {
  if [ "${KITTY}" ]
  then
    show_term="Kitty"
  else
    if [ "${GNOME}" ]
    then
      show_term="Gnome"
    else
      if [ "${XFCE4}" ]
      then
        show_term="XFCE4"
      else
        if [ "${TILIX}" ]
        then
          show_term="Tilix"
        else
          if [ "${RETRO}" ]
          then
            show_term="Retro"
          else
            show_term="Current"
          fi
        fi
      fi
    fi
  fi
}

init_vars() {
  MTITLE="Asciiville"
  COMMAND_TMUX="bash ${TOOLSBIN}/btop-tmux"
  ASCSPLASH="asciisplash"
  ASCSPLASH_TMUX="bash ${TOOLSBIN}/asciisplash-tmux"

  INTERACTIVE=
  RECORD=
  DO_SPLASH=
  TMUX_ASC=
  TMUX_SPLASH=
}

have_gnome=`type -p gnome-terminal`
have_kitty=`type -p kitty`
have_tilix=`type -p tilix`
# Check if initialization has been run
[ -f ${CONFIG} ] || {
  echo ""
  echo "Asciiville initialization needs to be run once."
  echo "Answer 'y' to initialize, 'n' to skip it for now,"
  echo "or 'i' to skip and ignore this in the future"
  echo ""
  echo "Note: console mode initialization needs to be done with the 'ascinit'"
  echo "      command. On a headless system or system without X11 windowing,"
  echo "      answer 'n' here, exit 'asciiville', and run 'ascinit -c'"
  echo ""
  while true
  do
    read -p "Initialize Asciiville (with terminal emulators) now [y/n/i] " answer
    case ${answer} in
      [Ii]* )
        printf "\nIgnoring initialization.\n"
        printf "\nInitialize Asciiville by executing the command 'ascinit'\n"
        read -p "Press Enter to continue" contans
        [ -d ${HOME}/.config ] || mkdir ${HOME}/.config
        [ -d ${HOME}/.config/asciiville ] || mkdir ${HOME}/.config/asciiville
        touch ${CONFIG}
        break
        ;;
      [Yy]* )
        ascinit -a -q
        break
        ;;
      [Nn]* )
        printf "\nSkipping initialization.\n"
        printf "\nInitialize Asciiville by executing the command 'ascinit'\n"
        read -p "Press Enter to continue" contans
        break
        ;;
      * ) echo "Please answer 'y' to initialize, 'n' to skip, or 'i' to ignore."
        ;;
    esac
  done
}

FULLSCREEN=
init_vars
# Without any arguments, bring up interactive dialog menu
[ $# -eq 0 ] && INTERACTIVE=1
have_aewan=`type -p aewan`
have_btop=`type -p btop`
if [ -x ${TOP}/share/endoh1/endoh1 ]
then
  have_endo=1
else
  have_endo=
fi
have_gum=`type -p gum`
have_mutt=`type -p mutt`
have_neomutt=`type -p neomutt`
have_nethack=`type -p nethack`
have_newsboat=`type -p newsboat`
have_ninvaders=`type -p ninvaders`
have_ranger=`type -p ranger`
have_retro=`type -p cool-retro-term`
have_tetris=`type -p tetris`
have_tuir=`type -p tuir`
have_asciiart=`type -p asciiart`
have_asciijulia=`type -p asciijulia`
have_asciiplasma=`type -p asciiplasma`
have_asciimpplus=`type -p asciimpplus`
have_asciinema=`type -p asciinema`
have_bb=`type -p bb`
have_cmatrix=`type -p cmatrix`
have_curl=`type -p curl`
have_ddgr=`type -p ddgr`
have_figlet=`type -p figlet`
have_gdu=`type -p gdu`
have_got=`type -p got`
have_ncdu=`type -p ncdu`
have_mapscii=`type -p mapscii`
have_mpcplus=`type -p mpcplus`
have_mpplus=`type -p mpplus`
have_mplayer=`type -p mplayer`
have_neo=`type -p neofetch`
have_cbftp=`type -p cbftp`
have_ncftp=`type -p ncftp`
have_lolcat=`type -p lolcat`
[ "${have_lolcat}" ] || {
  use_lolcat=
  use_lol="NO"
}
have_rainbow=`type -p rainbowstream`
have_rich=`type -p rich`
have_roon=`type -p roon`
have_speed=`type -p speedtest-cli`
have_splash=`type -p asciisplash`
have_showascii=`type -p show_ascii_art`
have_xfce4=`type -p xfce4-terminal`
have_jrnl=`type -p jrnl`
have_lynx=`type -p lynx`
have_w3m=`type -p w3m`
have_wmctrl=`type -p wmctrl`
have_xprop=`type -p xprop`
isfull=
image_dir=
ascii_dir=
custom_song=
[ "${use_lol}" ] || {
  use_lolcat=
  use_lol="NO"
}
if [ "${have_figlet}" ]
then
  use_figlet=1
  [ -d "${FIG_FONTS}" ] || {
    if [ -d "${HOME_FIG_FONTS}" ]
    then
      FIG_FONTS="${HOME_FIG_FONTS}"
    else
      use_figlet=
    fi
  }
else
  use_figlet=
fi

[ "${have_jrnl}" ] && {
  [ "${PAGER}" ] || PAGER=more
  journal_pager=${PAGER}
  declare -a journals=()
  numjrnls=`jrnl --list | grep '*' | wc -l`
  if [ ${numjrnls} -gt 1 ]
  then
    IFS=$'\n' read -r -d '' -a journals < <( jrnl --list | grep '*' | awk ' { print $2 } ' && printf '\0' )
  else
    journals=("default")
  fi
  numjrnls=${#journals[@]}
}


SAVED_BROWSER=
if [ "${BROWSER}" ]
then
  [ "${BROWSER}" == "w3m" ] || [ "${BROWSER}" == "lynx" ] || {
    # The user set a custom BROWSER env var
    SAVED_BROWSER="${BROWSER}"
  }
else
  # We prefer W3M over Lynx
  if [ "${have_w3m}" ]
  then
    [ "${BROWSER}" ] || BROWSER=w3m
  else
    [ "${have_lynx}" ] && {
      [ "${BROWSER}" ] || BROWSER=lynx
    }
  fi
fi
export BROWSER

fontargs=
set_font_size=1
uses_ansi_escape=1
scale_art_font=1
scale_txt_font=1

cycle=
noaudio=
randomplay=
showart=
show_neofetch=
slideshow=
while getopts "Aabc:CdD:E:fFgiIjJkKlL:mMn:NpP:rRSs:tTUvV:wWxXyYzZu" flag; do
  case $flag in
    A)
      ASCSPLASH="${ASCSPLASH} -i"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l art"
      ;;
    a)
      AUDIO=1
      audarg="-P -S ${SONG}"
      ;;
    b)
      ASCSPLASH="${ASCSPLASH} -b"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -b"
      ;;
    C)
      cycle=1
      ;;
    c)
      COMMAND="${OPTARG}"
      case "${COMMAND}" in
      endo|Endo)
          [ "${have_endo}" ] && bash -m ${TOP}/bin/show_endo
          exit 0
          ;;
      maps|Maps)
          [ "${have_mapscii}" ] && mapscii
          exit 0
          ;;
      moon|Moon)
          [ "${have_curl}" ] && curl wttr.in/Moon?AF 2> /dev/null
          exit 0
          ;;
      news|News)
          COMMAND=newsboat
          MTITLE="Asciiville News"
          [ "${have_newsboat}" ] || {
            not_in_path newsboat -c
            if [ "${have_btop}" ]
            then
              echo "Continuing, using btop rather than ${COMMAND}."
              COMMAND=btop
              MTITLE="Btop++ System Monitor"
            else
              if [ "${have_lynx}" ]
              then
                echo "Continuing, using lynx rather than ${COMMAND}."
                COMMAND="lynx ${WEB_HOME}"
                MTITLE="Lynx Web Browser"
              else
                echo "Continuing, using asciiart rather than ${COMMAND}."
                COMMAND=asciiart
                MTITLE="Asciiville ASCIImatics"
              fi
            fi
          }
          break
          ;;
      pok*|Pok*)
          check_display
          [ $? -eq 0 ] && {
            [ "${have_curl}" ] && {
              [ -x ${TOOLSBIN}/pokefetch ] && {
                ${TOOLSBIN}/pokefetch
                exit 0
              }
            }
          }
          INTERACTIVE=1
          ;;
      reddit|Reddit)
          [ "${have_tuir}" ] && tuir
          exit 0
          ;;
      search|Search)
          [ "${have_ddgr}" ] && ddgr
          exit 0
          ;;
      speed|Speed)
          [ "${have_speed}" ] && speedtest-cli
          exit 0
          ;;
      splash|Splash)
          [ "${have_gum}" ] && {
            [ -x ${TOOLSBIN}/asciifetch ] && {
              clear
              ${TOOLSBIN}/asciifetch -a -f
              ${TOOLSBIN}/asciifetch -z -f
            }
          }
          exit 0
          ;;
      translate|Translate)
          [ "${have_got}" ] && got
          exit 0
          ;;
      twitter|Twitter)
          [ "${have_rainbow}" ] && rainbowstream
          exit 0
          ;;
      weather|Weather)
          [ "${have_curl}" ] && {
            [ -x ${TOOLSBIN}/weatherfetch ] && {
              ${TOOLSBIN}/weatherfetch
            }
            printf "\n"
            curl wttr.in?AFQn1 2> /dev/null | tail -n +6
          }
          exit 0
          ;;
      *)
          FIRST=`echo ${COMMAND} | awk ' { print $1 } '`
          MTITLE="Asciiville ${COMMAND}"
          type -p "${FIRST}" > /dev/null || {
            not_in_path ${FIRST} -c
            if [ "${have_btop}" ]
            then
              echo "Continuing, using btop rather than ${COMMAND}."
              COMMAND=btop
              MTITLE="Btop++ System Monitor"
            else
              if [ "${have_lynx}" ]
              then
                echo "Continuing, using lynx rather than ${COMMAND}."
                COMMAND="lynx ${WEB_HOME}"
                MTITLE="Lynx Web Browser"
              else
                echo "Continuing, using asciiart rather than ${COMMAND}."
                COMMAND=asciiart
                MTITLE="Asciiville ASCIImatics"
              fi
            fi
          }
          break
          ;;
      esac
      ;;
    d)
      COMMAND="gdu ${HOME}"
      MTITLE="Disk Usage Analyzer"
      [ "${have_gdu}" ] || {
        not_in_path gdu -d
        if [ "${have_ncdu}" ]
        then
          echo "Continuing, using ncdu rather than gdu."
          COMMAND="ncdu ${HOME}"
        else
          if [ "${have_btop}" ]
          then
            echo "Continuing, using btop rather than ${COMMAND}."
            COMMAND=btop
            MTITLE="Btop++ System Monitor"
          else
            if [ "${have_ranger}" ]
            then
              echo "Continuing, using ranger rather than ${COMMAND}."
              COMMAND=ranger
              MTITLE="Ranger File Manager"
            else
              echo "Continuing, using asciiart rather than ${COMMAND}."
              COMMAND=asciiart
              MTITLE="Asciiville ASCIImatics"
            fi
          fi
        fi
      }
      ;;
    D)
      show_interval=${OPTARG}
      ;;
    E)
      randomplay=1
      shuffle=1
      length=${OPTARG}
      ;;
    f)
      COMMAND=cbftp
      MTITLE="Cbftp FTP Client"
      [ "${have_cbftp}" ] || {
        if [ "${have_ncftp}" ]
        then
          COMMAND=ncftp
          MTITLE="Ncftp FTP Client"
        else
          not_in_path cbftp -f
          if [ "${have_btop}" ]
          then
            echo "Continuing, using btop rather than ${COMMAND}."
            COMMAND=btop
            MTITLE="Btop++ System Monitor"
          else
            if [ "${have_lynx}" ]
            then
              echo "Continuing, using lynx rather than ${COMMAND}."
              COMMAND="lynx ${WEB_HOME}"
              MTITLE="Lynx Web Browser"
            else
              echo "Continuing, using asciiart rather than ${COMMAND}."
              COMMAND=asciiart
              MTITLE="Asciiville ASCIImatics"
            fi
          fi
        fi
      }
      ;;
    F)
      FULLSCREEN=1
      ;;
    g)
      if [ "${have_gnome}" ]
      then
        CURRENT=
        XFCE4=
        TILIX=
        KITTY=
        RETRO=
        GNOME=1
      else
        GNOME=
        not_in_path gnome-terminal -g
        select_alt_term
      fi
      ;;
    i)
      INTERACTIVE=1
      ;;
    I)
      [ "${have_neo}" ] && {
        show_neofetch=1
      }
      ;;
    j)
      ASCSPLASH="${ASCSPLASH} -j"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l julia"
      ;;
    J)
      ASCSPLASH="${ASCSPLASH} -J"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -J"
      ;;
    k)
      if [ "${have_kitty}" ]
      then
        CURRENT=
        XFCE4=
        TILIX=
        RETRO=
        GNOME=
        KITTY=1
      else
        KITTY=
        not_in_path kitty -g
        select_alt_term
      fi
      ;;
    K)
      kill_tmux_sessions
      exit 0
      ;;
    l)
      COMMAND="lynx ${WEB_HOME}"
      MTITLE="Lynx Web Browser"
      [ "${have_lynx}" ] || {
        not_in_path lynx -l
        if [ "${have_w3m}" ]
        then
          echo "Continuing, using w3m rather than lynx."
          COMMAND="w3m -v ${WEB_HOME}"
          MTITLE="W3M Web Browser"
        else
          if [ "${have_btop}" ]
          then
            echo "Continuing, using btop rather than ${COMMAND}."
            COMMAND=btop
            MTITLE="Btop++ System Monitor"
          else
            if [ "${have_ranger}" ]
            then
              echo "Continuing, using ranger rather than ${COMMAND}."
              COMMAND=ranger
              MTITLE="Ranger File Manager"
            else
              echo "Continuing, using asciiart rather than ${COMMAND}."
              COMMAND=asciiart
              MTITLE="Asciiville ASCIImatics"
            fi
          fi
        fi
      }
      ;;
    L)
      if [ "${have_lolcat}" ]
      then
        use_lolcat=${OPTARG}
        if [ "${use_lolcat}" == "2" ]
        then
          use_lol="YES+"
          LOLCAT="${LOLCAT_ANIM}"
        else
          if [ "${use_lolcat}" == "1" ]
          then
            use_lol="YES"
            LOLCAT="${LOLCAT_NORM}"
          else
            use_lolcat=
            use_lol="NO"
          fi
        fi
      else
        use_lolcat=
        use_lol="NO"
      fi
      if [ "${use_lolcat}" ]
      then
        lolarg="-l ${use_lolcat}"
      else
        lolarg=
      fi
      ;;
    m)
      ASCSPLASH="${ASCSPLASH} -m"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l mpplus"
      ;;
    M)
      COMMAND=mpcplus
      MTITLE="Music Player Plus MPD Client"
      [ "${have_mpcplus}" ] || {
        not_in_path mpcplus -M
        if [ "${have_btop}" ]
        then
          echo "Continuing, using btop rather than ${COMMAND}."
          COMMAND=btop
          MTITLE="Btop++ System Monitor"
        else
          if [ "${have_ranger}" ]
          then
            echo "Continuing, using ranger rather than ${COMMAND}."
            COMMAND=ranger
            MTITLE="Ranger File Manager"
          else
            echo "Continuing, using asciiart rather than ${COMMAND}."
            COMMAND=asciiart
            MTITLE="Asciiville ASCIImatics"
          fi
        fi
      }
      ;;
    n)
      ASCSPLASH="${ASCSPLASH} -c ${OPTARG}"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -c ${OPTARG}"
      ;;
    N)
      ASCSPLASH="${ASCSPLASH} -C"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -t"
      ;;
    p)
      ASCSPLASH="${ASCSPLASH} -p"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l plasma"
      ;;
    P)
      COMMAND_TMUX="${COMMAND_TMUX} -p ${OPTARG}"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l ${OPTARG}"
      ;;
    r)
      if [ "${have_retro}" ]
      then
        CURRENT=
        XFCE4=
        TILIX=
        KITTY=
        RETRO=1
        GNOME=
      else
        RETRO=
        not_in_path cool-retro-term -r
        select_alt_term
      fi
      ;;
    R)
      [ "${have_asciinema}" ] && {
        RECORD=1
        TMUX=1
        COMMAND_TMUX="${COMMAND_TMUX} -r"
        ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -R"
      }
      ;;
    S)
      DO_SPLASH=1
      MTITLE="ASCIImatics Animation"
      ;;
    s)
      ASCSPLASH="${ASCSPLASH} -s ${OPTARG}"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -s ${OPTARG}"
      ;;
    t)
      if [ "${have_tilix}" ]
      then
        CURRENT=
        XFCE4=
        TILIX=1
        KITTY=
        RETRO=
        GNOME=
      else
        TILIX=
        not_in_path tilix -t
        select_alt_term
      fi
      ;;
    T)
      TMUX=1
      ;;
    U)
      if [ "${have_ninvaders}" ]
      then
        COMMAND=ninvaders
        MTITLE="Ninvaders Video Game"
      else
        not_in_path ninvaders -U
      fi
      ;;
    v)
      [ -f "${DSHARE}/VERSION" ] || {
        echo "Asciiville VERSION file not installed"
        exit 1
      }
      . "${DSHARE}/VERSION"
      echo "Asciiville version ${VERSION} release ${RELEASE}"
      exit 0
      ;;
    V)
      slideshow="${OPTARG}"
      ;;
    W)
      if [ "${have_cmatrix}" ]
      then
        COMMAND="cmatrix -u 8"
        MTITLE="Matrix Screen"
      else
        not_in_path cmatrix -W
      fi
      ;;
    w)
      COMMAND="w3m -v ${WEB_HOME}"
      MTITLE="W3M Web Browser"
      [ "${have_w3m}" ] || {
        not_in_path w3m -w
        if [ "${have_lynx}" ]
        then
          echo "Continuing, using lynx rather than w3m."
          COMMAND="lynx ${WEB_HOME}"
          MTITLE="Lynx Web Browser"
        else
          if [ "${have_btop}" ]
          then
            echo "Continuing, using btop rather than ${COMMAND}."
            COMMAND=btop
            MTITLE="Btop++ System Monitor"
          else
            if [ "${have_ranger}" ]
            then
              echo "Continuing, using ranger rather than ${COMMAND}."
              COMMAND=ranger
              MTITLE="Ranger File Manager"
            else
              echo "Continuing, using asciiart rather than ${COMMAND}."
              COMMAND=asciiart
              MTITLE="Asciiville ASCIImatics"
            fi
          fi
        fi
      }
      ;;
    X)
      CURRENT=1
      XFCE4=
      TILIX=
      KITTY=
      RETRO=
      GNOME=
      ;;
    x)
      if [ "${have_xfce4}" ]
      then
        CURRENT=
        XFCE4=1
        TILIX=
        KITTY=
        RETRO=
        GNOME=
      else
        XFCE4=
        not_in_path xfce4-terminal -x
        select_alt_term
      fi
      ;;
    Y)
      if [ "${have_nethack}" ]
      then
        COMMAND=nethack
        MTITLE="NetHack Dungeon Game"
      else
        not_in_path nethack -Y
      fi
      ;;
    y)
      COMMAND=ranger
      MTITLE="Ranger File Manager"
      [ "${have_ranger}" ] || {
        not_in_path ranger -y
        if [ "${have_btop}" ]
        then
          echo "Continuing, using btop rather than ${COMMAND}."
          COMMAND=btop
          MTITLE="Btop++ System Monitor"
        else
          if [ "${have_lynx}" ]
          then
            echo "Continuing, using lynx rather than ${COMMAND}."
            COMMAND=lynx
            MTITLE="Lynx Web Browser"
          else
            echo "Continuing, using asciiart rather than ${COMMAND}."
            COMMAND=asciiart
            MTITLE="Asciiville ASCIImatics"
          fi
        fi
      }
      ;;
    Z)
      noaudio=1
      ;;
    z)
      COMMAND=neomutt
      MTITLE="NeoMutt Mail Client"
      [ "${have_neomutt}" ] || {
        if [ "${have_mutt}" ]
        then
          COMMAND=mutt
          MTITLE="Mutt Mail Client"
        else
          not_in_path mutt -z
          if [ "${have_btop}" ]
          then
            echo "Continuing, using btop rather than ${COMMAND}."
            COMMAND=btop
            MTITLE="Btop++ System Monitor"
          else
            if [ "${have_lynx}" ]
            then
              echo "Continuing, using lynx rather than ${COMMAND}."
              COMMAND="lynx ${WEB_HOME}"
              MTITLE="Lynx Web Browser"
            else
              echo "Continuing, using asciiart rather than ${COMMAND}."
              COMMAND=asciiart
              MTITLE="Asciiville ASCIImatics"
            fi
          fi
        fi
      }
      ;;
    u)
      usage
      ;;
    esac
done
shift $((OPTIND-1))

# The -T option says use tmux, -S says do asciimatics
# If we have both then do asciimatics in tmux
# If just the -T then do command in tmux
[ "${TMUX}" ] && {
  if [ "${DO_SPLASH}" ]
  then
    TMUX_SPLASH=1
  else
    TMUX_ASC=1
  fi
}

# If no terminal was specified on the command line, use kitty if available
[ "${KITTY}" ] || [ "${GNOME}" ] || [ "${TILIX}" ] || [ "${RETRO}" ] || [ "${CURRENT}" ] || [ "${XFCE4}" ] || {
  select_alt_term
}

# Make sure only one terminal is selected
if [ "${CURRENT}" ]
then
  KITTY=
  XFCE4=
  TILIX=
  GNOME=
  RETRO=
else
  if [ "${KITTY}" ]
  then
    TILIX=
    GNOME=
    RETRO=
    XFCE4=
  else
    if [ "${XFCE4}" ]
    then
      TILIX=
      GNOME=
      RETRO=
    else
      if [ "${TILIX}" ]
      then
        GNOME=
        RETRO=
      else
        [ "${GNOME}" ] && RETRO=
      fi
    fi
  fi
fi

[ "${show_neofetch}" ] && {
  if [ "${use_lolcat}" ]
  then
    neofetch | ${LOLCAT}
  else
    neofetch
  fi
  read -p "Press Enter to continue" answer
}

[ "${noaudio}" ] && {
  AUDIO=
  audarg=
}
[ "${AUDIO}" ] && {
  if [ "${have_mplayer}" ]
  then
    audarg="-P -S ${SONG}"
    ASCSPLASH="${ASCSPLASH} -a"
    ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -a"
  else
    AUDIO=
    audarg=
  fi
}

if [ "${cycle}" ]
then
  cycarg="-c"
else
  cycarg=
fi
if [ "${use_lolcat}" ]
then
  lolarg="-l ${use_lolcat}"
else
  lolarg=
fi
if [ "${AUDIO}" ]
then
  audarg="-P -S ${SONG}"
else
  audarg=
fi

artfiles=
[ "$1" ] && artfiles="$1"
for art in "$@"
do
  [ "${art}" == "${artfiles}" ] && continue
  artfiles="${artfiles},${art}"
done
[ "${slideshow:0:6}" == "files=" ] && {
  showfile=`echo ${slideshow} | awk -F '=' ' { print $2 } '`
  [ -f "${showfile}" ] && {
    slideshow="files"
    while read artslide
    do
      [ "${artslide}" ] && {
        if [ "${artfiles}" ]
        then
          artfiles="${artfiles},${artslide}"
        else
          artfiles="${artslide}"
        fi
      }
    done < <(cat "${showfile}")
  }
}
[ "${artfiles}" ] && {
  show_art_file "${artfiles}"
  exit 0
}

[ "${slideshow}" ] && {
  play_slide_show ${slideshow}
  exit 0
}

[ "${randomplay}" ] && {
  play_random_show ${length}
  exit 0
}

[ "${INTERACTIVE}" ] && {
  songname=`basename "${SONG}"`
  songleng=`echo ${songname} | wc -c`
  [ ${songleng} -gt 16 ] && {
    trimleng=$((songleng - 16))
    songname="${songname::-${trimleng}}..."
  }
  set_show_term
  [ "${FULLSCREEN}" ] && add_fullscreen
  trap 'set_user_conf' SIGINT SIGTERM SIGHUP EXIT
  clear
  [ "${have_gum}" ] && [ -x ${TOOLSBIN}/asciifetch ] && {
    ${TOOLSBIN}/asciifetch -a -q
    [ $? -eq 0 ] || tput cup 0 0 2> /dev/null
  }
  show_main_menu
}

make_it_so
