#!/bin/bash
#
# asciiville - front-end for a variety of terminal and/or `tmux` sessions.
#
#     The `asciiville` command can be used to invoke:
#
#     * The lightweight character based system monitor, `btop`
#     * The lightweight character based web browser, `lynx`
#     * The lightweight character based mail client, `neomutt`
#     * The lightweight character based file manager, `ranger`
#     * One or more terminal emulators running a specified command
#     * A tmux session
#     * A network upload/download speed test
#     * A web search
#     * Character based ASCII art
#     * Command line character based Twitter client
#     * Display system info
#     * Any character based client the user wishes to run
#     * One of several asciimatics animations optionally accompanied by audio
#
# Written by Ronald Joe Record <ronaldrecord@gmail.com>
# April, 2022
#

BOLD=$(tput bold)
NORMAL=$(tput sgr0)
PLEASE="Please enter your"
COMMAND=btop
MTITLE="Btop++ System Monitor"

if [ `echo $PATH | grep -c /usr/local/bin` -ne "1" ]
then
  export PATH="$PATH:/usr/local/bin"
fi
if [ `echo $PATH | grep -c /usr/games` -ne "1" ]
then
  export PATH="$PATH:/usr/games"
fi

usage() {
  printf "\nUsage: asciiville [-a] [-A] [-b] [-c command] [-f] [-g] [-i]"
  printf "\n\t\t[-I] [-jJ] [-k] [-l] [-m] [-n num] [-N] [-p] [-P script]"
  printf "\n\t\t[-r] [-R] [-s song] [-S] [-t] [-T] [-x] [-y] [-z] [-u]\n"
  printf "\nTerminal/Command options:"
  printf "\n\t-c 'command' indicates use 'command'"
  printf "\n\t\tIf 'command' is keyword 'moon' then display the phase of the Moon"
  printf "\n\t\tIf 'command' is keyword 'search' then a web search is performed"
  printf "\n\t\tIf 'command' is keyword 'speed' then a speed test is performed"
  printf "\n\t\tIf 'command' is keyword 'twitter' then a Twitter client is run"
  printf "\n\t\tIf 'command' is keyword 'weather' then display a weather report"
  printf "\n\t\tOtherwise, 'command' will be executed in a terminal window"
  printf "\n\t-f indicates fullscreen display"
  printf "\n\t-g indicates use gnome terminal emulator"
  printf "\n\t-i indicates start asciiville in interactive mode"
  printf "\n\t-I indicates display system info"
  printf "\n\t-l indicates use lynx as the default command"
  printf "\n\t-P script specifies the ASCIImatics script to run in visualizer pane"
  printf "\n\t-r indicates use retro terminal emulator"
  printf "\n\t-t indicates use tilix terminal emulator"
  printf "\n\t-x indicates use xfce4 terminal emulator"
  printf "\n\t-y indicates use ranger as the default command"
  printf "\n\t-z indicates use neomutt as the default command\n"
  printf "\nASCIImatics animation options:"
  printf "\n\t-A indicates use Art Images scenes in ASCIImatics display"
  printf "\n\t-a indicates play audio during ASCIImatics display"
  printf "\n\t-b indicates use backup audio during ASCIImatics display"
  printf "\n\t-j indicates use Julia Set scenes in ASCIImatics display"
  printf "\n\t-J indicates Julia Set with several runs using different parameters"
  printf "\n\t-m indicates use MusicPlayerPlus scenes in ASCIImatics display"
  printf "\n\t-n num specifies the number of times to cycle ASCIImatics scenes"
  printf "\n\t-N indicates use alternate comments in Plasma ASCIImatics scenes"
  printf "\n\t-p indicates use Plasma scenes in ASCIImatics display"
  printf "\n\t-s song specifies a song to accompany an ASCIImatics animation"
  printf "\n\t\t'song' can be the full pathname to an audio file or a"
  printf "\n\t\trelative pathname to an audio file in the MPD music library"
  printf "\n\t\tor $HOME/Music/"
  printf "\n\t-S indicates display ASCIImatics splash animation\n"
  printf "\nGeneral options:"
  printf "\n\t-k indicates kill Asciiville tmux sessions and ASCIImatics scripts"
  printf "\n\t-R indicates record tmux session with asciinema"
  printf "\n\t-T indicates use a tmux session for either ASCIImatics or command"
  printf "\n\t-u displays this usage message and exits\n"
  printf "\nType 'man asciiville' for detailed usage info on asciiville"
  printf "\nType 'man btop' for detailed usage info on the btop system monitor"
  printf "\nType 'man asciisplash' for detailed usage info on the asciisplash command\n"
  exit 1
}

kill_tmux_sessions() {
  SESSIONS="asciiville asciisplash"
  for session in ${SESSIONS}
  do
    ps -ef | grep tmux | grep ${session} > /dev/null && {
      tmux kill-session -t ${session}
    }
  done
  ASCIIS="asciiart asciijulia asciimpplus asciiplasma"
  for ascii in ${ASCIIS}
  do
    ps -ef | grep -v grep | grep ${ascii} > /dev/null && {
      ps -ef | grep -v grep | grep ${ascii} | while IFS= read -r line
      do
        pid=`echo "$line" | awk ' { print $2 } '`
        kill ${pid}
      done 
    }
  done
}

make_it_so() {
  # Fullscreen tmux sessions and ASCIImatics Animations
  [ "${SPLASH}" ] || [ "${TMUX_ASC}" ] && FULLSCREEN=1

  # Set the command to use based on command line switches (-S, -T)
  AVCOMM="${COMMAND}"
  if [ "${SPLASH}" ]
  then
    if [ "${TMUX_SPLASH}" ]
    then
      AVCOMM="${ASCSPLASH_TMUX}"
    else
      AVCOMM="${ASCSPLASH}"
    fi
  else
    [ "${TMUX_ASC}" ] && AVCOMM="${COMMAND_TMUX}"
  fi

  # Begin terminal command startup section
  if [ "${RETRO}" ]
  then
    if [ "${FULLSCREEN}" ]
    then
      cool-retro-term --fullscreen -e "${AVCOMM}" 2> /dev/null &
    else
      cool-retro-term -e "${AVCOMM}" 2> /dev/null &
    fi
  else
    if [ "${FULLSCREEN}" ]
    then
      if [ "${TILIX}" ]
      then
        tilix --title="${MTITLE}" \
              --full-screen \
              --window-style=borderless \
              --profile=MusicPlayer \
              --command="${AVCOMM}" 2> /dev/null &
      else
        if [ "${XFCE4}" ]
        then
          xfce4-terminal --title "${MTITLE}" \
              --icon=audio-player \
              --hide-menubar \
              --hide-toolbar \
              --hide-scrollbar \
              --fullscreen \
              --command="${AVCOMM}" &
        else
          gnome-terminal -t "${MTITLE}" \
              --hide-menubar \
              --full-screen \
              -- ${AVCOMM} &
        fi
      fi
    else
      if [ "${TILIX}" ]
      then
        tilix --title="${MTITLE}" \
              --window-style=borderless \
              --geometry=90x24+150+25 \
              --profile=MusicPlayer \
              --command="${AVCOMM}" 2> /dev/null &
      else
        if [ "${XFCE4}" ]
        then
          xfce4-terminal --title "${MTITLE}" \
            --icon=audio-player \
            --hide-menubar \
            --hide-toolbar \
            --hide-scrollbar \
            --geometry 90x24+150+25 \
            --command="${AVCOMM}" &
        else
          gnome-terminal -t "${MTITLE}" \
              --hide-menubar \
              --geometry 90x24+150+25 \
              -- ${AVCOMM} &
        fi
      fi
    fi
  fi
  # End terminal command startup section
}

show_ascii_menu() {
  while true
  do
    SPLASH=1
    if [ "${AUDIO}" ]
    then
      audiostat="YES"
    else
      audiostat="NO"
    fi
    if [ "${RECORD}" ]
    then
      recordstat="YES"
    else
      recordstat="NO"
    fi
    if [ "${TMUX}" ]
    then
      usetmux="YES"
    else
      usetmux="NO"
    fi
    skip_it_so=
    PS3="${BOLD}${PLEASE} command choice (numeric or text): ${NORMAL}"
    options=()
    [ "${have_art}" ] && options+=("Art Images ASCIImatics Animation")
    [ "${have_julia}" ] && options+=("Julia Set ASCIImatics Animation")
    [ "${have_mpplus}" ] && options+=("MPPlus ASCIImatics Animation")
    [ "${have_plasma}" ] && options+=("Plasma ASCIImatics Animation")
    options+=("Audio [${audiostat}]")
    [ "${have_nema}" ] && options+=("Record Tmux Session [${recordstat}]")
    options+=("Use Tmux [${usetmux}]" "Main menu" "Quit")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
          "Main menu",*|*,"Main menu"|"Back",*|*,"Back"|"back",*|*,"back")
              printf "Returning\n\n"
              init_vars
              break 2
              ;;
          "Art Images ASCIImatics Animation",*|*,"Art Images ASCIImatics Animation")
              ASCSPLASH="${ASCSPLASH} -i"
              ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l art"
              break
              ;;
          "Julia Set ASCIImatics Animation",*|*,"Julia Set ASCIImatics Animation")
              ASCSPLASH="${ASCSPLASH} -j"
              ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l julia"
              break
              ;;
          "MPPlus ASCIImatics Animation",*|*,"MPPlus ASCIImatics Animation")
              ASCSPLASH="${ASCSPLASH} -m"
              ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l mpplus"
              break
              ;;
          "Plasma ASCIImatics Animation",*|*,"Plasma ASCIImatics Animation")
              ASCSPLASH="${ASCSPLASH} -p"
              ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l plasma"
              break
              ;;
          "Audio"*,*|*,"Audio"*)
              if [ "${AUDIO}" ]
              then
                AUDIO=
              else
                AUDIO=1
              fi
              if [ "${AUDIO}" ]
              then
                ASCSPLASH="${ASCSPLASH} -a"
                ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -a"
              else
                ASCSPLASH=`echo ${ASCSPLASH} | sed -e "s/ -a//"`
                ASCSPLASH_TMUX=`echo ${ASCSPLASH_TMUX} | sed -e "s/ -a//"`
              fi
              skip_it_so=1
              break
              ;;
          "Record Tmux Session"*,*|*,"Record Tmux Session"*)
              if [ "${RECORD}" ]
              then
                RECORD=
              else
                RECORD=1
                TMUX=1
              fi
              if [ "${RECORD}" ]
              then
                ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -R"
              else
                ASCSPLASH_TMUX=`echo ${ASCSPLASH_TMUX} | sed -e "s/ -R//"`
              fi
              skip_it_so=1
              break
              ;;
          "Use Tmux"*,*|*,"Use Tmux"*)
              if [ "${TMUX}" ]
              then
                TMUX=
                RECORD=
              else
                TMUX=1
              fi
              skip_it_so=1
              break
              ;;
          "Quit",*|*,"Quit"|"quit",*|*,"quit")
              printf "\nExiting\n"
              exit 0
              ;;
      esac
      REPLY=
    done
    [ "${skip_it_so}" ] || {
      make_it_so
      init_vars
    }
  done
  init_vars
}

show_main_menu() {
  while true
  do
    if [ "${FULLSCREEN}" ]
    then
      fullstat="YES"
    else
      fullstat="NO"
    fi
    if [ "${RECORD}" ]
    then
      recordstat="YES"
    else
      recordstat="NO"
    fi
    if [ "${TMUX}" ]
    then
      usetmux="YES"
    else
      usetmux="NO"
    fi
    [ "${COMMAND}" ] || COMMAND=btop
    show_comm=`echo ${COMMAND} | awk ' { print $1 } '`
    case "${COMMAND}" in
      btop)
        use_btop="YES"
        use_gdu="NO"
        use_lynx="NO"
        use_mutt="NO"
        use_ranger="NO"
        ;;
      gdu*)
        use_btop="NO"
        use_gdu="YES"
        use_lynx="NO"
        use_mutt="NO"
        use_ranger="NO"
        ;;
      lynx)
        use_btop="NO"
        use_gdu="NO"
        use_lynx="YES"
        use_mutt="NO"
        use_ranger="NO"
        ;;
      neomutt)
        use_btop="NO"
        use_gdu="NO"
        use_lynx="NO"
        use_mutt="YES"
        use_ranger="NO"
        ;;
      ranger)
        use_btop="NO"
        use_gdu="NO"
        use_lynx="NO"
        use_mutt="NO"
        use_ranger="YES"
        ;;
    esac
    skip_it_so=
    PS3="${BOLD}${PLEASE} command choice (numeric or text): ${NORMAL}"
    options=()
    [ "${have_splash}" ] && options+=("ASCIImatics Animations")
    options+=("Kill Tmux Sessions")
    [ "${have_xfce4}" ] && options+=("Run ${show_comm} in XFCE4 Terminal")
    [ "${have_gnome}" ] && options+=("Run ${show_comm} in Gnome Terminal")
    [ "${have_retro}" ] && options+=("Run ${show_comm} in Retro Terminal")
    [ "${have_tilix}" ] && options+=("Run ${show_comm} in Tilix Terminal")
    [ "${have_bb}" ] && {
      [ "$DISPLAY" = "" ] || options+=("Run AAlib Demo (X11 mode)")
    }
    [ "${have_bb}" ] && options+=("Run AAlib Demo (Curses mode)")
    [ "${have_speed}" ] && options+=("Run Speed Test")
    [ "${have_rainbow}" ] && options+=("Run Twitter Client")
    [ "${have_ddgr}" ] && options+=("Search the Web")
    [ "${have_neo}" ] && options+=("Show System Info")
    [ "${have_curl}" ] && options+=("Phase of the Moon")
    [ "${have_curl}" ] && options+=("Weather Report")
    [ "${have_btop}" ] && options+=("Use Btop System Monitor    [${use_btop}]")
    [ "${have_gdu}" ] && options+=("Use Disk Usage Analyzer    [${use_gdu}]")
    [ "${have_lynx}" ] && options+=("Use  Lynx  Web  Browser    [${use_lynx}]")
    [ "${have_mutt}" ] && options+=("Use NeoMutt Mail Client    [${use_mutt}]")
    [ "${have_ranger}" ] && options+=("Use Ranger File Manager    [${use_ranger}]")
    options+=("Use Tmux                   [${usetmux}]")
    [ "${have_nema}" ] && options+=("Record Tmux Session        [${recordstat}]")
    options+=("Fullscreen Terminal Window [${fullstat}]")
    options+=("Quit")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
          "Run ${show_comm} in XFCE4 Terminal",*|*,"Run ${show_comm} in XFCE4 Terminal")
              XFCE4=1
              TILIX=
              GNOME=
              RETRO=
              break
              ;;
          "Run ${show_comm} in Gnome Terminal",*|*,"Run ${show_comm} in Gnome Terminal")
              GNOME=1
              XFCE4=
              TILIX=
              RETRO=
              break
              ;;
          "Run ${show_comm} in Retro Terminal",*|*,"Run ${show_comm} in Retro Terminal")
              RETRO=1
              GNOME=
              XFCE4=
              TILIX=
              break
              ;;
          "Run ${show_comm} in Tilix Terminal",*|*,"Run ${show_comm} in Tilix Terminal")
              TILIX=1
              RETRO=
              GNOME=
              XFCE4=
              break
              ;;
          "Use Btop System Monitor"*,*|*,"Use Btop System Monitor"*)
              COMMAND=btop
              MTITLE="Btop++ System Monitor"
              skip_it_so=1
              break
              ;;
          "Use Disk Usage Analyzer"*,*|*,"Use Disk Usage Analyzer"*)
              COMMAND="gdu ${HOME}"
              MTITLE="Disk Usage Analyzer"
              skip_it_so=1
              break
              ;;
          "Use  Lynx  Web  Browser"*,*|*,"Use  Lynx  Web  Browser"*)
              COMMAND=lynx
              MTITLE="Lynx Web Browser"
              skip_it_so=1
              break
              ;;
          "Use NeoMutt Mail Client"*,*|*,"Use NeoMutt Mail Client"*)
              COMMAND=neomutt
              MTITLE="NeoMutt Mail Client"
              skip_it_so=1
              break
              ;;
          "Use Ranger File Manager"*,*|*,"Use Ranger File Manager"*)
              COMMAND=ranger
              MTITLE="Ranger File Manager"
              skip_it_so=1
              break
              ;;
          "Run AAlib Demo (Curses mode)",*|*,"Run AAlib Demo (Curses mode)")
              SAVED_DISPLAY="${DISPLAY}"
              export DISPLAY=""
              bb-tmux
              skip_it_so=1
              export DISPLAY="${SAVED_DISPLAY}"
              break
              ;;
          "Run AAlib Demo (X11 mode)",*|*,"Run AAlib Demo (X11 mode)")
              bb-tmux
              skip_it_so=1
              break
              ;;
          "Phase of the Moon",*|*,"Phase of the Moon")
              curl wttr.in?format=v2
              skip_it_so=1
              break
              ;;
          "Weather Report",*|*,"Weather Report")
              curl wttr.in?format=v2
              skip_it_so=1
              break
              ;;
          "Run Speed Test",*|*,"Run Speed Test")
              speedtest-cli
              skip_it_so=1
              break
              ;;
          "Run Twitter Client",*|*,"Run Twitter Client")
              # For 24-bit color image support, run with the '-p24' option
              # rainbowstream -p24
              rainbowstream
              skip_it_so=1
              break
              ;;
          "Search the Web",*|*,"Search the Web")
              ddgr
              skip_it_so=1
              break
              ;;
          "Show System Info",*|*,"Show System Info")
              if [ "${have_lol}" ]
              then
                neofetch | lolcat
              else
                neofetch
              fi
              read -p "Press Enter to continue" answer
              skip_it_so=1
              break
              ;;
          "ASCIImatics Animations",*|*,"ASCIImatics Animations")
              show_ascii_menu
              skip_it_so=1
              break
              ;;
          "Kill Tmux Sessions",*|*,"Kill Tmux Sessions")
              kill_tmux_sessions
              skip_it_so=1
              break
              ;;
          "Use Tmux"*,*|*,"Use Tmux"*)
              if [ "${TMUX}" ]
              then
                TMUX=
                RECORD=
              else
                TMUX=1
              fi
              skip_it_so=1
              break
              ;;
          "Record Tmux Session"*,*|*,"Record Tmux Session"*)
              if [ "${RECORD}" ]
              then
                RECORD=
              else
                RECORD=1
                TMUX=1
              fi
              if [ "${RECORD}" ]
              then
                COMMAND_TMUX="${COMMAND_TMUX} -r"
              else
                COMMAND_TMUX=`echo ${COMMAND_TMUX} | sed -e "s/ -r//"`
              fi
              skip_it_so=1
              break
              ;;
          "Fullscreen Terminal Window"*,*|*,"Fullscreen Terminal Window"*)
              if [ "${FULLSCREEN}" ]
              then
                FULLSCREEN=
              else
                FULLSCREEN=1
              fi
              skip_it_so=1
              break
              ;;
          "Quit",*|*,"Quit"|"quit",*|*,"quit")
              printf "\nExiting\n"
              exit 0
              ;;
      esac
      REPLY=
    done
    [ "${skip_it_so}" ] || {
      make_it_so
      init_vars
    }
  done
}

init_vars() {
  VTITLE="Spectrum Visualizer"
  COMMAND_TMUX="btop-tmux"
  ASCSPLASH="asciisplash"
  ASCSPLASH_TMUX="asciisplash-tmux"

  AUDIO=
  FULLSCREEN=
  INTERACTIVE=
  RECORD=
  SPLASH=
  TMUX_ASC=
  TMUX_SPLASH=
  USAGE=
}

init_vars
have_btop=`type -p btop`
have_lynx=`type -p lynx`
have_mutt=`type -p neomutt`
have_ranger=`type -p ranger`
have_retro=`type -p cool-retro-term`
have_tilix=`type -p tilix`
have_art=`type -p asciiart`
have_julia=`type -p asciijulia`
have_plasma=`type -p asciiplasma`
have_mpplus=`type -p asciimpplus`
have_nema=`type -p asciinema`
have_bb=`type -p bb-tmux`
have_curl=`type -p curl`
have_ddgr=`type -p ddgr`
have_gdu=`type -p gdu`
have_neo=`type -p neofetch`
have_lol=`type -p lolcat`
have_rainbow=`type -p rainbowstream`
have_speed=`type -p speedtest-cli`
have_splash=`type -p asciisplash`
have_xfce4=`type -p xfce4-terminal`
have_gnome=`type -p gnome-terminal`
while getopts "Aabc:fgiIjJklmn:NpP:rRSs:tTxyzu" flag; do
  case $flag in
    A)
      ASCSPLASH="${ASCSPLASH} -i"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l art"
      ;;
    a)
      AUDIO=1
      ASCSPLASH="${ASCSPLASH} -a"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -a"
      ;;
    b)
      ASCSPLASH="${ASCSPLASH} -b"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -b"
      ;;
    c)
      COMMAND="${OPTARG}"
      case "${COMMAND}" in
      moon|Moon)
          [ "${have_curl}" ] && curl wttr.in/Moon
          break
          ;;
      search|Search)
          [ "${have_ddgr}" ] && ddgr
          break
          ;;
      speed|Speed)
          [ "${have_speed}" ] && speedtest-cli
          break
          ;;
      twitter|Twitter)
          [ "${have_rainbow}" ] && rainbowstream
          break
          ;;
      weather|Weather)
          break
          [ "${have_curl}" ] && curl wttr.in?format=v2
          ;;
      *)
          FIRST=`echo ${COMMAND} | awk ' { print $1 } '`
          MTITLE="Asciiville ${COMMAND}"
          type -p "${FIRST}" > /dev/null || {
            echo "Option '-c' indicates use ${FIRST}."
            echo "However, ${FIRST} is not installed or not in your path."
            echo "You may be able to install ${FIRST} using apt or dnf:"
            printf "\n\n\tsudo apt install ${FIRST}\nor"
            printf "\n\tsudo dnf install ${FIRST}\n\n"
            if [ "${have_btop}" ]
            then
              echo "Continuing, using btop rather than ${COMMAND}."
              COMMAND=btop
              MTITLE="Btop++ System Monitor"
            else
              if [ "${have_lynx}" ]
              then
                echo "Continuing, using lynx rather than ${COMMAND}."
                COMMAND=lynx
                MTITLE="Lynx Web Browser"
              else
                echo "Continuing, using asciiplasma rather than ${COMMAND}."
                COMMAND=asciiplasma
                MTITLE="ASCIImatics Plasma"
              fi
            fi
          }
          break
          ;;
      esac
      ;;
    f)
      FULLSCREEN=1
      ;;
    g)
      GNOME=1
      [ "${have_gnome}" ] || {
        GNOME=
        echo "Option '-g' indicates use gnome terminal emulator."
        echo "However, gnome-terminal is not installed or not in your path."
        echo "You can install gnome-terminal using apt or dnf as follows:"
        printf "\n\n\tsudo apt install gnome-terminal\nor"
        printf "\n\tsudo dnf install gnome-terminal\n\n"
        if [ "${have_xfce4}" ]
        then
          XFCE4=1
          echo "Proceeding with xfce4-terminal"
        else
          if [ "${have_tilix}" ]
          then
            TILIX=1
            echo "Proceeding with tilix terminal"
          else
            if [ "${have_retro}" ]
            then
              RETRO=1
              echo "Proceeding with cool-retro-term"
            else
              echo "Cannot find a terminal emulator I like. Exiting."
              exit 1
            fi
          fi
        fi
      }
      ;;
    i)
      INTERACTIVE=1
      ;;
    I)
      [ "${have_neo}" ] && {
        MTITLE="Asciiville NeoFetch"
        if [ "${have_lol}" ]
        then
          neofetch | lolcat
        else
          neofetch
        fi
        read -p "Press Enter to continue" answer
      }
      ;;
    j)
      ASCSPLASH="${ASCSPLASH} -j"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l julia"
      ;;
    J)
      ASCSPLASH="${ASCSPLASH} -J"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -J"
      ;;
    k)
      kill_tmux_sessions
      exit 0
      ;;
    l)
      COMMAND=lynx
      MTITLE="Lynx Web Browser"
      [ "${have_lynx}" ] || {
        echo "Option '-l' indicates use lynx as the default command."
        echo "However, lynx is not installed or not in your path."
        echo "You may be able to install lynx using apt or dnf as follows:"
        printf "\n\n\tsudo apt install lynx\nor"
        printf "\n\tsudo dnf install lynx\n\n"
        if [ "${have_btop}" ]
        then
          echo "Continuing, using btop rather than ${COMMAND}."
          COMMAND=btop
          MTITLE="Btop++ System Monitor"
        else
          if [ "${have_ranger}" ]
          then
            echo "Continuing, using ranger rather than ${COMMAND}."
            COMMAND=ranger
            MTITLE="Ranger File Manager"
          else
            echo "Continuing, using asciiplasma rather than ${COMMAND}."
            COMMAND=asciiplasma
            MTITLE="ASCIImatics Plasma"
          fi
        fi
      }
      ;;
    m)
      ASCSPLASH="${ASCSPLASH} -m"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l mpplus"
      ;;
    n)
      ASCSPLASH="${ASCSPLASH} -c ${OPTARG}"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -c ${OPTARG}"
      ;;
    N)
      ASCSPLASH="${ASCSPLASH} -C"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -t"
      ;;
    p)
      ASCSPLASH="${ASCSPLASH} -p"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l plasma"
      ;;
    P)
      COMMAND_TMUX="${COMMAND_TMUX} -p ${OPTARG}"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -l ${OPTARG}"
      ;;
    r)
      [ "${have_retro}" ] || {
        echo "Option '-r' indicates use cool-retro-term terminal emulator."
        echo "However, cool-retro-term is not installed or not in your path."
        echo "You can install cool-retro-term using apt or dnf as follows:"
        printf "\n\n\tsudo apt install cool-retro-term\nor"
        printf "\n\tsudo dnf install cool-retro-term\n\n"
        echo "Exiting"
        exit 1
      }
      RETRO=1
      [ "${have_tilix}" ] && TILIX=1
      ;;
    R)
      [ "${have_nema}" ] && {
        RECORD=1
        TMUX=1
        COMMAND_TMUX="${COMMAND_TMUX} -r"
        ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -R"
      }
      ;;
    S)
      SPLASH=1
      ;;
    s)
      ASCSPLASH="${ASCSPLASH} -s ${OPTARG}"
      ASCSPLASH_TMUX="${ASCSPLASH_TMUX} -s ${OPTARG}"
      ;;
    t)
      TILIX=1
      [ "${have_tilix}" ] || {
        TILIX=
        echo "Option '-t' indicates use tilix terminal emulator."
        echo "However, tilix is not installed or not in your path."
        echo "You can install tilix using apt or dnf as follows:"
        printf "\n\n\tsudo apt install tilix\nor"
        printf "\n\tsudo dnf install tilix\n\n"
        if [ "${have_xfce4}" ]
        then
          XFCE4=1
          echo "Proceeding with xfce4-terminal"
        else
          if [ "${have_gnome}" ]
          then
            GNOME=1
            echo "Proceeding with gnome-terminal"
          else
            if [ "${have_retro}" ]
            then
              RETRO=1
              echo "Proceeding with cool-retro-term"
            else
              echo "Cannot find a terminal emulator I like. Exiting."
              exit 1
            fi
          fi
        fi
      }
      ;;
    T)
      TMUX=1
      ;;
    x)
      XFCE4=1
      [ "${have_xfce4}" ] || {
        XFCE4=
        echo "Option '-x' indicates use xfce4 terminal emulator."
        echo "However, xfce4-terminal is not installed or not in your path."
        echo "You can install xfce4-terminal using apt or dnf as follows:"
        printf "\n\n\tsudo apt install xfce4-terminal\nor"
        printf "\n\tsudo dnf install xfce4-terminal\n\n"
        if [ "${have_tilix}" ]
        then
          TILIX=1
          echo "Proceeding with tilix terminal"
        else
          if [ "${have_gnome}" ]
          then
            GNOME=1
            echo "Proceeding with gnome-terminal"
          else
            if [ "${have_retro}" ]
            then
              RETRO=1
              echo "Proceeding with cool-retro-term"
            else
              echo "Cannot find a terminal emulator I like. Exiting."
              exit 1
            fi
          fi
        fi
      }
      ;;
    y)
      COMMAND=ranger
      MTITLE="Ranger File Manager"
      [ "${have_ranger}" ] || {
        echo "Option '-y' indicates use ranger as the default command."
        echo "However, ranger is not installed or not in your path."
        echo "You may be able to install ranger using apt or dnf as follows:"
        printf "\n\n\tsudo apt install ranger\nor"
        printf "\n\tsudo dnf install ranger\n\n"
        if [ "${have_btop}" ]
        then
          echo "Continuing, using btop rather than ${COMMAND}."
          COMMAND=btop
          MTITLE="Btop++ System Monitor"
        else
          if [ "${have_lynx}" ]
          then
            echo "Continuing, using lynx rather than ${COMMAND}."
            COMMAND=lynx
            MTITLE="Lynx Web Browser"
          else
            echo "Continuing, using asciiplasma rather than ${COMMAND}."
            COMMAND=asciiplasma
            MTITLE="ASCIImatics Plasma"
          fi
        fi
      }
      ;;
    z)
      COMMAND=neomutt
      MTITLE="NeoMutt Mail Client"
      [ "${have_mutt}" ] || {
        echo "Option '-z' indicates use neomutt as the default command."
        echo "However, neomutt is not installed or not in your path."
        echo "You may be able to install neomutt using apt or dnf as follows:"
        printf "\n\n\tsudo apt install neomutt\nor"
        printf "\n\tsudo dnf install neomutt\n\n"
        if [ "${have_btop}" ]
        then
          echo "Continuing, using btop rather than ${COMMAND}."
          COMMAND=btop
          MTITLE="Btop++ System Monitor"
        else
          if [ "${have_lynx}" ]
          then
            echo "Continuing, using lynx rather than ${COMMAND}."
            COMMAND=lynx
            MTITLE="Lynx Web Browser"
          else
            echo "Continuing, using asciiplasma rather than ${COMMAND}."
            COMMAND=asciiplasma
            MTITLE="ASCIImatics Plasma"
          fi
        fi
      }
      ;;
    u)
      USAGE=1
      ;;
    esac
done

# The -T option says use tmux, -S says do asciimatics
# If we have both then do asciimatics in tmux
# If just the -T then do command in tmux
[ "${TMUX}" ] && {
  if [ "${SPLASH}" ]
  then
    TMUX_SPLASH=1
  else
    TMUX_ASC=1
  fi
}

# Figure out which terminal emulator to use
[ "${TILIX}" ] || [ "${RETRO}" ] || [ "${GNOME}" ] || [ "${XFCE4}" ] || {
  if [ "${have_xfce4}" ]
  then
    XFCE4=1
  else
    if [ "${have_tilix}" ]
    then
      TILIX=1
    else
      if [ "${have_gnome}" ]
      then
        GNOME=1
      else
        if [ "${have_retro}" ]
        then
          RETRO=1
        else
          echo "Cannot find a terminal emulator I like. Exiting."
          exit 1
        fi
      fi
    fi
  fi
}

# Make sure only one terminal is selected
if [ "${XFCE4}" ]
then
  TILIX=
  GNOME=
  RETRO=
else
  if [ "${TILIX}" ]
  then
    GNOME=
    RETRO=
  else
    [ "${GNOME}" ] && RETRO=
  fi
fi

[ "${USAGE}" ] && usage

[ "${INTERACTIVE}" ] && show_main_menu

make_it_so
