#!/bin/bash
#
# asciisplash-tmux - display ASCIImatics splash screens in a tmux session
MUSEDIR=/usr/share/asciiville/music
SONG="${MUSEDIR}/Epic_Dramatic-Yuriy_Bespalov.wav"
PLASMA_SONG="${MUSEDIR}/Chronos.mp3"
NATURE_SONG="${MUSEDIR}/Moving-Ahead-RA.mp3"
STRONG_SONG="${MUSEDIR}/Overdrive-Matrika.mp3"
ALTSONG="${MUSEDIR}/Kevin_MacLeod_-_Also_Sprach_Zarathustra.ogg"
SESSION=asciisplash

usage() {
  printf "\nUsage: asciisplash-tmux [-a] [-b] [-c num] [-d] [-l script] "
  printf "[-r script] [-R] [-s song] [-t] [-u]"
  printf "\nWhere:"
  printf "\n\t-a indicates play audio during ASCIImatics display"
  printf "\n\t-b indicates use backup song during ASCIImatics display"
  printf "\n\t-c num specifies number of cycles ASCIImatics effects should run"
  printf "\n\t-d indicates dual window panes, run two scripts"
  printf "\n\t-l script specifies a python script to run in the left visualizer pane"
  printf "\n\t-r script specifies a python script to run in the right visualizer pane"
  printf "\n\t-R indicates record tmux session with asciinema"
  printf "\n\t-s song specifies audio file to use as accompaniment"
  printf "\n\t\t'song' can be the full pathname to an audio file or a relative"
  printf "\n\t\tpathname to an audio file in the MPD music library"
  printf "\n\t\tor $HOME/Music/"
  printf "\n\t-t indicates use original plasma effect comments"
  printf "\n\t-u displays this usage message and exits\n"
  printf "\nDefaults: single pane, left pane art, right pane julia, recording disabled"
  printf "\nThis run:"
  printf "\n\tPrimary pane = ${PYLEFT}"
  [ "${DUAL}" ] && printf "\n\tSecondary pane = ${PYRIGHT}"
  if [ "${RECORD}" ]
  then
    printf "\n\trecording enabled"
  else
    printf "\n\trecording disabled"
  fi
  printf "\nType 'man asciisplash-tmux' for detailed usage info on asciisplash-tmux"
  printf "\nType 'man asciisplash' for detailed usage info on asciisplash\n"
  exit 1
}

custom_audio=
AUDIO=
CYCLE=
DUAL=
DUDE=
KILLME=
RECORD=
PYLEFT=art
PYRIGHT=julia
USAGE=
while getopts "abc:dl:r:Rs:tu" flag; do
    case $flag in
        a)
          AUDIO=1
          ;;
        b)
          AUDIO=1
          TMPSONG=${SONG}
          SONG=${ALTSONG}
          ALTSONG=${TMPSONG}
          ;;
        c)
          CYCLE="-c ${OPTARG}"
          ;;
        d)
          DUAL=1
          ;;
        l)
          PYLEFT=${OPTARG}
          ;;
        r)
          PYRIGHT=${OPTARG}
          ;;
        R)
          have_nema=`type -p asciinema`
          [ "${have_nema}" ] && RECORD=1
          ;;
        s)
          custom_audio=1
          if [ -f "${OPTARG}" ]
          then
            SONG="${OPTARG}"
          else
            if [ -f "${MUSEDIR}/${OPTARG}" ]
            then
              SONG="${MUSEDIR}/${OPTARG}"
            else
              if [ -f "${HOME}/Music/${OPTARG}" ]
              then
                SONG="${HOME}/Music/${OPTARG}"
              else
                mpd_music=`grep ^music_directory /etc/mpd.conf`
                [ "${mpd_music}" ] || mpd_music=`grep \#music_directory /etc/mpd.conf`
                mpd_music=`echo ${mpd_music} | awk ' { print $2 } ' | sed -e "s/\"//g"`
                if [ -f "${mpd_music}/${OPTARG}" ]
                then
                  SONG="${mpd_music}/${OPTARG}"
                else
                  custom_audio=
                  echo "Cannot locate ${OPTARG}"
                  echo "Using default song: ${SONG}"
                fi
              fi
            fi
          fi
          ;;
        t)
          DUDE=1
          ;;
        u)
          USAGE=1
          ;;
    esac
done
shift $(( OPTIND - 1 ))
[ "${AUDIO}" ] && {
  [ "${custom_audio}" ] || {
    if [ "${PYLEFT}" == "art" ]
    then
      SONG="${NATURE_SONG}"
    else
      if [ "${PYLEFT}" == "plasma" ]
      then
        SONG="${PLASMA_SONG}"
      else
        [ "${PYLEFT}" == "julia" ] && SONG="${STRONG_SONG}"
      fi
    fi
  }
  if [ -f "${SONG}" ]
  then
    left_script_args="${left_script_args} -s ${SONG}"
  else
    if [ -f "${ALTSONG}" ]
    then
      left_script_args="${left_script_args} -s ${ALTSONG}"
    fi
  fi
}
script_args="${script_args} ${CYCLE}"

if [ "${DUDE}" ]
then
  [ "${PYLEFT}" == "art" ] && left_script_args="${left_script_args} -i -C"
  [ "${PYRIGHT}" == "art" ] && right_script_args="${right_script_args} -i -C"
  [ "${PYLEFT}" == "mpplus" ] && left_script_args="${left_script_args} -m -C"
  [ "${PYRIGHT}" == "mpplus" ] && right_script_args="${right_script_args} -m -C"
  [ "${PYLEFT}" == "plasma" ] && left_script_args="${left_script_args} -p -C"
  [ "${PYRIGHT}" == "plasma" ] && right_script_args="${right_script_args} -p -C"
  [ "${PYLEFT}" == "julia" ] && left_script_args="${left_script_args} -j -C"
  [ "${PYRIGHT}" == "julia" ] && right_script_args="${right_script_args} -j -C"
else
  [ "${PYLEFT}" == "art" ] && left_script_args="${left_script_args} -i"
  [ "${PYRIGHT}" == "art" ] && right_script_args="${right_script_args} -i"
  [ "${PYLEFT}" == "mpplus" ] && left_script_args="${left_script_args} -m"
  [ "${PYRIGHT}" == "mpplus" ] && right_script_args="${right_script_args} -m"
  [ "${PYLEFT}" == "plasma" ] && left_script_args="${left_script_args} -p"
  [ "${PYRIGHT}" == "plasma" ] && right_script_args="${right_script_args} -p"
  [ "${PYLEFT}" == "julia" ] && left_script_args="${left_script_args} -j"
  [ "${PYRIGHT}" == "julia" ] && right_script_args="${right_script_args} -j"
fi

have_left=`type -p ascii${PYLEFT}`
[ "${have_left}" ] && PYLEFT="ascii${PYLEFT}"
have_right=`type -p ascii${PYRIGHT}`
[ "${have_right}" ] && PYRIGHT="ascii${PYRIGHT}"

[ "${USAGE}" ] && usage

tmux new-session -d -x "$(tput cols)" -y "$(tput lines)" -s ${SESSION}
tmux set -g status off

tmux send-keys "stty -echo" C-m
tmux send-keys "tput civis -- invisible" C-m
tmux send-keys "export PS1=''" C-m
tmux send-keys "clear" C-m
[ "${DUAL}" ] && tmux split-window -h -p 50

tmux select-pane -t 0
have_left=`type -p ${PYLEFT}`
[ "${have_left}" ] || {
  tmux kill-session -t ${SESSION}
  echo "${PYLEFT} not found. Exiting."
  exit 1
}

# Start the left pane script
tmux send-keys "asciisplash ${left_script_args} ${script_args}; tmux kill-session -t ${SESSION}" C-m

[ "${DUAL}" ] && {
  have_right=`type -p ${PYRIGHT}`
  [ "${have_right}" ] || {
    tmux kill-session -t ${SESSION}
    echo "${PYRIGHT} not found. Exiting."
    exit 1
  }
  tmux select-pane -t 1

  # Start the right pane script
  tmux send-keys "asciisplash ${right_script_args} ${script_args}; tmux kill-session -t ${SESSION}" C-m
}

#tmux resize-pane -t 0 -x ${WIDTH} -y ${HEIGHT}
#tmux set-hook client-resized "resize-pane -t 0 -x ${WIDTH} -y ${HEIGHT}"

if [ "${RECORD}" ]
then
  tmux d
  VID_DIR=$HOME/Videos
  [ -d ${VID_DIR} ] || mkdir ${VID_DIR}
  REC_DIR=${VID_DIR}/asciinema
  [ -d ${REC_DIR} ] || mkdir ${REC_DIR}
  echo "Recording this ${SESSION} session with asciinema"
  asciinema rec --command "tmux attach -t ${SESSION}" \
                ${REC_DIR}/${SESSION}-$(date +%F--%H%M).cast
else
  tmux a #
fi
