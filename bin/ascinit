#!/bin/bash
#
# ascinit - initialize Asciiville configuration files
#
# Terminal emulators optionally installed:
#     gnome-terminal
#     tilix
#     xfce4-terminal
#     cool-retro-term

CONFDIR=/usr/share/asciiville
BOLD=$(tput bold)
NORMAL=$(tput sgr0)

usage() {
  printf "\nUsage: ascinit [-a] [-c] [-d] [-m] [-M] [-n] [-N] [-q] [-t] [-u]"
  printf "\nWhere:"
  printf "\n\t-a indicates do not ask to play an animation when done"
  printf "\n\t-c indicates console mode - no windowing system, headless config"
  printf "\n\t-d indicates debug mode"
  printf "\n\t-m indicates setup user Mutt configuration"
  printf "\n\t-M indicates setup both Mutt and NeoMutt configurations"
  printf "\n\t-n indicates setup user NeoMutt configuration"
  printf "\n\t-N indicates setup neither Mutt or NeoMutt configuration"
  printf "\n\t-q indicates quiet mode"
  printf "\n\t-t indicates authorize the Rainbow Stream app at Twitter"
  printf "\n\t-u indicates display this usage message and exit\n"
  exit 1
}

inst_pkg() {
  PKG="$1"
  [ "${quiet}" ] || echo "Installing ${PKG}"
  if [ "${debian}" ]
  then
    if [ "${have_apt}" ]
    then
      sudo apt install "${PKG}" -y
    else
      [ "${quiet}" ] || echo "Cannot locate apt to install. Skipping."
    fi
  else
    if [ "${have_dnf}" ]
    then
      sudo dnf install "${PKG}" -y
    else
      [ "${quiet}" ] || echo "Cannot locate dnf to install. Skipping."
    fi
  fi
}

ask_install() {
  opt="$1"
  nam="$2"
  pkg="$3"
  echo "The ${opt} option indicates configure ${nam} but ${nam} is not installed"
  echo "Would you like to install ${nam} at this time?"
  while true
  do
    read -p "Install ${nam} ? (y/n) " yn
    case $yn in
      [Yy]* )
          case ${pkg} in
            mutt)
                use_mutt=1
                ;;
            neomutt)
                sudo dnf copr enable flatcap/neomutt -y 2> /dev/null
                use_neomutt=1
                ;;
          esac
          inst_pkg ${pkg}
          break
          ;;
      [Nn]* )
          case ${pkg} in
            mutt)
                use_mutt=
                ;;
            neomutt)
                use_neomutt=
                ;;
          esac
          break
          ;;
        * ) echo "Please answer yes or no."
          ;;
    esac
  done
}

have_mutt=`type -p mutt`
have_neomutt=`type -p neomutt`
have_gnome=`type -p gnome-terminal`
have_tilix=`type -p tilix`
have_xfce4=`type -p xfce4-terminal`
have_retro=`type -p cool-retro-term`
have_apt=`type -p apt`
have_dnf=`type -p dnf`

debian=
[ -f /etc/os-release ] && . /etc/os-release
[ "${ID_LIKE}" == "debian" ] && debian=1
[ "${debian}" ] || [ -f /etc/debian_version ] && debian=1

ask_anim=1
console=
debug=
init_twit=
quiet=
use_mutt=
use_neomutt=1

while getopts "acdmMnNqtu" flag; do
  case $flag in
    a)
        ask_anim=
        ;;
    c)
        console=1
        ;;
    d)
        debug=1
        ;;
    m)
        if [ "${have_mutt}" ]
        then
          use_mutt=1
          use_neomutt=
        else
          ask_install -m Mutt mutt
        fi
        ;;
    n)
        if [ "${have_neomutt}" ]
        then
          use_mutt=
          use_neomutt=1
        else
          ask_install -n NeoMutt neomutt
        fi
        ;;
    M)
        if [ "${have_mutt}" ]
        then
          use_mutt=1
        else
          ask_install -M Mutt mutt
        fi
        if [ "${have_neomutt}" ]
        then
          use_neomutt=1
        else
          ask_install -M NeoMutt neomutt
        fi
        ;;
    N)
        use_mutt=
        use_neomutt=
        ;;
    q)
        quiet=1
        ;;
    t)
        init_twit=1
        ;;
    u)
        usage
        ;;
  esac
done
shift $(( OPTIND - 1 ))

# Mutt configuration user setup
[ "${have_mutt}" ] && {
  [ -f ${CONFDIR}/mutt/muttrc ] && {
    [ -d ${HOME}/.mutt ] || {
      mkdir ${HOME}/.mutt
      chmod 750 ${HOME}/.mutt
    }
    [ -d ${HOME}/.mutt/cache ] || {
      mkdir ${HOME}/.mutt/cache
      chmod 750 ${HOME}/.mutt/cache
    }
    [ -d ${HOME}/.mutt/cache/headers ] || {
      mkdir ${HOME}/.mutt/cache/headers
      chmod 750 ${HOME}/.mutt/cache/headers
    }
    [ -d ${HOME}/.mutt/cache/bodies ] || {
      mkdir ${HOME}/.mutt/cache/bodies
      chmod 750 ${HOME}/.mutt/cache/bodies
    }
    [ -d ${HOME}/.mutt/tmp ] || {
      mkdir ${HOME}/.mutt/tmp
      chmod 750 ${HOME}/.mutt/tmp
    }
    [ -f ${HOME}/.mutt/certificates ] || {
      touch ${HOME}/.mutt/certificates
      chmod 640 ${HOME}/.mutt/certificates
    }
    [ -f ${HOME}/.mutt/colors ] || {
      cp ${CONFDIR}/mutt/colors ${HOME}/.mutt/colors
      chmod 640 ${HOME}/.mutt/colors
    }
    [ -f ${HOME}/.mutt/mailcap ] || {
      cp ${CONFDIR}/mutt/mailcap ${HOME}/.mutt/mailcap
      chmod 640 ${HOME}/.mutt/mailcap
    }
    [ -f ${HOME}/.mutt/muttrc ] || {
      cp ${CONFDIR}/mutt/muttrc ${HOME}/.mutt/muttrc
      chmod 600 ${HOME}/.mutt/muttrc
      [ "${quiet}" ] || {
        echo "A basic ${HOME}/.mutt/muttrc Mutt email client configuration"
        echo "has been created for you. The default configuration can be used"
        echo "as a template to create a GMail IMAP Mutt email account."
        echo "Edit ${HOME}/.mutt/muttrc and add your GMail credentials."
        echo ""
        echo "A good starting point for the new Mutt user is the Mutt Wiki at:"
        echo "https://gitlab.com/muttmua/mutt/-/wikis/home"
      }
    }
  }
}

# NeoMutt configuration user setup
[ "${have_neomutt}" ] || [ "${debian}" ] || {
  sudo dnf copr enable flatcap/neomutt -y 2> /dev/null
  inst_pkg neomutt
}
[ -d ${CONFDIR}/neomutt ] && {
  [ -d ${HOME}/.config/neomutt ] || {
    cp -a ${CONFDIR}/neomutt ${HOME}/.config/neomutt
    chmod 600 ${HOME}/.config/neomutt/accounts/*
    chmod 750 ${HOME}/.config/neomutt/accounts
    [ -d ${HOME}/.config/neomutt/tmp ] || mkdir ${HOME}/.config/neomutt/tmp
    chmod 750 ${HOME}/.config/neomutt/tmp
    [ "${quiet}" ] || {
      echo ""
      echo "A ${HOME}/.config/neomutt/ NeoMutt email client configuration"
      echo "has been created for you. Edit your name, email address, and"
      echo "email account credentials in ${HOME}/.config/neomutt/accounts/*"
      echo ""
      echo "A good starting point for the NeoMutt user is the NeoMutt Guide at:"
      echo "https://neomutt.org/guide/"
      echo ""
    }
  }
}

# Custom W3M configuration for this user unless one exists
[ -d ${CONFDIR}/w3m ] && {
  if [ -d ${HOME}/.w3m ]
  then
    for w3mconf in ${CONFDIR}/w3m/*
    do
      [ "${w3mconf}" == "${CONFDIR}/w3m/*" ] && continue
      bconf=`basename "${w3mconf}"`
      [ -f "${HOME}/.w3m/${bconf}" ] || {
        cp "${w3mconf}" "${HOME}/.w3m/${bconf}"
      }
    done
  else
    cp -a ${CONFDIR}/w3m ${HOME}/.w3m
  fi
  # Verify text/markdown is a recognized MIME type
  [ -f /etc/mime.types ] && {
    grep ^text/markdown /etc/mime.types > /dev/null || {
      cp /etc/mime.types ${HOME}/.w3m/mime.types
      echo 'text/markdown    md markdown' >> ${HOME}/.w3m/mime.types
    }
  }
}

# Setup default newsboat configuration for this user unless one exists
[ -d ${CONFDIR}/newsboat ] && {
  [ -d ${HOME}/.newsboat ] || {
    cp -a ${CONFDIR}/newsboat ${HOME}/.newsboat
    chmod 600 ${HOME}/.newsboat/urls
    chmod 755 ${HOME}/.newsboat/bookmark.sh
  }
}

# Setup default rifle configuration for this user unless one exists
[ -f ${CONFDIR}/rifle.conf ] && {
  [ -f ${HOME}/.config/ranger/rifle.conf ] || {
    [ -d ${HOME}/.config ] || mkdir -p ${HOME}/.config
    [ -d ${HOME}/.config/ranger ] || mkdir -p ${HOME}/.config/ranger
    cp ${CONFDIR}/rifle.conf ${HOME}/.config/ranger/rifle.conf
  }
}

# Setup default rainbowstream configuration for this user unless one exists
[ -f ${CONFDIR}/rainbow_config.json ] && {
  [ -f ${HOME}/.rainbow_config.json ] || {
    cp ${CONFDIR}/rainbow_config.json ${HOME}/.rainbow_config.json
  }
}

# Setup default tmux configuration for this user unless
# terminal-overrides has already been set
[ -f ${CONFDIR}/tmux.conf ] && {
  if [ -f ${HOME}/.tmux.conf ]
  then
    grep terminal-overrides ${HOME}/.tmux.conf > /dev/null || {
      cat ${CONFDIR}/tmux.conf >> ${HOME}/.tmux.conf
    }
  else
    cat ${CONFDIR}/tmux.conf >> ${HOME}/.tmux.conf
  fi
}

have_pip=`type -p pip`
[ "${have_pip}" ] || {
  plat=`uname -s`
  if [ "$plat" == "Darwin" ]
  then
    python3 -m ensurepip --upgrade
  else
    debian=
    [ -f /etc/os-release ] && . /etc/os-release
    [ "${ID_LIKE}" == "debian" ] && debian=1
    [ "${debian}" ] || [ -f /etc/debian_version ] && debian=1

    if [ "${debian}" ]
    then
      sudo apt install python3-pip
    else
      sudo dnf install python3-pip
    fi
  fi
}

pip list | grep asciimatics > /dev/null || python3 -m pip install asciimatics
pip list | grep rainbowstream > /dev/null || python3 -m pip install rainbowstream

# Install the 'jrnl' command if not already installed
have_jrnl=`type -p jrnl`
[ "${have_jrnl}" ] || {
  have_pipx=`type -p pipx`
  [ "${have_pipx}" ] || {
    python3 -m pip install --user pipx 2> /dev/null
    python3 -m pipx ensurepath 2> /dev/null
  }
  # Custom jrnl configuration for this user unless one exists
  [ -d ${CONFDIR}/jrnl ] && {
    [ -d ${HOME}/.config/jrnl ] || {
      cp -a ${CONFDIR}/jrnl ${HOME}/.config/jrnl
      [ -d ${HOME}/.local/share/jrnl ] || {
        [ -d ${HOME}/.local ] || mkdir ${HOME}/.local
        [ -d ${HOME}/.local/share ] || mkdir ${HOME}/.local/share
        mkdir ${HOME}/.local/share/jrnl
        touch ${HOME}/.local/share/jrnl/journal.txt
        chmod 600 ${HOME}/.local/share/jrnl/journal.txt
        touch ${HOME}/.local/share/jrnl/asciiville.txt
        chmod 600 ${HOME}/.local/share/jrnl/asciiville.txt
      }
    }
  }
  pipx install jrnl 2> /dev/null
  echo "Welcome to @jrnl" > /tmp/jrnl$$
  echo "" >> /tmp/jrnl$$
  echo "A simple command line journal application" >> /tmp/jrnl$$
  jrnl < /tmp/jrnl$$
  echo "Installed @Asciiville" > /tmp/jrnl$$
  echo "" >> /tmp/jrnl$$
  echo "See https://github.com/doctorfree/Asciiville#readme" >> /tmp/jrnl$$
  jrnl asciiville < /tmp/jrnl$$
  rm -f /tmp/jrnl$$
}

[ "${init_twit}" ] && rainbowstream

create_new_profile() {
  local proterm="$1"
  local proname="$2"
  if [ "${proterm}" == "gnome" ]
  then
    local profile_ids=($(dconf list $dconfdir/ | grep ^: |\
        sed 's/\///g' | sed 's/://g'))
  fi
  if [ "${proterm}" == "tilix" ]
  then
    local profile_ids=($(dconf list $dconfdir/ | grep -v ^list |\
        sed 's/\///g' | sed 's/://g'))
  fi
  local profile_ids_old="$(dconf read "$dconfdir"/list | tr -d "]")"
  local profile_id="$(uuidgen)"
  [ "${debug}" ] && {
    echo "profile_ids_old=${profile_ids_old}"
    echo "profile_id=${profile_id}"
  }

  if [ -z "$profile_ids_old" ]
  then
    if [ ${#profile_ids[@]} -gt 0 ]
    then
      for id in "${!profile_ids[@]}"
      do
        profile_ids[${id}]="'profile_ids[${id}]',"
      done
      dconf write $dconfdir/list "[${profile_ids[*]} '$profile_id']" 2> /dev/null
      [ "${debug}" ] && {
        echo "A: dconf write $dconfdir/list [${profile_ids[*]} '$profile_id']"
      }
    else
      dconf write $dconfdir/list "['$profile_id']" 2> /dev/null
      [ "${debug}" ] && {
        echo "B: dconf write $dconfdir/list ['$profile_id']"
      }
    fi
  else
    dconf write $dconfdir/list "${profile_ids_old}, '$profile_id']" 2> /dev/null
    [ "${debug}" ] && {
      echo "C: dconf write $dconfdir/list ${profile_ids_old}, '$profile_id']"
    }
  fi

  if [ "${proterm}" == "gnome" ]
  then
    profile_path="$dconfdir/:$profile_id"
  fi
  if [ "${proterm}" == "tilix" ]
  then
    profile_path="$dconfdir/$profile_id"
  fi
  dconf write $profile_path/visible-name "'$proname'" 2> /dev/null

  # Asciiville profile wants a black background with no transparency
  dconf write $profile_path/background-color "'rgb(0,0,0)'" 2> /dev/null
  dconf write $profile_path/foreground-color "'rgb(255,255,255)'" 2> /dev/null
  dconf write $profile_path/cursor-shape "'underline'" 2> /dev/null
  dconf write $profile_path/cursor-blink-mode "'off'" 2> /dev/null
  dconf write $profile_path/use-theme-colors "false" 2> /dev/null
  if [ "${proterm}" == "gnome" ]
  then
    dconf write $profile_path/use-theme-transparency "false" 2> /dev/null
    dconf write $profile_path/use-transparent-background "false" 2> /dev/null
  fi
  if [ "${proterm}" == "tilix" ]
  then
    dconf write $profile_path/background-transparency-percent "0" 2> /dev/null
  fi
  # Do we need to set the font in the profile?
  # FONT="Monospace Regular"
  # SIZE=12
  dconf write $profile_path/use-system-font "false" 2> /dev/null
  if [ "${proname}" == "${small_profile_name}" ]
  then
    dconf write $profile_path/font "'Monospace 4'" 2> /dev/null
  else
    dconf write $profile_path/font "'Monospace 12'" 2> /dev/null
  fi
}

[ "${console}" ] || {
  [ "${have_gnome}" ] || inst_pkg gnome-terminal
  [ "${have_tilix}" ] || inst_pkg tilix
  [ "${have_xfce4}" ] || inst_pkg xfce4-terminal
  [ "${have_retro}" ] || inst_pkg cool-retro-term
  # If no gnome-terminal Asciiville profile exists, create one
  declare -a profiles
  profile_name="Asciiville"
  small_profile_name="Asciiville_Small"

  profile_exists=
  small_profile_exists=
  dconfdir=/org/gnome/terminal/legacy/profiles:

  # profiles=($(gconftool-2 -R $gconfdir | grep $gconfdir | cut -d/ -f5 |  \
  #          cut -d: -f1))
  profiles=($(gsettings get org.gnome.Terminal.ProfilesList list | tr -d "[]\',"))

  if [ "$profiles" = "" ]
  then
    create_new_profile gnome ${profile_name}
    create_new_profile gnome ${small_profile_name}
  else
    for i in ${!profiles[*]}
    do
      visname="$(dconf read $dconfdir/:${profiles[i]}/visible-name)"
      [ "${visname}" == "'${profile_name}'" ] && profile_exists=1
      [ "${visname}" == "'${small_profile_name}'" ] && small_profile_exists=1
      [ "$profile_exists" ] && [ "$small_profile_exists" ] && break
    done
  fi

  [ "$profile_exists" ] || {
    # Create an Asciiville profile in gnome-terminal for this user
    create_new_profile gnome ${profile_name}
  }
  [ "$small_profile_exists" ] || {
    # Create a Small Asciiville profile in gnome-terminal for this user
    create_new_profile gnome ${small_profile_name}
  }

  # Create Asciiville Tilix profile, similar to Gnome-terminal's
  profile_exists=
  small_profile_exists=
  dconfdir=/com/gexperts/Tilix/profiles

  profiles=($(gsettings get com.gexperts.Tilix.ProfilesList list | tr -d "[]\',"))

  if [ "$profiles" = "" ]
  then
    create_new_profile tilix ${profile_name}
    create_new_profile tilix ${small_profile_name}
  else
    for i in ${!profiles[*]}
    do
      visname="$(dconf read $dconfdir/:${profiles[i]}/visible-name)"
      [ "${visname}" == "'${profile_name}'" ] && profile_exists=1
      [ "${visname}" == "'${small_profile_name}'" ] && small_profile_exists=1
      [ "$profile_exists" ] && [ "$small_profile_exists" ] && break
    done
  fi

  [ "$profile_exists" ] || {
    # Create an Asciiville profile in Tilix for this user
    create_new_profile tilix ${profile_name}
  }
  [ "$small_profile_exists" ] || {
    # Create a Small Asciiville profile in Tilix for this user
    create_new_profile tilix ${small_profile_name}
  }
}

[ -d ${CONFDIR}/music ] && {
  [ -d ${HOME}/Music/Asciiville ] || {
    [ -d ${HOME}/Music ] || mkdir -p ${HOME}/Music
    ln -s ${CONFDIR}/music ${HOME}/Music/Asciiville
  }
}

have_go=`type -p go`
[ "${have_go}" ] && {
  have_got=`type -p got`
  [ "${have_got}" ] || {
    go install github.com/fedeztk/got/cmd/got@latest > /dev/null 2>&1
  }
  # Setup default got configuration for this user unless one exists
  [ -f ${CONFDIR}/got/config.yml ] && {
    [ -f ${HOME}/.config/got/config.yml ] || {
      [ -d ${HOME}/.config ] || mkdir -p ${HOME}/.config
      [ -d ${HOME}/.config/got ] || mkdir -p ${HOME}/.config/got
      cp ${CONFDIR}/got/config.yml ${HOME}/.config/got/config.yml
      [ "${LANG}" ] && {
        lang=`echo ${LANG} | awk -F '.' '{print $1}' | awk -F '_' '{print $1}'`
        [ "${lang}" == "en" ] || {
          cat ${HOME}/.config/got/config.yml | sed -e "s/source: en/source: ${lang}/" -e "s/target: es/target: en/" > /tmp/gotconf$$
          cp /tmp/gotconf$$ ${HOME}/.config/got/config.yml
          rm -f /tmp/gotconf$$
        }
      }
    }
  }
  have_tdraw=`type -p tdraw`
  [ "${have_tdraw}" ] || {
    go install github.com/aca/tdraw@latest > /dev/null 2>&1
  }
}

CONF="${HOME}/.config/asciiville/init"
[ -d ${HOME}/.config ] || mkdir ${HOME}/.config
[ -d ${HOME}/.config/asciiville ] || mkdir ${HOME}/.config/asciiville
[ -f ${CONF} ] || {
  touch ${CONF}
  echo "ARTDIR=/usr/share/asciiville/art" >> ${CONF}
  echo "MUSEDIR=/usr/share/asciiville/music" >> ${CONF}
  echo "SONG=\"${MUSEDIR}/Chronos.mp3\"" >> ${CONF}
  echo "ALTSONG=\"${MUSEDIR}/Epic_Dramatic-Yuriy_Bespalov.wav\"" >> ${CONF}
  echo "" >> ${CONF}
  echo "AUDIO=1" >> ${CONF}
  echo "BROWSER=w3m" >> ${CONF}
  echo "COMMAND=btop" >> ${CONF}
  echo "FULLSCREEN=" >> ${CONF}
  echo "MTITLE=\"Btop++ System Monitor\"" >> ${CONF}
  echo "CURRENT=1" >> ${CONF}
  echo "GNOME=" >> ${CONF}
  echo "RETRO=" >> ${CONF}
  echo "TILIX=" >> ${CONF}
  echo "XFCE4=" >> ${CONF}
  echo "LOLCAT=lolcat" >> ${CONF}
  echo "" >> ${CONF}
  echo "use_lolcat=1" >> ${CONF}
  echo "use_lol=YES" >> ${CONF}
  echo "journal=\"default\"" >> ${CONF}
  echo "style=\"pretty\"" >> ${CONF}
}

[ "${quiet}" ] || {
  printf "\n${BOLD}Asciiville Initialization Complete${NORMAL}\n"
  [ "${init_twit}" ] || {
    printf "\nAuthorize the Rainbow Stream app at Twitter"
    printf "\nby running the ${BOLD}'rainbowstream'${NORMAL} command\n"
  }
  printf "\nVisit the Asciiville Wiki at:"
  printf "\n\t${BOLD}https://github.com/doctorfree/Asciiville/wiki${NORMAL}\n"
}

[ "$ask_anim" ] && {
  type -p asciisplash > /dev/null && {
    while true
    do
      read -p "View an ASCII animation ? (y/n) " yn
      case $yn in
        [Yy]* )
              asciisplash -c 1 -a -i
              break
              ;;
        [Nn]* )
              printf "\nExiting.\n"
              exit 0
              ;;
            * ) echo "Please answer yes or no."
              ;;
      esac
    done
  }
}
