#!/usr/bin/env python3
#
# asciiart - display a series of ascii art and animation
#     * The lightweight character based file manager, `ranger`

from __future__ import division
from asciimatics.effects import BannerText, Cycle, Mirage, Print, Scroll, \
    Stars, Wipe
from asciimatics.particles import RingFirework, SerpentFirework, StarFirework, \
    PalmFirework
from asciimatics.renderers import FigletText, ImageFile, \
    Fire, Rainbow
from asciimatics.scene import Scene
from asciimatics.screen import Screen
from asciimatics.exceptions import ResizeScreenError
import os, tempfile
import signal
import subprocess
import sys
import time
from random import randint, choice
from pyfiglet import Figlet
import argparse

def asciiville(screen):
    scenes = []
    center = (screen.width // 2, screen.height // 2)
    text = Figlet(font="banner", width=200).renderText("Asciiville")
    width = max([len(x) for x in text.split("\n")])

    effects = [
        Print(screen,
              Fire(screen.height, 80, text, 0.4, 40, screen.colours),
              0,
              speed=1,
              transparent=False),
        Print(screen,
              FigletText("Asciiville", "banner"),
              screen.height - 9, x=(screen.width - width) // 2 + 1,
              colour=Screen.COLOUR_BLACK,
              bg=Screen.COLOUR_BLACK,
              speed=1),
        Print(screen,
              FigletText("Asciiville", "banner"),
              screen.height - 9,
              colour=Screen.COLOUR_YELLOW,
              bg=Screen.COLOUR_YELLOW,
              speed=1),
    ]
    scenes.append(Scene(effects, 100))

    effects = [
        Print(screen, ImageFile(art + "globe.gif", screen.height - 2, colours=screen.colours),
              0,
              stop_frame=150)
    ]
    scenes.append(Scene(effects))

    effects = [
        BannerText(
            screen,
            Rainbow(screen, FigletText(
                "ASCIImatics and ASCIInema Integration", font='slant')),
            center[1] - 3,
            Screen.COLOUR_GREEN),
        Stars(screen, screen.width)
    ]
    scenes.append(Scene(effects))

    effects = [
        BannerText(
            screen,
            Rainbow(screen, FigletText(
                "BTOP++ System Monitor", font='banner3-D')),
            center[1] - 3,
            Screen.COLOUR_CYAN),
        Stars(screen, (screen.width + screen.height) // 2, stop_frame=0)
    ]
    scenes.append(Scene(effects))

    effects = [
        Mirage(
            screen,
            Rainbow(screen, FigletText("Command Line")),
            center[1] - 5,
            Screen.COLOUR_GREEN,
            stop_frame=150),
        Mirage(
            screen,
            Rainbow(screen, FigletText("Web Search")),
            center[1] + 2,
            Screen.COLOUR_GREEN,
            stop_frame=150),
        Wipe(screen, start_frame=150),
        Cycle(
            screen,
            Rainbow(screen, FigletText("Command Line")),
            center[1] - 5,
            start_frame=170),
        Cycle(
            screen,
            Rainbow(screen, FigletText("Web Search")),
            center[1] + 2,
            start_frame=170)
    ]
    for _ in range(20):
        fireworks = [
            (PalmFirework, 25, 30),
            (PalmFirework, 25, 30),
            (StarFirework, 25, 35),
            (StarFirework, 25, 35),
            (StarFirework, 25, 35),
            (RingFirework, 20, 30),
            (SerpentFirework, 30, 35),
        ]
        firework, start, stop = choice(fireworks)
        effects.insert(
            1,
            firework(screen,
                     randint(0, screen.width),
                     randint(screen.height // 8, screen.height * 3 // 4),
                     randint(start, stop),
                     start_frame=randint(100, 150)))
    scenes.append(Scene(effects))

    effects = [
        BannerText(
            screen,
            Rainbow(screen, FigletText(
                "Ranger File Manager", font='banner3-D')),
            center[1] - 3,
            Screen.COLOUR_CYAN),
        Stars(screen, (screen.width + screen.height) // 2, stop_frame=0)
    ]
    scenes.append(Scene(effects))

    effects = [
        Mirage(screen,
              Rainbow(screen, FigletText("Command Line")),
                      center[1] - 10,
                      Screen.COLOUR_GREEN,
                      stop_frame=200),
        Mirage(screen,
              Rainbow(screen, FigletText("Twitter")),
                      center[1] - 2,
                      Screen.COLOUR_GREEN,
                      stop_frame=200),
        Mirage(screen,
              Rainbow(screen, FigletText("Client")),
                      center[1] + 6,
                      Screen.COLOUR_GREEN,
                      stop_frame=200),
        Stars(screen, screen.width, stop_frame=150),
        Scroll(screen, 3, start_frame=150)
    ]
    scenes.append(Scene(effects))

    effects = [
        Mirage(
            screen,
            FigletText("Conceived and"),
            screen.height,
            Screen.COLOUR_GREEN),
        Mirage(
            screen,
            FigletText("written by"),
            screen.height + 8,
            Screen.COLOUR_GREEN),
        Mirage(
            screen,
            FigletText("Doctor When"),
            screen.height + 16,
            Screen.COLOUR_GREEN),
        Scroll(screen, 3)
    ]
    scenes.append(Scene(effects, (screen.height + 24) * 3))

    effects = [
        Mirage(screen,
              Rainbow(screen, FigletText("Character Commands", "small")),
                      center[1] - 12,
                      Screen.COLOUR_GREEN,
                      stop_frame=200),
        Mirage(screen,
              Rainbow(screen, FigletText("Phase of the Moon", "small")),
                      center[1] - 6,
                      Screen.COLOUR_GREEN,
                      start_frame=30,
                      stop_frame=200),
        Mirage(screen,
              Rainbow(screen, FigletText("Weather Report", "small")),
                      center[1],
                      Screen.COLOUR_GREEN,
                      start_frame=60,
                      stop_frame=200),
        Mirage(screen,
              Rainbow(screen, FigletText("Mapscii World Map", "small")),
                      center[1] + 6,
                      Screen.COLOUR_GREEN,
                      start_frame=90,
                      stop_frame=200),
        Wipe(screen, start_frame=200),
        Stars(screen, screen.width, stop_frame=120),
        Scroll(screen, 3, start_frame=120)
    ]
    scenes.append(Scene(effects, (screen.height + 24) * 3))

    effects = [
        Mirage(screen,
              Rainbow(screen, FigletText("Disk Use Analyzer", "small")),
                      center[1] - 12,
                      Screen.COLOUR_GREEN,
                      stop_frame=200),
        Mirage(screen,
              Rainbow(screen, FigletText("Web Browser/Search", "small")),
                      center[1] - 6,
                      Screen.COLOUR_GREEN,
                      start_frame=30,
                      stop_frame=200),
        Mirage(screen,
              Rainbow(screen, FigletText("Lolcat Coloring", "small")),
                      center[1],
                      Screen.COLOUR_GREEN,
                      start_frame=60,
                      stop_frame=200),
        Mirage(screen,
              Rainbow(screen, FigletText("Music Player Plus", "small")),
                      center[1] + 6,
                      Screen.COLOUR_GREEN,
                      start_frame=90,
                      stop_frame=200),
        Wipe(screen, start_frame=200),
        Stars(screen, screen.width, stop_frame=120),
        Scroll(screen, 3, start_frame=120)
    ]
    scenes.append(Scene(effects, (screen.height + 24) * 3))

    effects = [
        Mirage(screen,
              Rainbow(screen, FigletText("Cool Retro Terminal", "small")),
                      center[1] - 12,
                      Screen.COLOUR_GREEN,
                      stop_frame=200),
        Mirage(screen,
              Rainbow(screen, FigletText("Network Speed Test", "small")),
                      center[1] - 6,
                      Screen.COLOUR_GREEN,
                      start_frame=30,
                      stop_frame=200),
        Mirage(screen,
              Rainbow(screen, FigletText("Mutt Mail Client", "small")),
                      center[1],
                      Screen.COLOUR_GREEN,
                      start_frame=60,
                      stop_frame=200),
        Mirage(screen,
              Rainbow(screen, FigletText("Music/Roon Menus", "small")),
                      center[1] + 6,
                      Screen.COLOUR_GREEN,
                      start_frame=90,
                      stop_frame=200),
        Wipe(screen, start_frame=200),
        Stars(screen, screen.width, stop_frame=120),
        Scroll(screen, 3, start_frame=120)
    ]
    scenes.append(Scene(effects, (screen.height + 24) * 3))

    effects = [
        Mirage(screen,
              Rainbow(screen, FigletText("Use Tmux", "small")),
                      center[1] - 12,
                      Screen.COLOUR_GREEN,
                      stop_frame=200),
        Mirage(screen,
              Rainbow(screen, FigletText("Kill Tmux Sessions", "small")),
                      center[1] - 6,
                      Screen.COLOUR_GREEN,
                      start_frame=30,
                      stop_frame=200),
        Mirage(screen,
              Rainbow(screen, FigletText("Record Tmux Session", "small")),
                      center[1],
                      Screen.COLOUR_GREEN,
                      start_frame=60,
                      stop_frame=200),
        Mirage(screen,
              Rainbow(screen, FigletText("Show System Info", "small")),
                      center[1] + 6,
                      Screen.COLOUR_GREEN,
                      start_frame=90,
                      stop_frame=200),
        Wipe(screen, start_frame=200),
        Stars(screen, screen.width, stop_frame=120),
        Scroll(screen, 3, start_frame=120)
    ]
    scenes.append(Scene(effects, (screen.height + 24) * 3))

    effects = [
        Stars(screen, screen.width)
    ]
    for _ in range(20):
        fireworks = [
            (PalmFirework, 25, 30),
            (PalmFirework, 25, 30),
            (StarFirework, 25, 35),
            (StarFirework, 25, 35),
            (StarFirework, 25, 35),
            (RingFirework, 20, 30),
            (SerpentFirework, 30, 35),
        ]
        firework, start, stop = choice(fireworks)
        effects.insert(
            1,
            firework(screen,
                     randint(0, screen.width),
                     randint(screen.height // 8, screen.height * 3 // 4),
                     randint(start, stop),
                     start_frame=randint(0, 250)))

    effects.append(Print(screen,
                         Rainbow(screen, FigletText("WELCOME TO")),
                         center[1] - 6,
                         speed=1,
                         start_frame=100))
    effects.append(Print(screen,
                         Rainbow(screen, FigletText("ASCIIVILLE")),
                         center[1] + 1,
                         speed=1,
                         start_frame=100))
    scenes.append(Scene(effects, 300))

    numplays=0
    screen.clear()
    while numplays < numcycles:
        screen.play(scenes, stop_on_resize=True, repeat=False)
        numplays += 1

if __name__ == "__main__":

    def handler(signal_number, frame):
        if debug:
            print("In signal handler with\nsignal number = " + str(signal_number))
            print("frame = " + str(frame))
        if mp_fifo is not None:
            for vol in range(80, 0, -5):
                print("volume " + str(vol) + " 1",
                        flush=True, file=mp_fifo)
                time.sleep(0.1)
            print("stop", flush=True, file=mp_fifo)
            print("volume 80 1", flush=True, file=mp_fifo)
            print("quit", flush=True, file=mp_fifo)
        os.remove(fifo)
        os.rmdir(tmpdir)
        sys.exit(0)

    parser = argparse.ArgumentParser()
    parser.add_argument("-a", "--audio", help="audio file to play during effects")
    parser.add_argument("-c", "--cycle", help="number of times to cycle back through effects")
    parser.add_argument("-d", "--debug", default=False, action='store_true', help="Output hopefully useful debugging statements")
    parser.add_argument("-f", "--font", help="Font for FigletText in Cycle effect, default 'small'")
    args = parser.parse_args()

    if args.audio:
        song = args.audio
    else:
        song = None
    if args.cycle:
        numcycles = int(args.cycle)
    else:
        numcycles = 1
    if args.debug:
        debug = True
    else:
        debug = False
    if args.font:
        font = args.font
    else:
        font = "small"

    play_song = None
    if os.path.isdir('/usr/share/asciiville/pics'):
        art = "/usr/share/asciiville/pics/"
    else:
        art = "/usr/local/share/asciiville/pics/"
    tmpdir = tempfile.mkdtemp()
    fifo = os.path.join(tmpdir, 'mplayer.fifo')
    signal.signal(signal.SIGINT, handler)

    mp_fifo = None
    if song is not None:
        if debug:
            print("Using mplayer FIFO " + fifo)
        os.mkfifo(fifo)
        if numcycles > 1 :
            if debug:
                print("MPlayer starting: mplayer -novideo -loop 0 -volume 80 -really-quiet -nolirc -slave -input file=" + fifo + " " + song)
            play_song = subprocess.Popen(
                ["mplayer", "-novideo", "-loop", "0", "-volume", "80",
                 "-really-quiet", "-nolirc", "-slave", "-input",
                 "file=" + fifo, song],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.STDOUT)
        else:
            if debug:
                print("MPlayer starting: mplayer -novideo -idle -volume 80 -really-quiet -nolirc -slave -input file=" + fifo + " " + song)
            play_song = subprocess.Popen(
                ["mplayer", "-novideo", "-idle", "-volume", "80",
                 "-really-quiet", "-nolirc", "-slave", "-input",
                 "file=" + fifo, song],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.STDOUT)
        mp_fifo = open(fifo, "w")

    while True:
        try:
            if debug:
                print("Calling Screen.wrapper")
            Screen.wrapper(asciiville)
            if debug:
                print("Back from Screen.wrapper")

            if song is not None:
                if debug:
                    print("Song is not None")
                if mp_fifo is not None:
                    if debug:
                        print("Fading volume")
                    for vol in range(80, 0, -5):
                        print("volume " + str(vol) + " 1",
                                flush=True, file=mp_fifo)
                        time.sleep(0.1)
                    if debug:
                        print("Stopping mplayer")
                    print("stop", flush=True, file=mp_fifo)
                    if debug:
                        print("Resetting volume")
                    print("volume 80 1", flush=True, file=mp_fifo)
                    if debug:
                        print("Quiting mplayer")
                    print("quit", flush=True, file=mp_fifo)
                if debug:
                    print("Removing FIFO " + fifo)
                os.remove(fifo)

            if debug:
                print("Removing temp directory " + tmpdir)
            os.rmdir(tmpdir)

            if play_song is not None:
                song_status = play_song.poll()
                if song_status is None:
                    if debug:
                        print("Killing mplayer")
                    os.kill(play_song.pid, signal.SIGTERM)

            sys.exit(0)
        except ResizeScreenError:
            pass

