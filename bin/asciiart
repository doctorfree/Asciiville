#!/usr/bin/env python3
#
# asciiart - display a series of ascii art and animation

from __future__ import division
from asciimatics.effects import BannerText, Cycle, Mirage, Print, Scroll, Stars
from asciimatics.particles import RingFirework, SerpentFirework, StarFirework, \
    PalmFirework
from asciimatics.renderers import ColourImageFile, FigletText, ImageFile, \
    Rainbow
from asciimatics.scene import Scene
from asciimatics.screen import Screen
from asciimatics.exceptions import ResizeScreenError
import os, tempfile
import signal
import subprocess
import sys
import time
from random import randint, choice
import argparse

def art(screen):
    scenes = []
    art = "/usr/share/doc/asciiville/art/"
    center = (screen.width // 2, screen.height // 2)

    effects = [
        BannerText(
            screen,
            Rainbow(screen, FigletText(
                "Welcome to Asciiville!", font='slant')),
            center[1] - 3,
            Screen.COLOUR_GREEN)
    ]
    for _ in range(20):
        fireworks = [
            (PalmFirework, 25, 30),
            (PalmFirework, 25, 30),
            (StarFirework, 25, 35),
            (StarFirework, 25, 35),
            (StarFirework, 25, 35),
            (RingFirework, 20, 30),
            (SerpentFirework, 30, 35),
        ]
        firework, start, stop = choice(fireworks)
        effects.insert(
            1,
            firework(screen,
                     randint(0, screen.width),
                     randint(screen.height // 8, screen.height * 3 // 4),
                     randint(start, stop),
                     start_frame=randint(0, 250)))
    scenes.append(Scene(effects))

    effects = [
        Print(screen, ImageFile(art + "globe.gif", screen.height - 2, colours=screen.colours),
              0,
              stop_frame=250)
    ]
    scenes.append(Scene(effects))

    effects = [
        BannerText(
            screen,
            Rainbow(screen, FigletText(
                "ASCIImatics and ASCIInema Integration", font='slant')),
            center[1] - 3,
            Screen.COLOUR_GREEN),
        Stars(screen, screen.width)
    ]
    scenes.append(Scene(effects))

    effects = [
        Print(screen,
              ColourImageFile(screen, art + "color_globe.gif", screen.height-2,
                              uni=screen.unicode_aware,
                              dither=screen.unicode_aware),
              0,
              stop_frame=400),
        Stars(screen, (screen.width + screen.height) // 2, start_frame=200, stop_frame=400)
    ]
    scenes.append(Scene(effects))

    effects = [
        Print(screen,
              ColourImageFile(screen, art + "grumpy_cat.jpg", screen.height,
                              uni=screen.unicode_aware),
              screen.height,
              speed=1,
              stop_frame=(40+screen.height)*3),
        Scroll(screen, 3),
    ]
    scenes.append(Scene(effects))

    effects = [
        Scroll(screen, 3),
        Mirage(
            screen,
            FigletText("Conceived and"),
            screen.height,
            Screen.COLOUR_GREEN),
        Mirage(
            screen,
            FigletText("written by"),
            screen.height + 8,
            Screen.COLOUR_GREEN),
        Mirage(
            screen,
            FigletText("Ronald Joe Record"),
            screen.height + 16,
            Screen.COLOUR_GREEN)
    ]
    scenes.append(Scene(effects, (screen.height + 24) * 3))

    effects = [
        Cycle(
            screen,
            FigletText("Asciiville", font="banner3"),
            center[1] - 8,
            stop_frame=200),
        Cycle(
            screen,
            FigletText("Rocks!", font="banner3"),
            center[1] + 3,
            stop_frame=200),
        Stars(screen, (screen.width + screen.height) // 2, stop_frame=200)
    ]
    scenes.append(Scene(effects, 200))

    effects = [
        Stars(screen, screen.width)
    ]
    for _ in range(20):
        fireworks = [
            (PalmFirework, 25, 30),
            (PalmFirework, 25, 30),
            (StarFirework, 25, 35),
            (StarFirework, 25, 35),
            (StarFirework, 25, 35),
            (RingFirework, 20, 30),
            (SerpentFirework, 30, 35),
        ]
        firework, start, stop = choice(fireworks)
        effects.insert(
            1,
            firework(screen,
                     randint(0, screen.width),
                     randint(screen.height // 8, screen.height * 3 // 4),
                     randint(start, stop),
                     start_frame=randint(0, 250)))

    effects.append(Print(screen,
                         Rainbow(screen, FigletText("WELCOME TO")),
                         center[1] - 6,
                         speed=1,
                         start_frame=100))
    effects.append(Print(screen,
                         Rainbow(screen, FigletText("ASCIIVILLE")),
                         center[1] + 1,
                         speed=1,
                         start_frame=100))
    scenes.append(Scene(effects, 300))

    if cycle is None:
        screen.play(scenes, stop_on_resize=True)
    else:
        numplays=0
        while numplays < numcycles:
            screen.play(scenes, stop_on_resize=True, repeat=False)
            numplays += 1

if __name__ == "__main__":

    def handler(signal_number, frame):
        if debug:
            print("In signal handler with\nsignal number = " + str(signal_number))
            print("frame = " + str(frame))
        with open(fifo, "w") as mp_fifo:
            for vol in range(80, 0, -5):
                print("volume " + str(vol) + " 1",
                        flush=True, file=mp_fifo)
                time.sleep(0.1)
            print("stop", flush=True, file=mp_fifo)
            print("volume 80 1", flush=True, file=mp_fifo)
            print("quit", flush=True, file=mp_fifo)
        os.remove(fifo)
        os.rmdir(tmpdir)
        sys.exit(0)

    parser = argparse.ArgumentParser()
    parser.add_argument("-a", "--audio", help="audio file to play during effects")
    parser.add_argument("-c", "--cycle", help="number of times to cycle back through effects")
    parser.add_argument("-d", "--debug", default=False, action='store_true', help="Output hopefully useful debugging statements")
    args = parser.parse_args()

    if args.audio:
        song = args.audio
    else:
        song = None
    if args.cycle:
        numcycles = int(args.cycle)
        cycle = True
    else:
        numcycles = 0
        cycle = None
    if args.debug:
        debug = True
    else:
        debug = False

    play_song = None
    tmpdir = tempfile.mkdtemp()
    fifo = os.path.join(tmpdir, 'mplayer.fifo')
    signal.signal(signal.SIGINT, handler)

    if song is not None:
        if debug:
            print("Using mplayer FIFO " + fifo)
        os.mkfifo(fifo)
        if debug:
            print("MPlayer starting: mplayer -novideo -volume 80 -really-quiet -nolirc -slave -input file=" + fifo + " " + song)
        play_song = subprocess.Popen(
            ["mplayer", "-novideo", "-volume", "80", "-really-quiet",
                        "-nolirc", "-slave", "-input", "file=" + fifo, song],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.STDOUT)

    while True:
        try:
            Screen.wrapper(art)

            if song is not None:
                with open(fifo, "w") as mp_fifo:
                    if debug:
                        print("Fading volume")
                    for vol in range(80, 0, -5):
                        print("volume " + str(vol) + " 1",
                                flush=True, file=mp_fifo)
                        time.sleep(0.1)
                    if debug:
                        print("Stopping mplayer")
                    print("stop", flush=True, file=mp_fifo)
                    if debug:
                        print("Resetting volume")
                    print("volume 80 1", flush=True, file=mp_fifo)
                    if debug:
                        print("Quiting mplayer")
                    print("quit", flush=True, file=mp_fifo)
                if debug:
                    print("Removing FIFO " + fifo)
                os.remove(fifo)

            if debug:
                print("Removing temp directory " + tmpdir)
            os.rmdir(tmpdir)

            if play_song is not None:
                song_status = play_song.poll()
                if song_status is None:
                    if debug:
                        print("Killing mplayer")
                    os.kill(play_song.pid, signal.SIGTERM)

            sys.exit(0)
        except ResizeScreenError:
            pass

