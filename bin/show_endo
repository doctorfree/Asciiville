#!/bin/bash

platform=`uname -s`
if [ "${platform}" == "Darwin" ]
then
  TOP="/usr/local/share"
else
  TOP="/usr/share"
fi
ENDO_DIR=${TOP}/asciiville/endoh1
ENDO=${ENDO_DIR}/endoh1
ESRC=${ENDO_DIR}/endoh1.c
#ALL=("clock.txt" "column.txt" "column2.txt" "column3.txt" "corners.txt" "dripping-pan.txt" "evaporation.txt" "flat.txt" "fountain.txt" "funnel.txt" "funnel2.txt" "funnel3.txt" "glass-half-empty.txt" "leidenfrost.txt" "logo.txt" "pour-out.txt" "tanada.txt")
ALL=("column.txt" "logo.txt" "pour-out.txt" "tanada.txt")
BOLD=$(tput bold 2>/dev/null)
NORM=$(tput sgr0 2>/dev/null)

[ -x ${ENDO} ] || {
  echo "${ENDO} not found or not executable"
  exit 1
}

set +m

clear
echo ""
printf "\n\tThe entry written by Yusuke Endoh won honorable mention in the\n"
printf "\n\t\t${BOLD} 2012 International Obfuscated C Code Contest${NORM}"
printf "\n\t\t       https://www.ioccc.org/index.html\n"
printf "\n\tThe entry's source code when viewed appears to be the word"
printf "\n\t'Fluid' in a container. When compiled it can take its own"
printf "\n\tsource code as input to display an ascii character animation"
printf "\n\tof a simulation of fluid dynamics in a container.\n"
printf "\n\tThe simulation uses 'Smoothed-particle hydrodynamics'"
printf "\n\tto model properties of fluid dynamics in a container.\n"
printf "\n\tWhen prompted, respond with one of the following:"
printf "\n\t\t'c' for a color simulation"
printf "\n\t\t'y' for a monochrome simulation (the entry)"
printf "\n\t\t'n' to exit the display of simulations"
printf "\n\tDuring a simulation use 'Ctrl-c' to start a new simulation or exit"
printf "\n\n\t"

read -p "Press Enter to view the program source code: " yn

clear
echo ""

cat ${ESRC}

next_input() {
  if [ ${#ALL[@]} -eq 0 ]; then
    clear
    exit 0
  else
    while true
    do
      clear
      # Seed random generator
      RANDOM=$$$(date +%s)
      INPUT=${ALL[ $RANDOM % ${#ALL[@]} ]}
      ESRC=${ENDO_DIR}/${INPUT}
      delete=("${INPUT}")
      for target in "${delete[@]}"; do
        for i in "${!ALL[@]}"; do
          if [[ ${ALL[i]} = $target ]]; then
            unset 'ALL[i]'
          fi
        done
      done
      new_array=()
      for i in "${!ALL[@]}"; do
        new_array+=( "${ALL[i]}" )
      done
      ALL=("${new_array[@]}")
      unset new_array
      read -p "View another ASCII fluid dynamics simulation ('n' to exit)? (c/y/n) [y] " yn
      yn=${yn:-y}
      case $yn in
        [Cc]* )
            ENDO=${ENDO_DIR}/endoh1_color
            break
            ;;
        [Yy]* )
            ENDO=${ENDO_DIR}/endoh1
            break
            ;;
        [Nn]* )
            clear
            exit 0
            ;;
          * ) echo "Please answer yes or no."
            ;;
      esac
    done
  fi
}

cols=`tput cols 2>/dev/null`
lines=`tput lines 2>/dev/null`
[ ${cols} -ge 80 ] && [ ${lines} -ge 24 ] || {
  echo "The ASCII fluid dynamics simulations requires a terminal window"
  echo "of size 80x24 or greater. This terminal window appears to be ${cols}x${lines}"
  echo ""
  echo "Resize the terminal window and run this command again"
  exit 1
}

echo ""
read -p "View the animated ASCII fluid dynamics simulation ? (c/y/n) [y] " yn
yn=${yn:-y}
case $yn in
  [Cc]* )
        ENDO=${ENDO_DIR}/endoh1_color
        break
        ;;
  [Yy]* )
        ENDO=${ENDO_DIR}/endoh1
        break
        ;;
  [Nn]* )
        clear
        exit 0
        ;;
      * ) echo "Please answer 'color', 'yes' or 'no'."
        ;;
esac

trap 'next_input' SIGINT

while true
do
  clear
  ${ENDO} < ${ESRC}
done

clear
exit 0
