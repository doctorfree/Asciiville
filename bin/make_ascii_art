#!/bin/bash
#
# make_ascii_art - create ascii art from a folder of images

usage() {
  printf "\nUsage: make_ascii_art [-b] [-c] [-d] [-f] [-p palette]"
  printf "\n\t[-i input_dir] [-o output_dir] [-u]\n"
  printf "Where:"
  printf "\n\t-b indicates create a border"
  printf "\n\t-c indicates use color"
  printf "\n\t-d indicates debug mode"
  printf "\n\t-f indicates fit terminal window"
  printf "\n\t-i 'input_dir' specifies the input folder of images"
  printf "\n\t-o 'output_dir' specifies the output folder of ascii art"
  printf "\n\t-p 'palette' specifies the character palette to use"
  printf "\n\t\t'palette' can be 'def', 'long', 'rev', or 'revlong'"
  printf "\n\t\tto specify the 'default', 'long', 'reverse default',"
  printf "\n\t\tor 'reverse long' character palette used for conversion"
  printf "\n\t-u displays this usage message and exits\n"
  exit 1
}

# Default palette used by jp2a
# defchars="   ...',;:clodxkO0KXNWM"
defchars="   ...,;:clodxkO0KXNWM"
# Reversed default palette
# revchars="MWNXK0Okxdolc:;,'...   "
revchars="MWNXK0Okxdolc:;,...   "
# Dark to light character set
# revlong="8WMoahkbdpqwmZO0QLCJUYXzcvunxrjft1-_+ilI;:,^..."
revlong="WMZO0QLCJUYXzcvun1il;:,^.. "
# Light to Dark character set
# longchars="...^,:;Ili+_-1tfjrxnuvczXYUJCLQ0OZmwqpdbkhaoMW8"
longchars=" ..^,:;li1nuvczXYUJCLQ0OZMW"

# Override the palettes defined above in the Asciiville config
CONFIG="${HOME}/.config/asciiville/config"
[ -f ${CONFIG} ] && . ${CONFIG}

debug=
border=
charopt=
coloropt=
fitopt=
palette=
have_convert=`type -p convert`
INP_DIR="."
OUT_DIR="./ascii"
while getopts "bcdfi:o:p:u" flag; do
  case $flag in
      b)
        border="--border"
        ;;
      c)
        coloropt="--colors"
        ;;
      d)
        debug=1
        ;;
      f)
        fitopt="--term-fit"
        ;;
      i)
        INP_DIR="$OPTARG"
        ;;
      o)
        OUT_DIR="$OPTARG"
        ;;
      p)
        charset="${OPTARG}"
        case "${charset}" in
          def)
            charopt=
            ;;
          long)
            charopt="--chars=${longchars}"
            ;;
          rev)
            charopt="--chars=${revchars}"
            ;;
          longrev)
            charopt="--chars=${revlong}"
            ;;
          *)
            charopt="--chars=${charset}"
            ;;
        esac
        ;;
      u)
        usage
        ;;
  esac
done

[ -d ${INP_DIR} ] || {
  echo "${INP_DIR} does not exist or is not a directory. Exiting."
  usage
}

[ -d ${OUT_DIR} ] || mkdir -p ${OUT_DIR}

over_all=
skip_all=
for image in ${INP_DIR}/*
do
  [ -d "${image}" ] && continue
  [ "${image}" == "${INP_DIR}/*" ] && {
    echo "No images found in ${INP_DIR}. Exiting."
    usage
  }
  [ "${debug}" ] && {
    echo ""
    echo "image=${image}"
  }

  bimage=`basename "${image}"`
  suffix=`echo ${bimage} | awk -F '.' ' { print $NF } '`
  art_name=`echo ${bimage} | sed -e "s/.${suffix}//"`
  [ "${debug}" ] && {
    echo "suffix=${suffix} art_name=${art_name}"
  }
  case "${suffix}" in
      jpg|JPG|png|PNG|JPEG|jpeg)
          input_image="${image}"
          ;;
      *)
          [ "${have_convert}" ] || {
            echo "ImageMagick 'convert' command unavailable."
            echo "Only Jpeg and PNG format images are supported."
            echo "Skipping ${image}"
            continue
          }
          [ -f "${INP_DIR}/${art_name}.png" ] && {
            echo "${INP_DIR}/${art_name}.png already exists."
            echo "Skipping conversion of ${image}"
            continue
          }
          convert "${image}" "${INP_DIR}/${art_name}.png"
          input_image="${INP_DIR}/${art_name}.png"
          ;;
  esac
  [ -f ${OUT_DIR}/"${art_name}.asc" ] && {
    [ "${skip_all}" ] && continue
    [ "${over_all}" ] || {
      echo "${OUT_DIR}/"${art_name}.asc" already exists."
      echo "Choose whether you wish to 'Overwrite All', 'overwrite', 'Skip All', 'skip', or 'Quit'"
      while true
      do
        read -p "Overwrite/Skip/Quit ('O' or 'o' / 'S' or 's' / 'Q' or 'q') " answer
        case "${answer}" in
          o)
            break
            ;;
          O)
            over_all=1
            break
            ;;
          s)
            continue
            ;;
          W)
            skip_all=1
            continue
            ;;
          q|Q)
            exit 0
            ;;
          *)
            echo "Please answer with 'o', 'O', 's', 'S', or 'Q'"
            ;;
        esac
      done
    }
  }
  [ "${debug}" ] && {
    echo "Converting with:"
    echo "jp2a ${border} ${coloropt} ${fitopt} ${charopt} --output=${OUT_DIR}/${art_name}.asc ${input_image}"
  }
  jp2a ${border} ${coloropt} ${fitopt} ${charopt} \
       --output=${OUT_DIR}/"${art_name}.asc" "${input_image}"
done
