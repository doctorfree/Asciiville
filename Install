#!/bin/bash
#
# Usage: ./Install [package names]
#   If no package names are specified then all currently
#   supported packages will be installed
#
# Versions of apt prior to 1.1 do not support install by Debian filename
# You should probably be running a more recent version of apt
# On these early versions, install with the following:
#
# sudo dpkg -i "${PKG}"
# sudo apt-get install -f

PKG_NAMES="Asciiville asciiville"
DEB_ARCH=amd64
RPM_ARCH=x86_64
BOLD=$(tput bold)
NORMAL=$(tput sgr0)

PKG_AVAILABLE=
PKG_SELECTED=

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

[ -f "${SCRIPT_DIR}/VERSION" ] || {
  echo "Missing VERSION file: ${SCRIPT_DIR}/VERSION"
  echo "Exiting"
  exit 1
}

. "${SCRIPT_DIR}/VERSION"
PKG_VER=${VERSION}
PKG_REL=${RELEASE}

platform=`uname -s`

[ "${platform}" == "Darwin" ] && {
  darwin_archive=
  if [ -f releases/${PKG_VER}/Asciiville_${PKG_VER}-${PKG_REL}.Darwin.tgz ]
  then
    darwin_archive="releases/${PKG_VER}/Asciiville_${PKG_VER}-${PKG_REL}.Darwin.tgz"
  else
    if [ -f releases/${PKG_VER}/Asciiville_${PKG_VER}-${PKG_REL}.Darwin.zip ]
    then
      darwin_archive="releases/${PKG_VER}/Asciiville_${PKG_VER}-${PKG_REL}.Darwin.zip"
    else
      # Look for other versions
      for release in releases/*/Asciiville_*-*.Darwin.*
      do
        [ "${release}" == "releases/*/Asciiville_*-*.Darwin.*" ] && {
          echo "No Darwin release archives located in ./releases/..."
          echo "Download the latest Asciiville release archive for macOS at"
          echo "    https://github.com/doctorfree/Asciiville/releases/latest"
          echo "Exiting"
          exit 1
        }
        echo "Located Asciiville release archive for macOS:"
        echo "    ${release}"
      done
    fi
  fi
  if [ "${darwin_archive}" ]
  then
    sudo pkg/Install-bin.sh ${darwin_archive}
    exit 0
  else
    echo "Version and Release in VERSION do not match located release archive(s)"
    echo "Install one of these located release archives manually with the command:"
    echo "    sudo pkg/Install-bin.sh releases/.../<archive_name>.Darwin.<suffix>"
    echo "Exiting without installing"
    exit 1
  fi
  exit 1
}

get_available_packages() {
  for pkgs in ${SCRIPT_DIR}/releases/${PKG_VER}/*.${SUF}
  do
    [ "${pkgs}" == "${SCRIPT_DIR}/releases/${PKG_VER}/*.${SUF}" ] || {
      for pkg in ${pkgs}
      do
        if [ "${arch}" ]
        then
          pkgname=`basename ${pkg} | sed -e "s/-v${PKG_VER}r${PKG_REL}-${PACKAGE}-${ARCH}.${SUF}//"` 
        else
          pkgname=`basename ${pkg} | sed -e "s/_${PKG_VER}-${PKG_REL}.${ARCH}.${SUF}//"` 
        fi
        PKG_AVAILABLE="${PKG_AVAILABLE} ${pkgname}"
      done
    }
  done
  PKG_AVAILABLE=`echo $PKG_AVAILABLE | sed -e "s/^ //"`
}

install_selected() {
  for pkg in ${PKG_AVAILABLE}
  do
    while true
    do
      read -p "Install ${pkg} ? ('Y'/'N'): " yn
      case $yn in
          [Yy]*)
              PKG_SELECTED="${PKG_SELECTED} $pkg"
              break
              ;;
          [Nn]*)
              break
              ;;
          * )
              echo "Please answer yes or no."
              ;;
      esac
    done
  done
  PKG_SELECTED=`echo $PKG_SELECTED | sed -e "s/^ //"`
}

debian=
arch=
have_apt=`type -p apt`
have_dpkg=`type -p dpkg`
have_rpm=`type -p rpm`
have_dnf=`type -p dnf`
have_pac=`type -p pacman`
[ -f /etc/os-release ] && . /etc/os-release
[ "${ID_LIKE}" == "debian" ] && debian=1
[ "${ID}" == "arch" ] && arch=1
[ "${debian}" ] || [ -f /etc/debian_version ] && debian=1

if [ "${debian}" ]
then
  SUF=deb
  [ "${have_dpkg}" ] && {
    dpkg_arch=`dpkg --print-architecture`
    [ "${dpkg_arch}" == "${DEB_ARCH}" ] || DEB_ARCH=${dpkg_arch}
  }
  ARCH=${DEB_ARCH}
else
  if [ "${arch}" ]
  then
    SUF=zst
    ARCH=`uname -m`
  else
    SUF=rpm
    ARCH=${RPM_ARCH}
  fi
fi

get_available_packages

[ "$PKG_AVAILABLE}" ] || {
  echo "No packages for version ${PKG_VER} are currently available. Exiting."
  exit 1
}

[ "$1" ] && {
  # If invoked with -i argument, present a menu of options to select from
  if [ "$1" == "-i" ]
  then
    shift
    PKG_NAMES="$*"
    [ "${PKG_AVAILABLE}" ] && {
      echo "Currently available Asciiville packages:"
      echo ""
      for avaipkg in ${PKG_AVAILABLE}
      do
        echo "$avaipkg"
      done
      echo ""
    }
    while true
    do
      PS3="${BOLD}Please enter your desire (numeric or text): ${NORMAL}"
      options=("Install All" "Install Selected" "Quit")
      select opt in "${options[@]}"
      do
        case "$opt,$REPLY" in
            "Install All",*|*,"Install All")
                PKG_NAMES="${PKG_AVAILABLE}"
                break 2
                ;;
            "Install Selected",*|*,"Install Selected")
                install_selected
                PKG_NAMES="${PKG_SELECTED}"
                break 2
                ;;
            "Quit",*|*,"Quit"|"quit",*|*,"quit")
                printf "\nExiting\n"
                exit 0
                ;;
        esac
      done
    done
  else
    PKG_NAMES="$*"
  fi
}

[ "${PKG_NAMES}" ] || {
  echo "No valid Package names specified. Exiting."
  exit 1
}

for PKG_NAME in ${PKG_NAMES}
do
  if [ "${arch}" ]
  then
    PKG="${SCRIPT_DIR}/releases/${PKG_VER}/${PKG_NAME}-v${PKG_VER}r${PKG_REL}-${PACKAGE}-${ARCH}.pkg.tar.${SUF}"
  else
    PKG="${SCRIPT_DIR}/releases/${PKG_VER}/${PKG_NAME}_${PKG_VER}-${PKG_REL}.${ARCH}.${SUF}"
  fi
  [ -f "${PKG}" ] || {
    echo "${PKG_NAME}_${PKG_VER}-${PKG_REL}.${ARCH}.${SUF} not found."
    for pkgs in ${SCRIPT_DIR}/releases/*/${PKG_NAME}_*.${SUF}
    do
      [ "${pkgs}" == "${SCRIPT_DIR}/releases/*/${PKG_NAME}_*.${SUF}" ] || {
        echo "Found existing packages:"
        echo "${pkgs}"
      }
    done
    echo ""
    continue
  }

  echo "Installing ${PKG}"
  if [ "${debian}" ]
  then
    if [ "${have_apt}" ]
    then
      sudo apt update -y -qq
      sudo apt install "${PKG}"
    else
      if [ "${have_dpkg}" ]
      then
        sudo dpkg -i "${PKG}"
      else
        echo "Cannot locate either apt or dpkg to install. Skipping."
      fi
    fi
  else
    if [ "${arch}" ]
    then
      if [ "${have_pac}" ]
      then
        sudo pacman -U "${PKG}"
      else
        echo "Cannot locate pacman to install. Skipping."
      fi
    else
      if [ "${have_dnf}" ]
      then
        sudo dnf update -y -q
        sudo dnf localinstall "${PKG}"
      else
        if [ "${have_rpm}" ]
        then
          sudo rpm -i "${PKG}"
        else
          echo "Cannot locate either dnf or rpm to install. Skipping."
        fi
      fi
    fi
  fi
  break
done
