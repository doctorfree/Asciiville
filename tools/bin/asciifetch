#!/bin/bash

# Prepare ----------------------------------------------------------------------

have_gum=$(type -p gum)
[ "${have_gum}" ] || exit 1

usage() {
    printf "\nUsage: asciifetch [-a] [-k] [-z] [-u]"
	printf "\nWhere:"
	printf "\n\t-a indicates animate display"
	printf "\n\t-k indicates do not exit"
	printf "\n\t-z indicates zoom display"
	printf "\n\t-u displays this usage message and exits\n"
	exit 1
}

cleanup() {
  tput cnorm
  tput cup ${terminal_height} 0
  parent_name=$(ps -p ${PPID} -o comm=)
  if [ "${parent_name}" == "asciifetch" ]
  then
    exit 2
  else
    exit 0
  fi
}

animate() {
    tput civis -- invisible
    interval="0.1"
    liftlines=$((terminal_height / 4))
    while true
    do
      line=1
      tput cup ${terminal_height} 0
      while [ ${line} -lt ${liftlines} ]
      do
        sleep ${interval}
        printf "\n"
        line=$((line+1))
      done

      line=1
      tput cup 0 0
      while [ ${line} -lt ${liftlines} ]
      do
        sleep ${interval}
        tput ri
        line=$((line+1))
      done

      line=1
      tput cup ${terminal_height} 0
      while [ ${line} -lt ${liftlines} ]
      do
        sleep ${interval}
        printf "\n"
        line=$((line+1))
      done

      line=1
      tput cup 0 0
      while [ ${line} -lt ${liftlines} ]
      do
        sleep ${interval}
        tput ri
        line=$((line+1))
      done

      sleep 2
      [ "${keepalive}" ] || break
    done
    tput cup ${terminal_height} 0
    tput cnorm
}

zoom() {
    tooldir="/usr/share/asciiville/tools/bin"
    sock_name="/tmp/fetch_kitty$$"
    init_size=38
    interval="0.1"
    kitty --title="Asciiville Zoom" \
          --start-as fullscreen \
          --override allow_remote_control=yes \
          --override dynamic_background_opacity=yes \
          --override background=black \
          --override cursor=#000000 \
          --override font_size=${size} \
          --override draw_minimal_borders=yes \
          --override tab_bar_min_tabs=2 \
          --listen-on unix:${sock_name} \
          ${tooldir}/asciifetch -k 2> /dev/null &
    kitty_pid=$!
    trap 'cleanup' USR1
    ${tooldir}/wait_for_pid ${kitty_pid} > /dev/null 2>&1 &
    sleep 1

    while true
    do
      size=$((init_size-2))
      opacity="1.0"

      [ -S ${sock_name} ] || break
      kitty @ --to unix:${sock_name} set-background-opacity ${opacity} 2> /dev/null
      kitty @ --to unix:${sock_name} scroll-window 6 2> /dev/null
      opacity=$(echo "${opacity}*0.95" | bc)
      while [ ${size} -gt 0 ]
      do
        kitty @ --to unix:${sock_name} set-font-size ${size} 2> /dev/null
        kitty @ --to unix:${sock_name} set-background-opacity ${opacity} 2> /dev/null
        size=$((size-2))
        opacity=$(echo "${opacity}*0.95" | bc)
      done
      sleep 0.2
      size=2
      opacity=$(echo "${opacity}*1.05" | bc)
      while [ ${size} -lt ${init_size} ]
      do
        kitty @ --to unix:${sock_name} set-font-size ${size} 2> /dev/null
        size=$((size+2))
        kitty @ --to unix:${sock_name} set-background-opacity ${opacity} 2> /dev/null
        opacity=$(echo "${opacity}*1.1" | bc)
      done
      sleep 2
      if [ "${keepalive}" ]
      then
        size=$((init_size-2))
      else
        break
      fi
    done
    [ -S ${sock_name} ] && kitty @ --to unix:${sock_name} close-window 2> /dev/null
}

animate=
zoom=
keepalive=
# kitty_pid=
figfont=Small
while getopts "af:kzu" flag; do
    case $flag in
        a)
            animate=1
            ;;
        f)
            figfont="${OPTARG}"
            ;;
        k)
            keepalive=1
            ;;
        z)
            have_kitty=`type -p kitty`
            [ "${have_kitty}" ] && zoom=1
            ;;
        u)
            usage
            ;;
    esac
done
shift $(( OPTIND - 1 ))

trap 'cleanup' SIGINT SIGKILL SIGTERM
FIG_FONTS="/usr/share/figlet-fonts"
figdir="-d ${FIG_FONTS}"
[ -d "${FIG_FONTS}" ] || figdir=
#figcom="figlet -c ${figdir} -f ${figfont} -k -t"
figcom="figlet ${figdir} -f ${figfont}"

title=$(gum style --bold --foreground 12 "$(${figcom} Asciiville)")
subtitle=$(gum style --italic --foreground 12 'The Ultimate in Ascii Art')
info=$(gum join --vertical --align center "${title}" "${subtitle}")

art=$(gum style --foreground "${main_color}" '          ,~-.
         (  Ê» )-.          ,~Ê»`-.
      ,~Ê» `  Ê» ) )       _(   _) )
     ( ( [97m.--.===.--.[0m    (  `    Ê» )
      `[97m.%%.[91m###[97m|[0m888[97m.[31m:[97m`.[0m   `-Ê»`~~=~Ê»
      [97m/%%/[91m####[97m|[0m8888[97m\[31m::[97m\[0m
     [97m|%%/[91m#####[97m|[0m88888[97m\[31m::[97m|[0m
     [97m|%%|[91m#####[97m|[0m88888[97m|[31m::[97m|[0m.,-.
     [97m\%%|[91m#####[97m|[0m88888[97m|[31m::[97m/[0m    )_
      [97m\%\[91m#####[97m|[0m88888[97m/[31m:[97m/[0m ( `Ê»  )
       [97m\%\[91m####[97m|[0m8888[97m/[31m:[97m/[0m(  ,  -Ê»`-.
   ,~-. [97m`%\[91m###[97m|[0m888[97m/[31m:[97mÊ»[0m(  (     Ê») )
  (  ) )_ [97m`\[93m__[97m|[93m__[97m/Ê»[0m   `~-~=--~~=Ê»
 ( ` Ê»)  ) [93m[VVVVV][0m
(_(_.~~~Ê»   [97m\|[93m_[97m|/[0m
            [93m[XXX][0m
            [93m`"""Ê»[0m')

color=$(gum style '[0;30mï”›   [0;31mï”›   [0;32mï”›   [0;33mï”›   [0;34mï”›   [0;35mï”›   [0;36mï”›   [0;37mï”› [0m
[0;90mïƒ‚   [0;91mïƒ‚   [0;92mïƒ‚   [0;93mïƒ‚   [0;94mïƒ‚   [0;95mïƒ‚   [0;96mïƒ‚   [0;97mïƒ‚ [0m')


# Display ------------------------------------------------------------------------------------------

sleep 1
terminal_size=$(stty size)
terminal_height=${terminal_size% *}
terminal_width=${terminal_size#* }

prompt_height=${PROMPT_HEIGHT#-1}

print_test() {
    no_color=$(printf '%b' "${1}" | sed -e 's/\x1B\[[0-9;]*[JKmsu]//g')

    [ "$(printf '%s' "${no_color}" | wc --lines)" -gt $(( terminal_height - prompt_height )) ] && return 1
    [ "$(printf '%s' "${no_color}" | wc --max-line-length)" -gt "${terminal_width}" ] && return 1

    gum style --align center --width="${terminal_width}" "${1}" ''
    printf '%b' "\033[A"

    [ "${animate}" ] && animate
    [ "${zoom}" ] && zoom
    [ "${keepalive}" ] && {
      while true
      do
        sleep 1
      done
    }
    exit 0
}

clear
tput cup ${terminal_height} 0

# Landscape layout
group_info_color=$(gum join --vertical --align center "${info}" '' "${color}")
print_test "$(gum join --horizontal --align center "${art}" '  ' "${group_info_color}")"

# Portrait layout
print_test "$(gum join --vertical --align center "${art}" '' "${group_info_color}")"

# Other layout
print_test "${group_info_color}"
print_test "${info}"

exit 1
