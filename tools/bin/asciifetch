#!/bin/bash
#
# asciifetch - display, animate, zoom Asciiville splash screen using Kitty
#
# Written by Ronald Joe Record <ronaldrecord@gmail.com>
#
# Based on https://github.com/info-mono/diyfetch/blob/main/examples/brandfetch
# from the diyfetch project by Nguyen Nhadt Anh <nnbnh@protonmail.com>

have_gum=$(type -p gum)
[ "${have_gum}" ] || exit 1
have_wmctrl=`type -p wmctrl`
have_xprop=`type -p xprop`

if [ `echo $PATH | grep -c /.local/bin` -ne "1" ]
then
  export PATH="$PATH:$HOME/.local/bin"
fi

usage() {
  printf "\nUsage: asciifetch [-a] [-f] [-k] [-q] [-z] [-u]"
  printf "\nWhere:"
  printf "\n\t-a indicates animate display"
  printf "\n\t-f indicates fullscreen mode"
  printf "\n\t-k indicates do not exit"
  printf "\n\t-q indicates quick display, do not sleep"
  printf "\n\t-z indicates zoom display"
  printf "\n\t-u displays this usage message and exits\n"
  exit 1
}

add_fullscreen() {
  [ "${have_wmctrl}" ] && {
    [ "${have_xprop}" ] && {
      # The things a man must do
      win_id=`wmctrl -lp | grep $(xprop -root | grep _NET_ACTIVE_WINDOW | head -1 | awk '{print $5}' | sed 's/,//' | sed 's/^0x/0x0/') | awk ' { print $1 } '`
      [ "${win_id}" ] && xprop -id ${win_id} | grep _NET_WM_STATE | grep FULLSCREEN > /dev/null && isfull=1
    }
    [ "${isfull}" ] || {
      wmctrl -r ':ACTIVE:' -b add,fullscreen
      sleep 1
      set_term_sizes
    }
  }
}

remove_fullscreen() {
  [ "${have_wmctrl}" ] && {
    [ "${isfull}" ] || {
      wmctrl -r ':ACTIVE:' -b remove,fullscreen
      clear
      sleep 1
      set_term_sizes
      display_ascii
    }
  }
}

cleanup() {
  [ "${fullscreen}" == "fullscreen" ] && [ "${animate}" ] && remove_fullscreen
  tput cnorm
  tput cup ${terminal_height} 0
  parent_name=$(ps -p ${PPID} -o comm=)
  if [ "${parent_name}" == "asciifetch" ]
  then
    exit 2
  else
    exit 0
  fi
}

animate() {
  tput civis -- invisible
  interval="0.1"
  lastinterval="0.2"
  liftlines=$((terminal_height / 4))
  while true
  do
    line=1
    tput cup ${terminal_height} 0
    while [ ${line} -lt ${liftlines} ]
    do
      sleep ${interval}
      printf "\n"
      line=$((line+1))
    done

    line=1
    tput cup 0 0
    while [ ${line} -lt ${liftlines} ]
    do
      sleep ${interval}
      tput ri
      line=$((line+1))
    done

    line=1
    tput cup ${terminal_height} 0
    while [ ${line} -lt ${liftlines} ]
    do
      sleep ${interval}
      printf "\n"
      line=$((line+1))
    done

    line=1
    tput cup 0 0
    while [ ${line} -lt ${liftlines} ]
    do
      sleep ${lastinterval}
      tput ri
      line=$((line+1))
    done

    [ "${quick}" ] || sleep 2
    [ "${keepalive}" ] || break
  done
  [ "${fullscreen}" == "fullscreen" ] && remove_fullscreen
  tput cup ${terminal_height} 0
  tput cnorm
}

zoom() {
  tooldir="/usr/local/share/asciiville/tools/bin"
  sock_name="/tmp/fetch_kitty$$"
  init_size=32
  interval="0.1"
  kitty --title="Asciiville Zoom" \
        --start-as ${fullscreen} \
        --override initial_window_width=98c \
        --override initial_window_height=26c \
        --override allow_remote_control=yes \
        --override dynamic_background_opacity=yes \
        --override background=black \
        --override cursor=#000000 \
        --override font_size=${size} \
        --override draw_minimal_borders=yes \
        --override tab_bar_min_tabs=2 \
        --listen-on unix:${sock_name} \
        ${tooldir}/asciifetch -k 2> /dev/null &
  kitty_pid=$!
  trap 'cleanup' USR1
  ${tooldir}/wait_for_pid ${kitty_pid} > /dev/null 2>&1 &
  sleep 1

  if [ "${fullscreen}" == "fullscreen" ]
  then
    scrollsize=4
  else
    scrollsize=2
  fi
  while true
  do
    size=${init_size}
    opacity="1.0"
    tput cup ${terminal_height} 0

    [ -S ${sock_name} ] || break
    kitty @ --to unix:${sock_name} set-background-opacity ${opacity} 2> /dev/null
    kitty @ --to unix:${sock_name} scroll-window ${scrollsize}  2> /dev/null
    opacity=$(echo "${opacity}*0.95" | bc)
    while [ ${size} -gt 0 ]
    do
      kitty @ --to unix:${sock_name} set-font-size ${size} 2> /dev/null
      kitty @ --to unix:${sock_name} set-background-opacity ${opacity} 2> /dev/null
      size=$((size-2))
      opacity=$(echo "${opacity}*0.95" | bc)
    done
    sleep 0.2
    size=2
    opacity=$(echo "${opacity}*1.05" | bc)
    while [ ${size} -lt ${init_size} ]
    do
      kitty @ --to unix:${sock_name} set-font-size ${size} 2> /dev/null
      size=$((size+2))
      kitty @ --to unix:${sock_name} set-background-opacity ${opacity} 2> /dev/null
      opacity=$(echo "${opacity}*1.1" | bc)
    done
    sleep 2
    [ "${keepalive}" ] || break
  done
  [ -S ${sock_name} ] && kitty @ --to unix:${sock_name} close-window 2> /dev/null
}

set_term_sizes() {
  terminal_size=$(stty size)
  terminal_height=${terminal_size% *}
  terminal_width=${terminal_size#* }
  tput cup ${terminal_height} 0
}

print_info() {
  no_color=$(printf '%b' "${1}" | sed -e 's/\x1B\[[0-9;]*[JKmsu]//g')

  [ "$(printf '%s' "${no_color}" | wc --lines)" -gt ${terminal_height} ] && {
    return 1
  }
  [ "$(printf '%s' "${no_color}" | wc --max-line-length)" -gt "${terminal_width}" ] && {
    return 1
  }

  gum style --align center --width="${terminal_width}" "${1}" ''
  printf '%b' "\033[A"
  return 0
}

display_ascii() {
  # Landscape layout
  group_info_color=$(gum join --vertical --align center "${info}" '' "${color}")
  print_info "$(gum join --horizontal --align center "${art}" '  ' "${group_info_color}")"

  # Portrait layout
  [ $? -eq 0 ] || {
    print_info "$(gum join --vertical --align center "${art}" '' "${group_info_color}")"
  }

  # Other layout
  [ $? -eq 0 ] || {
    print_info "${group_info_color}"
    print_info "${info}"
  }
}

animate=
fullscreen=normal
keepalive=
quick=
zoom=
while getopts "afkqzu" flag; do
  case $flag in
    a)
      animate=1
      ;;
    f)
      fullscreen=fullscreen
      ;;
    k)
      keepalive=1
      ;;
    q)
      quick=1
      ;;
    z)
      have_kitty=`type -p kitty`
      [ "${have_kitty}" ] && zoom=1
      ;;
    u)
      usage
      ;;
  esac
done
shift $(( OPTIND - 1 ))

clear
[ "${fullscreen}" == "fullscreen" ] && [ "${animate}" ] && add_fullscreen

trap 'cleanup' SIGINT SIGKILL SIGTERM

title=$(gum style --bold --foreground 12 "$(figlet Asciiville)")
subtitle=$(gum style --italic --foreground 12 'The Ultimate in Ascii Art')
info=$(gum join --vertical --align center "${title}" "${subtitle}")

art=$(gum style --foreground "${main_color}" '          ,~-.
         (  Ê» )-.          ,~Ê»`-.
      ,~Ê» `  Ê» ) )       _(   _) )
     ( ( [97m.--.===.--.[0m    (  `    Ê» )
      `[97m.%%.[91m###[97m|[0m888[97m.[31m:[97m`.[0m   `-Ê»`~~=~Ê»
      [97m/%%/[91m####[97m|[0m8888[97m\[31m::[97m\[0m
     [97m|%%/[91m#####[97m|[0m88888[97m\[31m::[97m|[0m
     [97m|%%|[91m#####[97m|[0m88888[97m|[31m::[97m|[0m.,-.
     [97m\%%|[91m#####[97m|[0m88888[97m|[31m::[97m/[0m    )_
      [97m\%\[91m#####[97m|[0m88888[97m/[31m:[97m/[0m ( `Ê»  )
       [97m\%\[91m####[97m|[0m8888[97m/[31m:[97m/[0m(  ,  -Ê»`-.
   ,~-. [97m`%\[91m###[97m|[0m888[97m/[31m:[97mÊ»[0m(  (     Ê») )
  (  ) )_ [97m`\[93m__[97m|[93m__[97m/Ê»[0m   `~-~=--~~=Ê»
 ( ` Ê»)  ) [93m[VVVVV][0m
(_(_.~~~Ê»   [97m\|[93m_[97m|/[0m
            [93m[XXX][0m
            [93m`"""Ê»[0m')

color=$(gum style '[0;30mï”›   [0;31mï”›   [0;32mï”›   [0;33mï”›   [0;34mï”›   [0;35mï”›   [0;36mï”›   [0;37mï”› [0m
[0;90mïƒ‚   [0;91mïƒ‚   [0;92mïƒ‚   [0;93mïƒ‚   [0;94mïƒ‚   [0;95mïƒ‚   [0;96mïƒ‚   [0;97mïƒ‚ [0m')

[ "${quick}" ] || sleep 1
set_term_sizes

display_ascii

[ "${animate}" ] && animate
[ "${zoom}" ] && zoom
[ "${keepalive}" ] && {
  while true
  do
    sleep 1
  done
}
exit 0
